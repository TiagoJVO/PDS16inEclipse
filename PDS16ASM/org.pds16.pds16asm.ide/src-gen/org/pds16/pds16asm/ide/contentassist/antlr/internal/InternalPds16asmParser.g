/*
 * generated by Xtext 2.10.0
 */
parser grammar InternalPds16asmParser;

options {
	tokenVocab=InternalPds16asmLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.pds16.pds16asm.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.pds16.pds16asm.services.Pds16asmGrammarAccess;

}
@members {
	private Pds16asmGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("NumberSign", "'#'");
		tokenNameToValue.put("DollarSign", "'\\u0024'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LR", "'LR'");
		tokenNameToValue.put("PC", "'PC'");
		tokenNameToValue.put("Jc", "'jc'");
		tokenNameToValue.put("Je", "'je'");
		tokenNameToValue.put("Jz", "'jz'");
		tokenNameToValue.put("Ld", "'ld'");
		tokenNameToValue.put("R0", "'r0'");
		tokenNameToValue.put("R1", "'r1'");
		tokenNameToValue.put("R2", "'r2'");
		tokenNameToValue.put("R3", "'r3'");
		tokenNameToValue.put("R4", "'r4'");
		tokenNameToValue.put("R5", "'r5'");
		tokenNameToValue.put("R6", "'r6'");
		tokenNameToValue.put("R7", "'r7'");
		tokenNameToValue.put("St", "'st'");
		tokenNameToValue.put("PSW", "'PSW'");
		tokenNameToValue.put("Adc", "'adc'");
		tokenNameToValue.put("Add", "'add'");
		tokenNameToValue.put("Anl", "'anl'");
		tokenNameToValue.put("Dec", "'dec'");
		tokenNameToValue.put("Inc", "'inc'");
		tokenNameToValue.put("Jae", "'jae'");
		tokenNameToValue.put("Jbl", "'jbl'");
		tokenNameToValue.put("Jmp", "'jmp'");
		tokenNameToValue.put("Jnc", "'jnc'");
		tokenNameToValue.put("Jne", "'jne'");
		tokenNameToValue.put("Jnz", "'jnz'");
		tokenNameToValue.put("Ldb", "'ldb'");
		tokenNameToValue.put("Ldi", "'ldi'");
		tokenNameToValue.put("Low", "'low'");
		tokenNameToValue.put("Mov", "'mov'");
		tokenNameToValue.put("Nop", "'nop'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Orl", "'orl'");
		tokenNameToValue.put("Rcl", "'rcl'");
		tokenNameToValue.put("Rcr", "'rcr'");
		tokenNameToValue.put("Ret", "'ret'");
		tokenNameToValue.put("Rrl", "'rrl'");
		tokenNameToValue.put("Rrm", "'rrm'");
		tokenNameToValue.put("Sbb", "'sbb'");
		tokenNameToValue.put("Shl", "'shl'");
		tokenNameToValue.put("Shr", "'shr'");
		tokenNameToValue.put("Stb", "'stb'");
		tokenNameToValue.put("Sub", "'sub'");
		tokenNameToValue.put("Xrl", "'xrl'");
		tokenNameToValue.put("Bss", "'.bss'");
		tokenNameToValue.put("End", "'.end'");
		tokenNameToValue.put("Equ", "'.equ'");
		tokenNameToValue.put("Org", "'.org'");
		tokenNameToValue.put("Set", "'.set'");
		tokenNameToValue.put("Adcf", "'adcf'");
		tokenNameToValue.put("Addf", "'addf'");
		tokenNameToValue.put("Anlf", "'anlf'");
		tokenNameToValue.put("Decf", "'decf'");
		tokenNameToValue.put("High", "'high'");
		tokenNameToValue.put("Incf", "'incf'");
		tokenNameToValue.put("Iret", "'iret'");
		tokenNameToValue.put("Jmpl", "'jmpl'");
		tokenNameToValue.put("Ldih", "'ldih'");
		tokenNameToValue.put("Movf", "'movf'");
		tokenNameToValue.put("Notf", "'notf'");
		tokenNameToValue.put("Orlf", "'orlf'");
		tokenNameToValue.put("Sbbf", "'sbbf'");
		tokenNameToValue.put("Subf", "'subf'");
		tokenNameToValue.put("Subr", "'subr'");
		tokenNameToValue.put("Xrlf", "'xrlf'");
		tokenNameToValue.put("Byte", "'.byte'");
		tokenNameToValue.put("Data", "'.data'");
		tokenNameToValue.put("Text", "'.text'");
		tokenNameToValue.put("Word", "'.word'");
		tokenNameToValue.put("Ascii", "'.ascii'");
		tokenNameToValue.put("Space", "'.space'");
		tokenNameToValue.put("Asciiz", "'.asciiz'");
		tokenNameToValue.put("Section", "'.section'");
	}

	public void setGrammarAccess(Pds16asmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRulePDS16ASM
entryRulePDS16ASM
:
{ before(grammarAccess.getPDS16ASMRule()); }
	 rulePDS16ASM
{ after(grammarAccess.getPDS16ASMRule()); } 
	 EOF 
;

// Rule PDS16ASM
rulePDS16ASM 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPDS16ASMAccess().getInstuctionsAssignment()); }
		(rule__PDS16ASM__InstuctionsAssignment)*
		{ after(grammarAccess.getPDS16ASMAccess().getInstuctionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabel
entryRuleLabel
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelAccess().getGroup()); }
		(rule__Label__Group__0)
		{ after(grammarAccess.getLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirective
entryRuleDirective
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectiveAccess().getValueAssignment()); }
		(rule__Directive__ValueAssignment)
		{ after(grammarAccess.getDirectiveAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabelDirective
entryRuleLabelDirective
:
{ before(grammarAccess.getLabelDirectiveRule()); }
	 ruleLabelDirective
{ after(grammarAccess.getLabelDirectiveRule()); } 
	 EOF 
;

// Rule LabelDirective
ruleLabelDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelDirectiveAccess().getAlternatives()); }
		(rule__LabelDirective__Alternatives)
		{ after(grammarAccess.getLabelDirectiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBss
entryRuleBss
:
{ before(grammarAccess.getBssRule()); }
	 ruleBss
{ after(grammarAccess.getBssRule()); } 
	 EOF 
;

// Rule Bss
ruleBss 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBssAccess().getValueAssignment()); }
		(rule__Bss__ValueAssignment)
		{ after(grammarAccess.getBssAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleData
entryRuleData
:
{ before(grammarAccess.getDataRule()); }
	 ruleData
{ after(grammarAccess.getDataRule()); } 
	 EOF 
;

// Rule Data
ruleData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataAccess().getValueAssignment()); }
		(rule__Data__ValueAssignment)
		{ after(grammarAccess.getDataAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnd
entryRuleEnd
:
{ before(grammarAccess.getEndRule()); }
	 ruleEnd
{ after(grammarAccess.getEndRule()); } 
	 EOF 
;

// Rule End
ruleEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndAccess().getValueAssignment()); }
		(rule__End__ValueAssignment)
		{ after(grammarAccess.getEndAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleText
entryRuleText
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextAccess().getValueAssignment()); }
		(rule__Text__ValueAssignment)
		{ after(grammarAccess.getTextAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAscii
entryRuleAscii
:
{ before(grammarAccess.getAsciiRule()); }
	 ruleAscii
{ after(grammarAccess.getAsciiRule()); } 
	 EOF 
;

// Rule Ascii
ruleAscii 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsciiAccess().getGroup()); }
		(rule__Ascii__Group__0)
		{ after(grammarAccess.getAsciiAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAsciiz
entryRuleAsciiz
:
{ before(grammarAccess.getAsciizRule()); }
	 ruleAsciiz
{ after(grammarAccess.getAsciizRule()); } 
	 EOF 
;

// Rule Asciiz
ruleAsciiz 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsciizAccess().getGroup()); }
		(rule__Asciiz__Group__0)
		{ after(grammarAccess.getAsciizAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleByte
entryRuleByte
:
{ before(grammarAccess.getByteRule()); }
	 ruleByte
{ after(grammarAccess.getByteRule()); } 
	 EOF 
;

// Rule Byte
ruleByte 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getByteAccess().getGroup()); }
		(rule__Byte__Group__0)
		{ after(grammarAccess.getByteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWord
entryRuleWord
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordAccess().getGroup()); }
		(rule__Word__Group__0)
		{ after(grammarAccess.getWordAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpace
entryRuleSpace
:
{ before(grammarAccess.getSpaceRule()); }
	 ruleSpace
{ after(grammarAccess.getSpaceRule()); } 
	 EOF 
;

// Rule Space
ruleSpace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpaceAccess().getGroup()); }
		(rule__Space__Group__0)
		{ after(grammarAccess.getSpaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSet
entryRuleSet
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetAccess().getGroup()); }
		(rule__Set__Group__0)
		{ after(grammarAccess.getSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSection
entryRuleSection
:
{ before(grammarAccess.getSectionRule()); }
	 ruleSection
{ after(grammarAccess.getSectionRule()); } 
	 EOF 
;

// Rule Section
ruleSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSectionAccess().getGroup()); }
		(rule__Section__Group__0)
		{ after(grammarAccess.getSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrg
entryRuleOrg
:
{ before(grammarAccess.getOrgRule()); }
	 ruleOrg
{ after(grammarAccess.getOrgRule()); } 
	 EOF 
;

// Rule Org
ruleOrg 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrgAccess().getGroup()); }
		(rule__Org__Group__0)
		{ after(grammarAccess.getOrgAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqu
entryRuleEqu
:
{ before(grammarAccess.getEquRule()); }
	 ruleEqu
{ after(grammarAccess.getEquRule()); } 
	 EOF 
;

// Rule Equ
ruleEqu 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquAccess().getGroup()); }
		(rule__Equ__Group__0)
		{ after(grammarAccess.getEquAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstructions
entryRuleInstructions
:
{ before(grammarAccess.getInstructionsRule()); }
	 ruleInstructions
{ after(grammarAccess.getInstructionsRule()); } 
	 EOF 
;

// Rule Instructions
ruleInstructions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionsAccess().getAlternatives()); }
		(rule__Instructions__Alternatives)
		{ after(grammarAccess.getInstructionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoad
entryRuleLoad
:
{ before(grammarAccess.getLoadRule()); }
	 ruleLoad
{ after(grammarAccess.getLoadRule()); } 
	 EOF 
;

// Rule Load
ruleLoad 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadAccess().getAlternatives()); }
		(rule__Load__Alternatives)
		{ after(grammarAccess.getLoadAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getAlternatives()); }
		(rule__Store__Alternatives)
		{ after(grammarAccess.getStoreAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAritmetica
entryRuleAritmetica
:
{ before(grammarAccess.getAritmeticaRule()); }
	 ruleAritmetica
{ after(grammarAccess.getAritmeticaRule()); } 
	 EOF 
;

// Rule Aritmetica
ruleAritmetica 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAritmeticaAccess().getAlternatives()); }
		(rule__Aritmetica__Alternatives)
		{ after(grammarAccess.getAritmeticaAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogica
entryRuleLogica
:
{ before(grammarAccess.getLogicaRule()); }
	 ruleLogica
{ after(grammarAccess.getLogicaRule()); } 
	 EOF 
;

// Rule Logica
ruleLogica 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicaAccess().getAlternatives()); }
		(rule__Logica__Alternatives)
		{ after(grammarAccess.getLogicaAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJump
entryRuleJump
:
{ before(grammarAccess.getJumpRule()); }
	 ruleJump
{ after(grammarAccess.getJumpRule()); } 
	 EOF 
;

// Rule Jump
ruleJump 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJumpAccess().getJumpOpParserRuleCall()); }
		ruleJumpOp
		{ after(grammarAccess.getJumpAccess().getJumpOpParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLdImmediate
entryRuleLdImmediate
:
{ before(grammarAccess.getLdImmediateRule()); }
	 ruleLdImmediate
{ after(grammarAccess.getLdImmediateRule()); } 
	 EOF 
;

// Rule LdImmediate
ruleLdImmediate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLdImmediateAccess().getGroup()); }
		(rule__LdImmediate__Group__0)
		{ after(grammarAccess.getLdImmediateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLdDirect
entryRuleLdDirect
:
{ before(grammarAccess.getLdDirectRule()); }
	 ruleLdDirect
{ after(grammarAccess.getLdDirectRule()); } 
	 EOF 
;

// Rule LdDirect
ruleLdDirect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLdDirectAccess().getGroup()); }
		(rule__LdDirect__Group__0)
		{ after(grammarAccess.getLdDirectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLdIndexed
entryRuleLdIndexed
:
{ before(grammarAccess.getLdIndexedRule()); }
	 ruleLdIndexed
{ after(grammarAccess.getLdIndexedRule()); } 
	 EOF 
;

// Rule LdIndexed
ruleLdIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLdIndexedAccess().getGroup()); }
		(rule__LdIndexed__Group__0)
		{ after(grammarAccess.getLdIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLdBasedIndexed
entryRuleLdBasedIndexed
:
{ before(grammarAccess.getLdBasedIndexedRule()); }
	 ruleLdBasedIndexed
{ after(grammarAccess.getLdBasedIndexedRule()); } 
	 EOF 
;

// Rule LdBasedIndexed
ruleLdBasedIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLdBasedIndexedAccess().getGroup()); }
		(rule__LdBasedIndexed__Group__0)
		{ after(grammarAccess.getLdBasedIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStDirect
entryRuleStDirect
:
{ before(grammarAccess.getStDirectRule()); }
	 ruleStDirect
{ after(grammarAccess.getStDirectRule()); } 
	 EOF 
;

// Rule StDirect
ruleStDirect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStDirectAccess().getGroup()); }
		(rule__StDirect__Group__0)
		{ after(grammarAccess.getStDirectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStIndexed
entryRuleStIndexed
:
{ before(grammarAccess.getStIndexedRule()); }
	 ruleStIndexed
{ after(grammarAccess.getStIndexedRule()); } 
	 EOF 
;

// Rule StIndexed
ruleStIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStIndexedAccess().getGroup()); }
		(rule__StIndexed__Group__0)
		{ after(grammarAccess.getStIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStBasedIndexed
entryRuleStBasedIndexed
:
{ before(grammarAccess.getStBasedIndexedRule()); }
	 ruleStBasedIndexed
{ after(grammarAccess.getStBasedIndexedRule()); } 
	 EOF 
;

// Rule StBasedIndexed
ruleStBasedIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStBasedIndexedAccess().getGroup()); }
		(rule__StBasedIndexed__Group__0)
		{ after(grammarAccess.getStBasedIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdd
entryRuleAdd
:
{ before(grammarAccess.getAddRule()); }
	 ruleAdd
{ after(grammarAccess.getAddRule()); } 
	 EOF 
;

// Rule Add
ruleAdd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddAccess().getAlternatives()); }
		(rule__Add__Alternatives)
		{ after(grammarAccess.getAddAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSub
entryRuleSub
:
{ before(grammarAccess.getSubRule()); }
	 ruleSub
{ after(grammarAccess.getSubRule()); } 
	 EOF 
;

// Rule Sub
ruleSub 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubAccess().getAlternatives()); }
		(rule__Sub__Alternatives)
		{ after(grammarAccess.getSubAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnl
entryRuleAnl
:
{ before(grammarAccess.getAnlRule()); }
	 ruleAnl
{ after(grammarAccess.getAnlRule()); } 
	 EOF 
;

// Rule Anl
ruleAnl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnlAccess().getGroup()); }
		(rule__Anl__Group__0)
		{ after(grammarAccess.getAnlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrl
entryRuleOrl
:
{ before(grammarAccess.getOrlRule()); }
	 ruleOrl
{ after(grammarAccess.getOrlRule()); } 
	 EOF 
;

// Rule Orl
ruleOrl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrlAccess().getAlternatives()); }
		(rule__Orl__Alternatives)
		{ after(grammarAccess.getOrlAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXrl
entryRuleXrl
:
{ before(grammarAccess.getXrlRule()); }
	 ruleXrl
{ after(grammarAccess.getXrlRule()); } 
	 EOF 
;

// Rule Xrl
ruleXrl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXrlAccess().getGroup()); }
		(rule__Xrl__Group__0)
		{ after(grammarAccess.getXrlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShl
entryRuleShl
:
{ before(grammarAccess.getShlRule()); }
	 ruleShl
{ after(grammarAccess.getShlRule()); } 
	 EOF 
;

// Rule Shl
ruleShl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShlAccess().getGroup()); }
		(rule__Shl__Group__0)
		{ after(grammarAccess.getShlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShr
entryRuleShr
:
{ before(grammarAccess.getShrRule()); }
	 ruleShr
{ after(grammarAccess.getShrRule()); } 
	 EOF 
;

// Rule Shr
ruleShr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShrAccess().getGroup()); }
		(rule__Shr__Group__0)
		{ after(grammarAccess.getShrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRr
entryRuleRr
:
{ before(grammarAccess.getRrRule()); }
	 ruleRr
{ after(grammarAccess.getRrRule()); } 
	 EOF 
;

// Rule Rr
ruleRr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRrAccess().getGroup()); }
		(rule__Rr__Group__0)
		{ after(grammarAccess.getRrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRc
entryRuleRc
:
{ before(grammarAccess.getRcRule()); }
	 ruleRc
{ after(grammarAccess.getRcRule()); } 
	 EOF 
;

// Rule Rc
ruleRc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRcAccess().getGroup()); }
		(rule__Rc__Group__0)
		{ after(grammarAccess.getRcAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJumpOp
entryRuleJumpOp
:
{ before(grammarAccess.getJumpOpRule()); }
	 ruleJumpOp
{ after(grammarAccess.getJumpOpRule()); } 
	 EOF 
;

// Rule JumpOp
ruleJumpOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJumpOpAccess().getGroup()); }
		(rule__JumpOp__Group__0)
		{ after(grammarAccess.getJumpOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNop
entryRuleNop
:
{ before(grammarAccess.getNopRule()); }
	 ruleNop
{ after(grammarAccess.getNopRule()); } 
	 EOF 
;

// Rule Nop
ruleNop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNopAccess().getInstructionAssignment()); }
		(rule__Nop__InstructionAssignment)
		{ after(grammarAccess.getNopAccess().getInstructionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRet
entryRuleRet
:
{ before(grammarAccess.getRetRule()); }
	 ruleRet
{ after(grammarAccess.getRetRule()); } 
	 EOF 
;

// Rule Ret
ruleRet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRetAccess().getInstructionAssignment()); }
		(rule__Ret__InstructionAssignment)
		{ after(grammarAccess.getRetAccess().getInstructionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImmediate
entryRuleImmediate
:
{ before(grammarAccess.getImmediateRule()); }
	 ruleImmediate
{ after(grammarAccess.getImmediateRule()); } 
	 EOF 
;

// Rule Immediate
ruleImmediate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImmediateAccess().getGroup()); }
		(rule__Immediate__Group__0)
		{ after(grammarAccess.getImmediateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirect
entryRuleDirect
:
{ before(grammarAccess.getDirectRule()); }
	 ruleDirect
{ after(grammarAccess.getDirectRule()); } 
	 EOF 
;

// Rule Direct
ruleDirect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectAccess().getGroup()); }
		(rule__Direct__Group__0)
		{ after(grammarAccess.getDirectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexed
entryRuleIndexed
:
{ before(grammarAccess.getIndexedRule()); }
	 ruleIndexed
{ after(grammarAccess.getIndexedRule()); } 
	 EOF 
;

// Rule Indexed
ruleIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexedAccess().getGroup()); }
		(rule__Indexed__Group__0)
		{ after(grammarAccess.getIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasedIndexed
entryRuleBasedIndexed
:
{ before(grammarAccess.getBasedIndexedRule()); }
	 ruleBasedIndexed
{ after(grammarAccess.getBasedIndexedRule()); } 
	 EOF 
;

// Rule BasedIndexed
ruleBasedIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasedIndexedAccess().getGroup()); }
		(rule__BasedIndexed__Group__0)
		{ after(grammarAccess.getBasedIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectOrLabel
entryRuleDirectOrLabel
:
{ before(grammarAccess.getDirectOrLabelRule()); }
	 ruleDirectOrLabel
{ after(grammarAccess.getDirectOrLabelRule()); } 
	 EOF 
;

// Rule DirectOrLabel
ruleDirectOrLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectOrLabelAccess().getAlternatives()); }
		(rule__DirectOrLabel__Alternatives)
		{ after(grammarAccess.getDirectOrLabelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImmediate8OrLabel
entryRuleImmediate8OrLabel
:
{ before(grammarAccess.getImmediate8OrLabelRule()); }
	 ruleImmediate8OrLabel
{ after(grammarAccess.getImmediate8OrLabelRule()); } 
	 EOF 
;

// Rule Immediate8OrLabel
ruleImmediate8OrLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImmediate8OrLabelAccess().getGroup()); }
		(rule__Immediate8OrLabel__Group__0)
		{ after(grammarAccess.getImmediate8OrLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdx3OrLabel
entryRuleIdx3OrLabel
:
{ before(grammarAccess.getIdx3OrLabelRule()); }
	 ruleIdx3OrLabel
{ after(grammarAccess.getIdx3OrLabelRule()); } 
	 EOF 
;

// Rule Idx3OrLabel
ruleIdx3OrLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdx3OrLabelAccess().getGroup()); }
		(rule__Idx3OrLabel__Group__0)
		{ after(grammarAccess.getIdx3OrLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst4OrLabel
entryRuleConst4OrLabel
:
{ before(grammarAccess.getConst4OrLabelRule()); }
	 ruleConst4OrLabel
{ after(grammarAccess.getConst4OrLabelRule()); } 
	 EOF 
;

// Rule Const4OrLabel
ruleConst4OrLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConst4OrLabelAccess().getGroup()); }
		(rule__Const4OrLabel__Group__0)
		{ after(grammarAccess.getConst4OrLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOffset8OrLabel
entryRuleOffset8OrLabel
:
{ before(grammarAccess.getOffset8OrLabelRule()); }
	 ruleOffset8OrLabel
{ after(grammarAccess.getOffset8OrLabelRule()); } 
	 EOF 
;

// Rule Offset8OrLabel
ruleOffset8OrLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOffset8OrLabelAccess().getGroup()); }
		(rule__Offset8OrLabel__Group__0)
		{ after(grammarAccess.getOffset8OrLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationWithTwoRegisters
entryRuleOperationWithTwoRegisters
:
{ before(grammarAccess.getOperationWithTwoRegistersRule()); }
	 ruleOperationWithTwoRegisters
{ after(grammarAccess.getOperationWithTwoRegistersRule()); } 
	 EOF 
;

// Rule OperationWithTwoRegisters
ruleOperationWithTwoRegisters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationWithTwoRegistersAccess().getGroup()); }
		(rule__OperationWithTwoRegisters__Group__0)
		{ after(grammarAccess.getOperationWithTwoRegistersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationsWithThreeRegisters
entryRuleOperationsWithThreeRegisters
:
{ before(grammarAccess.getOperationsWithThreeRegistersRule()); }
	 ruleOperationsWithThreeRegisters
{ after(grammarAccess.getOperationsWithThreeRegistersRule()); } 
	 EOF 
;

// Rule OperationsWithThreeRegisters
ruleOperationsWithThreeRegisters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getGroup()); }
		(rule__OperationsWithThreeRegisters__Group__0)
		{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationsWithConstant
entryRuleOperationsWithConstant
:
{ before(grammarAccess.getOperationsWithConstantRule()); }
	 ruleOperationsWithConstant
{ after(grammarAccess.getOperationsWithConstantRule()); } 
	 EOF 
;

// Rule OperationsWithConstant
ruleOperationsWithConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationsWithConstantAccess().getGroup()); }
		(rule__OperationsWithConstant__Group__0)
		{ after(grammarAccess.getOperationsWithConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationShift
entryRuleOperationShift
:
{ before(grammarAccess.getOperationShiftRule()); }
	 ruleOperationShift
{ after(grammarAccess.getOperationShiftRule()); } 
	 EOF 
;

// Rule OperationShift
ruleOperationShift 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationShiftAccess().getGroup()); }
		(rule__OperationShift__Group__0)
		{ after(grammarAccess.getOperationShiftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationWithOffset
entryRuleOperationWithOffset
:
{ before(grammarAccess.getOperationWithOffsetRule()); }
	 ruleOperationWithOffset
{ after(grammarAccess.getOperationWithOffsetRule()); } 
	 EOF 
;

// Rule OperationWithOffset
ruleOperationWithOffset 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationWithOffsetAccess().getGroup()); }
		(rule__OperationWithOffset__Group__0)
		{ after(grammarAccess.getOperationWithOffsetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
			(rule__Expression__Alternatives)
			{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
			(rule__Expression__Alternatives)*
			{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLowOrHight
entryRuleLowOrHight
:
{ before(grammarAccess.getLowOrHightRule()); }
	 ruleLowOrHight
{ after(grammarAccess.getLowOrHightRule()); } 
	 EOF 
;

// Rule LowOrHight
ruleLowOrHight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLowOrHightAccess().getGroup()); }
		(rule__LowOrHight__Group__0)
		{ after(grammarAccess.getLowOrHightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegister
entryRuleRegister
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegisterAccess().getValueAssignment()); }
		(rule__Register__ValueAssignment)
		{ after(grammarAccess.getRegisterAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
		(rule__Number__ValueAssignment)
		{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getInstructionsParserRuleCall_0()); }
		ruleInstructions
		{ after(grammarAccess.getStatementAccess().getInstructionsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLabelParserRuleCall_1()); }
		ruleLabel
		{ after(grammarAccess.getStatementAccess().getLabelParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDirectiveParserRuleCall_2()); }
		ruleDirective
		{ after(grammarAccess.getStatementAccess().getDirectiveParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getValueLabelParserRuleCall_1_0_0()); }
		ruleLabel
		{ after(grammarAccess.getLabelAccess().getValueLabelParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLabelAccess().getValueLabelDirectiveParserRuleCall_1_0_1()); }
		ruleLabelDirective
		{ after(grammarAccess.getLabelAccess().getValueLabelDirectiveParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLabelAccess().getValueInstructionsParserRuleCall_1_0_2()); }
		ruleInstructions
		{ after(grammarAccess.getLabelAccess().getValueInstructionsParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getValueBssParserRuleCall_0_0()); }
		ruleBss
		{ after(grammarAccess.getDirectiveAccess().getValueBssParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueDataParserRuleCall_0_1()); }
		ruleData
		{ after(grammarAccess.getDirectiveAccess().getValueDataParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueEndParserRuleCall_0_2()); }
		ruleEnd
		{ after(grammarAccess.getDirectiveAccess().getValueEndParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueTextParserRuleCall_0_3()); }
		ruleText
		{ after(grammarAccess.getDirectiveAccess().getValueTextParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueEquParserRuleCall_0_4()); }
		ruleEqu
		{ after(grammarAccess.getDirectiveAccess().getValueEquParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueOrgParserRuleCall_0_5()); }
		ruleOrg
		{ after(grammarAccess.getDirectiveAccess().getValueOrgParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueSectionParserRuleCall_0_6()); }
		ruleSection
		{ after(grammarAccess.getDirectiveAccess().getValueSectionParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueSetParserRuleCall_0_7()); }
		ruleSet
		{ after(grammarAccess.getDirectiveAccess().getValueSetParserRuleCall_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getValueLabelDirectiveParserRuleCall_0_8()); }
		ruleLabelDirective
		{ after(grammarAccess.getDirectiveAccess().getValueLabelDirectiveParserRuleCall_0_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LabelDirective__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelDirectiveAccess().getAsciiParserRuleCall_0()); }
		ruleAscii
		{ after(grammarAccess.getLabelDirectiveAccess().getAsciiParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLabelDirectiveAccess().getAsciizParserRuleCall_1()); }
		ruleAsciiz
		{ after(grammarAccess.getLabelDirectiveAccess().getAsciizParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLabelDirectiveAccess().getByteParserRuleCall_2()); }
		ruleByte
		{ after(grammarAccess.getLabelDirectiveAccess().getByteParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLabelDirectiveAccess().getWordParserRuleCall_3()); }
		ruleWord
		{ after(grammarAccess.getLabelDirectiveAccess().getWordParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLabelDirectiveAccess().getSpaceParserRuleCall_4()); }
		ruleSpace
		{ after(grammarAccess.getLabelDirectiveAccess().getSpaceParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getNumbersAssignment_1_0_0()); }
		(rule__Byte__NumbersAssignment_1_0_0)
		{ after(grammarAccess.getByteAccess().getNumbersAssignment_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getByteAccess().getSAssignment_1_0_1()); }
		(rule__Byte__SAssignment_1_0_1)
		{ after(grammarAccess.getByteAccess().getSAssignment_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getNumbersAssignment_1_1_1_0()); }
		(rule__Byte__NumbersAssignment_1_1_1_0)
		{ after(grammarAccess.getByteAccess().getNumbersAssignment_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getByteAccess().getSAssignment_1_1_1_1()); }
		(rule__Byte__SAssignment_1_1_1_1)
		{ after(grammarAccess.getByteAccess().getSAssignment_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValuesAssignment_1_0_0()); }
		(rule__Word__ValuesAssignment_1_0_0)
		{ after(grammarAccess.getWordAccess().getValuesAssignment_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getWordAccess().getNumbersAssignment_1_0_1()); }
		(rule__Word__NumbersAssignment_1_0_1)
		{ after(grammarAccess.getWordAccess().getNumbersAssignment_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValuesAssignment_1_1_1_0()); }
		(rule__Word__ValuesAssignment_1_1_1_0)
		{ after(grammarAccess.getWordAccess().getValuesAssignment_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getWordAccess().getNumbersAssignment_1_1_1_1()); }
		(rule__Word__NumbersAssignment_1_1_1_1)
		{ after(grammarAccess.getWordAccess().getNumbersAssignment_1_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instructions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionsAccess().getLoadParserRuleCall_0()); }
		ruleLoad
		{ after(grammarAccess.getInstructionsAccess().getLoadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionsAccess().getStoreParserRuleCall_1()); }
		ruleStore
		{ after(grammarAccess.getInstructionsAccess().getStoreParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionsAccess().getAritmeticaParserRuleCall_2()); }
		ruleAritmetica
		{ after(grammarAccess.getInstructionsAccess().getAritmeticaParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionsAccess().getLogicaParserRuleCall_3()); }
		ruleLogica
		{ after(grammarAccess.getInstructionsAccess().getLogicaParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionsAccess().getJumpParserRuleCall_4()); }
		ruleJump
		{ after(grammarAccess.getInstructionsAccess().getJumpParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionsAccess().getNopParserRuleCall_5()); }
		ruleNop
		{ after(grammarAccess.getInstructionsAccess().getNopParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionsAccess().getRetParserRuleCall_6()); }
		ruleRet
		{ after(grammarAccess.getInstructionsAccess().getRetParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getLdImmediateParserRuleCall_0()); }
		ruleLdImmediate
		{ after(grammarAccess.getLoadAccess().getLdImmediateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLoadAccess().getLdDirectParserRuleCall_1()); }
		ruleLdDirect
		{ after(grammarAccess.getLoadAccess().getLdDirectParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLoadAccess().getLdIndexedParserRuleCall_2()); }
		ruleLdIndexed
		{ after(grammarAccess.getLoadAccess().getLdIndexedParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLoadAccess().getLdBasedIndexedParserRuleCall_3()); }
		ruleLdBasedIndexed
		{ after(grammarAccess.getLoadAccess().getLdBasedIndexedParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getStDirectParserRuleCall_0()); }
		ruleStDirect
		{ after(grammarAccess.getStoreAccess().getStDirectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStoreAccess().getStIndexedParserRuleCall_1()); }
		ruleStIndexed
		{ after(grammarAccess.getStoreAccess().getStIndexedParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStoreAccess().getStBasedIndexedParserRuleCall_2()); }
		ruleStBasedIndexed
		{ after(grammarAccess.getStoreAccess().getStBasedIndexedParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aritmetica__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAritmeticaAccess().getAddParserRuleCall_0()); }
		ruleAdd
		{ after(grammarAccess.getAritmeticaAccess().getAddParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAritmeticaAccess().getSubParserRuleCall_1()); }
		ruleSub
		{ after(grammarAccess.getAritmeticaAccess().getSubParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logica__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicaAccess().getAnlParserRuleCall_0()); }
		ruleAnl
		{ after(grammarAccess.getLogicaAccess().getAnlParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getOrlParserRuleCall_1()); }
		ruleOrl
		{ after(grammarAccess.getLogicaAccess().getOrlParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getXrlParserRuleCall_2()); }
		ruleXrl
		{ after(grammarAccess.getLogicaAccess().getXrlParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getNotParserRuleCall_3()); }
		ruleNot
		{ after(grammarAccess.getLogicaAccess().getNotParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getShlParserRuleCall_4()); }
		ruleShl
		{ after(grammarAccess.getLogicaAccess().getShlParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getShrParserRuleCall_5()); }
		ruleShr
		{ after(grammarAccess.getLogicaAccess().getShrParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getRrParserRuleCall_6()); }
		ruleRr
		{ after(grammarAccess.getLogicaAccess().getRrParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getLogicaAccess().getRcParserRuleCall_7()); }
		ruleRc
		{ after(grammarAccess.getLogicaAccess().getRcParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdImmediate__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLdImmediateAccess().getLdiKeyword_0_0()); }
		Ldi
		{ after(grammarAccess.getLdImmediateAccess().getLdiKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLdImmediateAccess().getLdihKeyword_0_1()); }
		Ldih
		{ after(grammarAccess.getLdImmediateAccess().getLdihKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdDirect__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLdDirectAccess().getLdKeyword_0_0()); }
		Ld
		{ after(grammarAccess.getLdDirectAccess().getLdKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLdDirectAccess().getLdbKeyword_0_1()); }
		Ldb
		{ after(grammarAccess.getLdDirectAccess().getLdbKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdIndexed__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLdIndexedAccess().getLdKeyword_0_0()); }
		Ld
		{ after(grammarAccess.getLdIndexedAccess().getLdKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLdIndexedAccess().getLdbKeyword_0_1()); }
		Ldb
		{ after(grammarAccess.getLdIndexedAccess().getLdbKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdBasedIndexed__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLdBasedIndexedAccess().getLdKeyword_0_0()); }
		Ld
		{ after(grammarAccess.getLdBasedIndexedAccess().getLdKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLdBasedIndexedAccess().getLdbKeyword_0_1()); }
		Ldb
		{ after(grammarAccess.getLdBasedIndexedAccess().getLdbKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StDirect__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStDirectAccess().getStKeyword_0_0()); }
		St
		{ after(grammarAccess.getStDirectAccess().getStKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStDirectAccess().getStbKeyword_0_1()); }
		Stb
		{ after(grammarAccess.getStDirectAccess().getStbKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StIndexed__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStIndexedAccess().getStKeyword_0_0()); }
		St
		{ after(grammarAccess.getStIndexedAccess().getStKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStIndexedAccess().getStbKeyword_0_1()); }
		Stb
		{ after(grammarAccess.getStIndexedAccess().getStbKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StBasedIndexed__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStBasedIndexedAccess().getStKeyword_0_0()); }
		St
		{ after(grammarAccess.getStBasedIndexedAccess().getStKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStBasedIndexedAccess().getStbKeyword_0_1()); }
		Stb
		{ after(grammarAccess.getStBasedIndexedAccess().getStbKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getGroup_0()); }
		(rule__Add__Group_0__0)
		{ after(grammarAccess.getAddAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddAccess().getGroup_1()); }
		(rule__Add__Group_1__0)
		{ after(grammarAccess.getAddAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getAddKeyword_0_0_0()); }
		Add
		{ after(grammarAccess.getAddAccess().getAddKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddAccess().getAddfKeyword_0_0_1()); }
		Addf
		{ after(grammarAccess.getAddAccess().getAddfKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAddAccess().getAdcKeyword_0_0_2()); }
		Adc
		{ after(grammarAccess.getAddAccess().getAdcKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getAddAccess().getAdcfKeyword_0_0_3()); }
		Adcf
		{ after(grammarAccess.getAddAccess().getAdcfKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getOperationsWithConstantParserRuleCall_0_1_0()); }
		ruleOperationsWithConstant
		{ after(grammarAccess.getAddAccess().getOperationsWithConstantParserRuleCall_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddAccess().getOperationsWithThreeRegistersParserRuleCall_0_1_1()); }
		ruleOperationsWithThreeRegisters
		{ after(grammarAccess.getAddAccess().getOperationsWithThreeRegistersParserRuleCall_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getIncKeyword_1_0_0()); }
		Inc
		{ after(grammarAccess.getAddAccess().getIncKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddAccess().getIncfKeyword_1_0_1()); }
		Incf
		{ after(grammarAccess.getAddAccess().getIncfKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAccess().getGroup_0()); }
		(rule__Sub__Group_0__0)
		{ after(grammarAccess.getSubAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getGroup_1()); }
		(rule__Sub__Group_1__0)
		{ after(grammarAccess.getSubAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getGroup_2()); }
		(rule__Sub__Group_2__0)
		{ after(grammarAccess.getSubAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAccess().getSubKeyword_0_0_0()); }
		Sub
		{ after(grammarAccess.getSubAccess().getSubKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getSubfKeyword_0_0_1()); }
		Subf
		{ after(grammarAccess.getSubAccess().getSubfKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getSbbKeyword_0_0_2()); }
		Sbb
		{ after(grammarAccess.getSubAccess().getSbbKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getSbbfKeyword_0_0_3()); }
		Sbbf
		{ after(grammarAccess.getSubAccess().getSbbfKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAccess().getOperationsWithConstantParserRuleCall_0_1_0()); }
		ruleOperationsWithConstant
		{ after(grammarAccess.getSubAccess().getOperationsWithConstantParserRuleCall_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getOperationsWithThreeRegistersParserRuleCall_0_1_1()); }
		ruleOperationsWithThreeRegisters
		{ after(grammarAccess.getSubAccess().getOperationsWithThreeRegistersParserRuleCall_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAccess().getDecKeyword_2_0_0()); }
		Dec
		{ after(grammarAccess.getSubAccess().getDecKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubAccess().getDecfKeyword_2_0_1()); }
		Decf
		{ after(grammarAccess.getSubAccess().getDecfKeyword_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anl__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnlAccess().getAnlKeyword_0_0()); }
		Anl
		{ after(grammarAccess.getAnlAccess().getAnlKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnlAccess().getAnlfKeyword_0_1()); }
		Anlf
		{ after(grammarAccess.getAnlAccess().getAnlfKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrlAccess().getGroup_0()); }
		(rule__Orl__Group_0__0)
		{ after(grammarAccess.getOrlAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrlAccess().getGroup_1()); }
		(rule__Orl__Group_1__0)
		{ after(grammarAccess.getOrlAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrlAccess().getOrlKeyword_0_0_0()); }
		Orl
		{ after(grammarAccess.getOrlAccess().getOrlKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrlAccess().getOrlfKeyword_0_0_1()); }
		Orlf
		{ after(grammarAccess.getOrlAccess().getOrlfKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrlAccess().getMovKeyword_1_0_0()); }
		Mov
		{ after(grammarAccess.getOrlAccess().getMovKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrlAccess().getMovfKeyword_1_0_1()); }
		Movf
		{ after(grammarAccess.getOrlAccess().getMovfKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xrl__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXrlAccess().getXrlKeyword_0_0()); }
		Xrl
		{ after(grammarAccess.getXrlAccess().getXrlKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getXrlAccess().getXrlfKeyword_0_1()); }
		Xrlf
		{ after(grammarAccess.getXrlAccess().getXrlfKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getNotKeyword_0_0()); }
		Not
		{ after(grammarAccess.getNotAccess().getNotKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getNotfKeyword_0_1()); }
		Notf
		{ after(grammarAccess.getNotAccess().getNotfKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rr__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRrAccess().getRrlKeyword_0_0()); }
		Rrl
		{ after(grammarAccess.getRrAccess().getRrlKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRrAccess().getRrmKeyword_0_1()); }
		Rrm
		{ after(grammarAccess.getRrAccess().getRrmKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rc__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRcAccess().getRcrKeyword_0_0()); }
		Rcr
		{ after(grammarAccess.getRcAccess().getRcrKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRcAccess().getRclKeyword_0_1()); }
		Rcl
		{ after(grammarAccess.getRcAccess().getRclKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__TagAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJzKeyword_0_0_0()); }
		Jz
		{ after(grammarAccess.getJumpOpAccess().getTagJzKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJeKeyword_0_0_1()); }
		Je
		{ after(grammarAccess.getJumpOpAccess().getTagJeKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJnzKeyword_0_0_2()); }
		Jnz
		{ after(grammarAccess.getJumpOpAccess().getTagJnzKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJneKeyword_0_0_3()); }
		Jne
		{ after(grammarAccess.getJumpOpAccess().getTagJneKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJcKeyword_0_0_4()); }
		Jc
		{ after(grammarAccess.getJumpOpAccess().getTagJcKeyword_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJblKeyword_0_0_5()); }
		Jbl
		{ after(grammarAccess.getJumpOpAccess().getTagJblKeyword_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJncKeyword_0_0_6()); }
		Jnc
		{ after(grammarAccess.getJumpOpAccess().getTagJncKeyword_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJaeKeyword_0_0_7()); }
		Jae
		{ after(grammarAccess.getJumpOpAccess().getTagJaeKeyword_0_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJmpKeyword_0_0_8()); }
		Jmp
		{ after(grammarAccess.getJumpOpAccess().getTagJmpKeyword_0_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getTagJmplKeyword_0_0_9()); }
		Jmpl
		{ after(grammarAccess.getJumpOpAccess().getTagJmplKeyword_0_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJumpOpAccess().getOpOffAssignment_1_0()); }
		(rule__JumpOp__OpOffAssignment_1_0)
		{ after(grammarAccess.getJumpOpAccess().getOpOffAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getOpIdAssignment_1_1()); }
		(rule__JumpOp__OpIdAssignment_1_1)
		{ after(grammarAccess.getJumpOpAccess().getOpIdAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getJumpOpAccess().getDollarSignKeyword_1_2()); }
		DollarSign
		{ after(grammarAccess.getJumpOpAccess().getDollarSignKeyword_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ret__InstructionAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRetAccess().getInstructionRetKeyword_0_0()); }
		Ret
		{ after(grammarAccess.getRetAccess().getInstructionRetKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRetAccess().getInstructionIretKeyword_0_1()); }
		Iret
		{ after(grammarAccess.getRetAccess().getInstructionIretKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getImmediate8Assignment_2_0()); }
		(rule__Immediate__Immediate8Assignment_2_0)
		{ after(grammarAccess.getImmediateAccess().getImmediate8Assignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getImmediateAccess().getLowORhighAssignment_2_1()); }
		(rule__Immediate__LowORhighAssignment_2_1)
		{ after(grammarAccess.getImmediateAccess().getLowORhighAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectOrLabel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectOrLabelAccess().getNumberAssignment_0()); }
		(rule__DirectOrLabel__NumberAssignment_0)
		{ after(grammarAccess.getDirectOrLabelAccess().getNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectOrLabelAccess().getLabelAssignment_1()); }
		(rule__DirectOrLabel__LabelAssignment_1)
		{ after(grammarAccess.getDirectOrLabelAccess().getLabelAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate8OrLabel__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediate8OrLabelAccess().getNumberAssignment_1_0()); }
		(rule__Immediate8OrLabel__NumberAssignment_1_0)
		{ after(grammarAccess.getImmediate8OrLabelAccess().getNumberAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getImmediate8OrLabelAccess().getLabelAssignment_1_1()); }
		(rule__Immediate8OrLabel__LabelAssignment_1_1)
		{ after(grammarAccess.getImmediate8OrLabelAccess().getLabelAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Idx3OrLabel__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdx3OrLabelAccess().getNumberAssignment_1_0()); }
		(rule__Idx3OrLabel__NumberAssignment_1_0)
		{ after(grammarAccess.getIdx3OrLabelAccess().getNumberAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdx3OrLabelAccess().getLabelAssignment_1_1()); }
		(rule__Idx3OrLabel__LabelAssignment_1_1)
		{ after(grammarAccess.getIdx3OrLabelAccess().getLabelAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const4OrLabel__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConst4OrLabelAccess().getNumberAssignment_1_0()); }
		(rule__Const4OrLabel__NumberAssignment_1_0)
		{ after(grammarAccess.getConst4OrLabelAccess().getNumberAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConst4OrLabelAccess().getLabelAssignment_1_1()); }
		(rule__Const4OrLabel__LabelAssignment_1_1)
		{ after(grammarAccess.getConst4OrLabelAccess().getLabelAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Offset8OrLabel__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOffset8OrLabelAccess().getNumberAssignment_1_0()); }
		(rule__Offset8OrLabel__NumberAssignment_1_0)
		{ after(grammarAccess.getOffset8OrLabelAccess().getNumberAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getOffset8OrLabelAccess().getLabelAssignment_1_1()); }
		(rule__Offset8OrLabel__LabelAssignment_1_1)
		{ after(grammarAccess.getOffset8OrLabelAccess().getLabelAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueAssignment_0()); }
		(rule__Expression__NumericValueAssignment_0)
		{ after(grammarAccess.getExpressionAccess().getNumericValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIdValueAssignment_1()); }
		(rule__Expression__IdValueAssignment_1)
		{ after(grammarAccess.getExpressionAccess().getIdValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__NumericValueAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueINTTerminalRuleCall_0_0_0()); }
		RULE_INT
		{ after(grammarAccess.getExpressionAccess().getNumericValueINTTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueHEXTerminalRuleCall_0_0_1()); }
		RULE_HEX
		{ after(grammarAccess.getExpressionAccess().getNumericValueHEXTerminalRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueOCTTerminalRuleCall_0_0_2()); }
		RULE_OCT
		{ after(grammarAccess.getExpressionAccess().getNumericValueOCTTerminalRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueBINTerminalRuleCall_0_0_3()); }
		RULE_BIN
		{ after(grammarAccess.getExpressionAccess().getNumericValueBINTerminalRuleCall_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueCHARTerminalRuleCall_0_0_4()); }
		RULE_CHAR
		{ after(grammarAccess.getExpressionAccess().getNumericValueCHARTerminalRuleCall_0_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLowOrHightAccess().getLowKeyword_1_0()); }
		Low
		{ after(grammarAccess.getLowOrHightAccess().getLowKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getLowOrHightAccess().getHighKeyword_1_1()); }
		High
		{ after(grammarAccess.getLowOrHightAccess().getHighKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getValueR0Keyword_0_0()); }
		R0
		{ after(grammarAccess.getRegisterAccess().getValueR0Keyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR1Keyword_0_1()); }
		R1
		{ after(grammarAccess.getRegisterAccess().getValueR1Keyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR2Keyword_0_2()); }
		R2
		{ after(grammarAccess.getRegisterAccess().getValueR2Keyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR3Keyword_0_3()); }
		R3
		{ after(grammarAccess.getRegisterAccess().getValueR3Keyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR4Keyword_0_4()); }
		R4
		{ after(grammarAccess.getRegisterAccess().getValueR4Keyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR5Keyword_0_5()); }
		R5
		{ after(grammarAccess.getRegisterAccess().getValueR5Keyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR6Keyword_0_6()); }
		R6
		{ after(grammarAccess.getRegisterAccess().getValueR6Keyword_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueR7Keyword_0_7()); }
		R7
		{ after(grammarAccess.getRegisterAccess().getValueR7Keyword_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValueLRKeyword_0_8()); }
		LR
		{ after(grammarAccess.getRegisterAccess().getValueLRKeyword_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValuePSWKeyword_0_9()); }
		PSW
		{ after(grammarAccess.getRegisterAccess().getValuePSWKeyword_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getValuePCKeyword_0_10()); }
		PC
		{ after(grammarAccess.getRegisterAccess().getValuePCKeyword_0_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getValueHEXTerminalRuleCall_0_1()); }
		RULE_HEX
		{ after(grammarAccess.getNumberAccess().getValueHEXTerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getValueOCTTerminalRuleCall_0_2()); }
		RULE_OCT
		{ after(grammarAccess.getNumberAccess().getValueOCTTerminalRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getValueBINTerminalRuleCall_0_3()); }
		RULE_BIN
		{ after(grammarAccess.getNumberAccess().getValueBINTerminalRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getValueCHARTerminalRuleCall_0_4()); }
		RULE_CHAR
		{ after(grammarAccess.getNumberAccess().getValueCHARTerminalRuleCall_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getLabelNameAssignment_0()); }
	(rule__Label__LabelNameAssignment_0)
	{ after(grammarAccess.getLabelAccess().getLabelNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getValueAssignment_1()); }
	(rule__Label__ValueAssignment_1)
	{ after(grammarAccess.getLabelAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ascii__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ascii__Group__0__Impl
	rule__Ascii__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciiAccess().getTagAssignment_0()); }
	(rule__Ascii__TagAssignment_0)
	{ after(grammarAccess.getAsciiAccess().getTagAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ascii__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciiAccess().getGroup_1()); }
	(rule__Ascii__Group_1__0)?
	{ after(grammarAccess.getAsciiAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ascii__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ascii__Group_1__0__Impl
	rule__Ascii__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciiAccess().getValuesAssignment_1_0()); }
	(rule__Ascii__ValuesAssignment_1_0)
	{ after(grammarAccess.getAsciiAccess().getValuesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ascii__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciiAccess().getGroup_1_1()); }
	(rule__Ascii__Group_1_1__0)*
	{ after(grammarAccess.getAsciiAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ascii__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ascii__Group_1_1__0__Impl
	rule__Ascii__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciiAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getAsciiAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ascii__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciiAccess().getValuesAssignment_1_1_1()); }
	(rule__Ascii__ValuesAssignment_1_1_1)
	{ after(grammarAccess.getAsciiAccess().getValuesAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Asciiz__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Asciiz__Group__0__Impl
	rule__Asciiz__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciizAccess().getTagAssignment_0()); }
	(rule__Asciiz__TagAssignment_0)
	{ after(grammarAccess.getAsciizAccess().getTagAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Asciiz__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciizAccess().getGroup_1()); }
	(rule__Asciiz__Group_1__0)?
	{ after(grammarAccess.getAsciizAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Asciiz__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Asciiz__Group_1__0__Impl
	rule__Asciiz__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciizAccess().getValuesAssignment_1_0()); }
	(rule__Asciiz__ValuesAssignment_1_0)
	{ after(grammarAccess.getAsciizAccess().getValuesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Asciiz__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciizAccess().getGroup_1_1()); }
	(rule__Asciiz__Group_1_1__0)*
	{ after(grammarAccess.getAsciizAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Asciiz__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Asciiz__Group_1_1__0__Impl
	rule__Asciiz__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciizAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getAsciizAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Asciiz__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsciizAccess().getValuesAssignment_1_1_1()); }
	(rule__Asciiz__ValuesAssignment_1_1_1)
	{ after(grammarAccess.getAsciizAccess().getValuesAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Byte__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Byte__Group__0__Impl
	rule__Byte__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getByteAccess().getTagAssignment_0()); }
	(rule__Byte__TagAssignment_0)
	{ after(grammarAccess.getByteAccess().getTagAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Byte__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getByteAccess().getGroup_1()); }
	(rule__Byte__Group_1__0)?
	{ after(grammarAccess.getByteAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Byte__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Byte__Group_1__0__Impl
	rule__Byte__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getByteAccess().getAlternatives_1_0()); }
	(rule__Byte__Alternatives_1_0)
	{ after(grammarAccess.getByteAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Byte__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getByteAccess().getGroup_1_1()); }
	(rule__Byte__Group_1_1__0)*
	{ after(grammarAccess.getByteAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Byte__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Byte__Group_1_1__0__Impl
	rule__Byte__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getByteAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getByteAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Byte__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getByteAccess().getAlternatives_1_1_1()); }
	(rule__Byte__Alternatives_1_1_1)
	{ after(grammarAccess.getByteAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Word__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Word__Group__0__Impl
	rule__Word__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordAccess().getTagAssignment_0()); }
	(rule__Word__TagAssignment_0)
	{ after(grammarAccess.getWordAccess().getTagAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Word__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordAccess().getGroup_1()); }
	(rule__Word__Group_1__0)?
	{ after(grammarAccess.getWordAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Word__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Word__Group_1__0__Impl
	rule__Word__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordAccess().getAlternatives_1_0()); }
	(rule__Word__Alternatives_1_0)
	{ after(grammarAccess.getWordAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Word__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordAccess().getGroup_1_1()); }
	(rule__Word__Group_1_1__0)*
	{ after(grammarAccess.getWordAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Word__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Word__Group_1_1__0__Impl
	rule__Word__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getWordAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Word__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordAccess().getAlternatives_1_1_1()); }
	(rule__Word__Alternatives_1_1_1)
	{ after(grammarAccess.getWordAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Space__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Space__Group__0__Impl
	rule__Space__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpaceAccess().getSpaceKeyword_0()); }
	Space
	{ after(grammarAccess.getSpaceAccess().getSpaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Space__Group__1__Impl
	rule__Space__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpaceAccess().getSizeAssignment_1()); }
	(rule__Space__SizeAssignment_1)
	{ after(grammarAccess.getSpaceAccess().getSizeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Space__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpaceAccess().getGroup_2()); }
	(rule__Space__Group_2__0)?
	{ after(grammarAccess.getSpaceAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Space__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Space__Group_2__0__Impl
	rule__Space__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpaceAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getSpaceAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Space__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpaceAccess().getByteValueAssignment_2_1()); }
	(rule__Space__ByteValueAssignment_2_1)
	{ after(grammarAccess.getSpaceAccess().getByteValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getSetKeyword_0()); }
	Set
	{ after(grammarAccess.getSetAccess().getSetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getValue1Assignment_1()); }
	(rule__Set__Value1Assignment_1)
	{ after(grammarAccess.getSetAccess().getValue1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__2__Impl
	rule__Set__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getCommaKeyword_2()); }
	Comma
	{ after(grammarAccess.getSetAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getValue2Assignment_3()); }
	(rule__Set__Value2Assignment_3)
	{ after(grammarAccess.getSetAccess().getValue2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Section__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__0__Impl
	rule__Section__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getSectionKeyword_0()); }
	Section
	{ after(grammarAccess.getSectionAccess().getSectionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getValueAssignment_1()); }
	(rule__Section__ValueAssignment_1)
	{ after(grammarAccess.getSectionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Org__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Org__Group__0__Impl
	rule__Org__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Org__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrgAccess().getOrgKeyword_0()); }
	Org
	{ after(grammarAccess.getOrgAccess().getOrgKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Org__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Org__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Org__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrgAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
	{ after(grammarAccess.getOrgAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equ__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equ__Group__0__Impl
	rule__Equ__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquAccess().getEquKeyword_0()); }
	Equ
	{ after(grammarAccess.getEquAccess().getEquKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equ__Group__1__Impl
	rule__Equ__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquAccess().getValue1Assignment_1()); }
	(rule__Equ__Value1Assignment_1)
	{ after(grammarAccess.getEquAccess().getValue1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equ__Group__2__Impl
	rule__Equ__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquAccess().getCommaKeyword_2()); }
	Comma
	{ after(grammarAccess.getEquAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equ__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquAccess().getValue2Assignment_3()); }
	(rule__Equ__Value2Assignment_3)
	{ after(grammarAccess.getEquAccess().getValue2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LdImmediate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdImmediate__Group__0__Impl
	rule__LdImmediate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LdImmediate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdImmediateAccess().getAlternatives_0()); }
	(rule__LdImmediate__Alternatives_0)
	{ after(grammarAccess.getLdImmediateAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdImmediate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdImmediate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LdImmediate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdImmediateAccess().getImmediateParserRuleCall_1()); }
	ruleImmediate
	{ after(grammarAccess.getLdImmediateAccess().getImmediateParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LdDirect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdDirect__Group__0__Impl
	rule__LdDirect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LdDirect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdDirectAccess().getAlternatives_0()); }
	(rule__LdDirect__Alternatives_0)
	{ after(grammarAccess.getLdDirectAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdDirect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdDirect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LdDirect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdDirectAccess().getDirectParserRuleCall_1()); }
	ruleDirect
	{ after(grammarAccess.getLdDirectAccess().getDirectParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LdIndexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdIndexed__Group__0__Impl
	rule__LdIndexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LdIndexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdIndexedAccess().getAlternatives_0()); }
	(rule__LdIndexed__Alternatives_0)
	{ after(grammarAccess.getLdIndexedAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdIndexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdIndexed__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LdIndexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdIndexedAccess().getIndexedParserRuleCall_1()); }
	ruleIndexed
	{ after(grammarAccess.getLdIndexedAccess().getIndexedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LdBasedIndexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdBasedIndexed__Group__0__Impl
	rule__LdBasedIndexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LdBasedIndexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdBasedIndexedAccess().getAlternatives_0()); }
	(rule__LdBasedIndexed__Alternatives_0)
	{ after(grammarAccess.getLdBasedIndexedAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LdBasedIndexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LdBasedIndexed__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LdBasedIndexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLdBasedIndexedAccess().getBasedIndexedParserRuleCall_1()); }
	ruleBasedIndexed
	{ after(grammarAccess.getLdBasedIndexedAccess().getBasedIndexedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StDirect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StDirect__Group__0__Impl
	rule__StDirect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StDirect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStDirectAccess().getAlternatives_0()); }
	(rule__StDirect__Alternatives_0)
	{ after(grammarAccess.getStDirectAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StDirect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StDirect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StDirect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStDirectAccess().getDirectParserRuleCall_1()); }
	ruleDirect
	{ after(grammarAccess.getStDirectAccess().getDirectParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StIndexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StIndexed__Group__0__Impl
	rule__StIndexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StIndexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStIndexedAccess().getAlternatives_0()); }
	(rule__StIndexed__Alternatives_0)
	{ after(grammarAccess.getStIndexedAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StIndexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StIndexed__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StIndexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStIndexedAccess().getIndexedParserRuleCall_1()); }
	ruleIndexed
	{ after(grammarAccess.getStIndexedAccess().getIndexedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StBasedIndexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StBasedIndexed__Group__0__Impl
	rule__StBasedIndexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StBasedIndexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStBasedIndexedAccess().getAlternatives_0()); }
	(rule__StBasedIndexed__Alternatives_0)
	{ after(grammarAccess.getStBasedIndexedAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StBasedIndexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StBasedIndexed__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StBasedIndexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStBasedIndexedAccess().getBasedIndexedParserRuleCall_1()); }
	ruleBasedIndexed
	{ after(grammarAccess.getStBasedIndexedAccess().getBasedIndexedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_0__0__Impl
	rule__Add__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getAlternatives_0_0()); }
	(rule__Add__Alternatives_0_0)
	{ after(grammarAccess.getAddAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getAlternatives_0_1()); }
	(rule__Add__Alternatives_0_1)
	{ after(grammarAccess.getAddAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_1__0__Impl
	rule__Add__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getAlternatives_1_0()); }
	(rule__Add__Alternatives_1_0)
	{ after(grammarAccess.getAddAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getRegisterParserRuleCall_1_1()); }
	ruleRegister
	{ after(grammarAccess.getAddAccess().getRegisterParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sub__Group_0__0__Impl
	rule__Sub__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAccess().getAlternatives_0_0()); }
	(rule__Sub__Alternatives_0_0)
	{ after(grammarAccess.getSubAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sub__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAccess().getAlternatives_0_1()); }
	(rule__Sub__Alternatives_0_1)
	{ after(grammarAccess.getSubAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sub__Group_1__0__Impl
	rule__Sub__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAccess().getSubrKeyword_1_0()); }
	Subr
	{ after(grammarAccess.getSubAccess().getSubrKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sub__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAccess().getOperationsWithThreeRegistersParserRuleCall_1_1()); }
	ruleOperationsWithThreeRegisters
	{ after(grammarAccess.getSubAccess().getOperationsWithThreeRegistersParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sub__Group_2__0__Impl
	rule__Sub__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAccess().getAlternatives_2_0()); }
	(rule__Sub__Alternatives_2_0)
	{ after(grammarAccess.getSubAccess().getAlternatives_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sub__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAccess().getRegisterParserRuleCall_2_1()); }
	ruleRegister
	{ after(grammarAccess.getSubAccess().getRegisterParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Anl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anl__Group__0__Impl
	rule__Anl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnlAccess().getAlternatives_0()); }
	(rule__Anl__Alternatives_0)
	{ after(grammarAccess.getAnlAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnlAccess().getOperationsWithThreeRegistersParserRuleCall_1()); }
	ruleOperationsWithThreeRegisters
	{ after(grammarAccess.getAnlAccess().getOperationsWithThreeRegistersParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Orl__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Orl__Group_0__0__Impl
	rule__Orl__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrlAccess().getAlternatives_0_0()); }
	(rule__Orl__Alternatives_0_0)
	{ after(grammarAccess.getOrlAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Orl__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrlAccess().getOperationsWithThreeRegistersParserRuleCall_0_1()); }
	ruleOperationsWithThreeRegisters
	{ after(grammarAccess.getOrlAccess().getOperationsWithThreeRegistersParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Orl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Orl__Group_1__0__Impl
	rule__Orl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrlAccess().getAlternatives_1_0()); }
	(rule__Orl__Alternatives_1_0)
	{ after(grammarAccess.getOrlAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Orl__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Orl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrlAccess().getOperationWithTwoRegistersParserRuleCall_1_1()); }
	ruleOperationWithTwoRegisters
	{ after(grammarAccess.getOrlAccess().getOperationWithTwoRegistersParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xrl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xrl__Group__0__Impl
	rule__Xrl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xrl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXrlAccess().getAlternatives_0()); }
	(rule__Xrl__Alternatives_0)
	{ after(grammarAccess.getXrlAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xrl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xrl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xrl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXrlAccess().getOperationsWithThreeRegistersParserRuleCall_1()); }
	ruleOperationsWithThreeRegisters
	{ after(grammarAccess.getXrlAccess().getOperationsWithThreeRegistersParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getAlternatives_0()); }
	(rule__Not__Alternatives_0)
	{ after(grammarAccess.getNotAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getOperationWithTwoRegistersParserRuleCall_1()); }
	ruleOperationWithTwoRegisters
	{ after(grammarAccess.getNotAccess().getOperationWithTwoRegistersParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shl__Group__0__Impl
	rule__Shl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShlAccess().getShlKeyword_0()); }
	Shl
	{ after(grammarAccess.getShlAccess().getShlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShlAccess().getOperationShiftParserRuleCall_1()); }
	ruleOperationShift
	{ after(grammarAccess.getShlAccess().getOperationShiftParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shr__Group__0__Impl
	rule__Shr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShrAccess().getShrKeyword_0()); }
	Shr
	{ after(grammarAccess.getShrAccess().getShrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShrAccess().getOperationShiftParserRuleCall_1()); }
	ruleOperationShift
	{ after(grammarAccess.getShrAccess().getOperationShiftParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rr__Group__0__Impl
	rule__Rr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRrAccess().getAlternatives_0()); }
	(rule__Rr__Alternatives_0)
	{ after(grammarAccess.getRrAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRrAccess().getOperationsWithConstantParserRuleCall_1()); }
	ruleOperationsWithConstant
	{ after(grammarAccess.getRrAccess().getOperationsWithConstantParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rc__Group__0__Impl
	rule__Rc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRcAccess().getAlternatives_0()); }
	(rule__Rc__Alternatives_0)
	{ after(grammarAccess.getRcAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rc__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRcAccess().getOperationWithTwoRegistersParserRuleCall_1()); }
	ruleOperationWithTwoRegisters
	{ after(grammarAccess.getRcAccess().getOperationWithTwoRegistersParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JumpOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JumpOp__Group__0__Impl
	rule__JumpOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJumpOpAccess().getTagAssignment_0()); }
	(rule__JumpOp__TagAssignment_0)
	{ after(grammarAccess.getJumpOpAccess().getTagAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JumpOp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJumpOpAccess().getAlternatives_1()); }
	(rule__JumpOp__Alternatives_1)
	{ after(grammarAccess.getJumpOpAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Immediate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__0__Impl
	rule__Immediate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getRegisterAssignment_0()); }
	(rule__Immediate__RegisterAssignment_0)
	{ after(grammarAccess.getImmediateAccess().getRegisterAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__1__Impl
	rule__Immediate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getImmediateAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getAlternatives_2()); }
	(rule__Immediate__Alternatives_2)
	{ after(grammarAccess.getImmediateAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Direct__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Direct__Group__0__Impl
	rule__Direct__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectAccess().getRegisterAssignment_0()); }
	(rule__Direct__RegisterAssignment_0)
	{ after(grammarAccess.getDirectAccess().getRegisterAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Direct__Group__1__Impl
	rule__Direct__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getDirectAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Direct__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectAccess().getDirect7Assignment_2()); }
	(rule__Direct__Direct7Assignment_2)
	{ after(grammarAccess.getDirectAccess().getDirect7Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Indexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__0__Impl
	rule__Indexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getRdAssignment_0()); }
	(rule__Indexed__RdAssignment_0)
	{ after(grammarAccess.getIndexedAccess().getRdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__1__Impl
	rule__Indexed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getIndexedAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__2__Impl
	rule__Indexed__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getLeftSquareBracketKeyword_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getIndexedAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__3__Impl
	rule__Indexed__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getRbxAssignment_3()); }
	(rule__Indexed__RbxAssignment_3)
	{ after(grammarAccess.getIndexedAccess().getRbxAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__4__Impl
	rule__Indexed__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getCommaKeyword_4()); }
	Comma
	{ after(grammarAccess.getIndexedAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__5__Impl
	rule__Indexed__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getIdx3Assignment_5()); }
	(rule__Indexed__Idx3Assignment_5)
	{ after(grammarAccess.getIndexedAccess().getIdx3Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getRightSquareBracketKeyword_6()); }
	RightSquareBracket
	{ after(grammarAccess.getIndexedAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasedIndexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__0__Impl
	rule__BasedIndexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getRegisterParserRuleCall_0()); }
	ruleRegister
	{ after(grammarAccess.getBasedIndexedAccess().getRegisterParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__1__Impl
	rule__BasedIndexed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getBasedIndexedAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__2__Impl
	rule__BasedIndexed__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getLeftSquareBracketKeyword_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getBasedIndexedAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__3__Impl
	rule__BasedIndexed__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getRbxAssignment_3()); }
	(rule__BasedIndexed__RbxAssignment_3)
	{ after(grammarAccess.getBasedIndexedAccess().getRbxAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__4__Impl
	rule__BasedIndexed__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getCommaKeyword_4()); }
	Comma
	{ after(grammarAccess.getBasedIndexedAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__5__Impl
	rule__BasedIndexed__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getRixAssignment_5()); }
	(rule__BasedIndexed__RixAssignment_5)
	{ after(grammarAccess.getBasedIndexedAccess().getRixAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasedIndexed__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasedIndexedAccess().getRightSquareBracketKeyword_6()); }
	RightSquareBracket
	{ after(grammarAccess.getBasedIndexedAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Immediate8OrLabel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate8OrLabel__Group__0__Impl
	rule__Immediate8OrLabel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate8OrLabel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediate8OrLabelAccess().getNumberSignKeyword_0()); }
	NumberSign
	{ after(grammarAccess.getImmediate8OrLabelAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate8OrLabel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate8OrLabel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate8OrLabel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediate8OrLabelAccess().getAlternatives_1()); }
	(rule__Immediate8OrLabel__Alternatives_1)
	{ after(grammarAccess.getImmediate8OrLabelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Idx3OrLabel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Idx3OrLabel__Group__0__Impl
	rule__Idx3OrLabel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Idx3OrLabel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdx3OrLabelAccess().getNumberSignKeyword_0()); }
	NumberSign
	{ after(grammarAccess.getIdx3OrLabelAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Idx3OrLabel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Idx3OrLabel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Idx3OrLabel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdx3OrLabelAccess().getAlternatives_1()); }
	(rule__Idx3OrLabel__Alternatives_1)
	{ after(grammarAccess.getIdx3OrLabelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Const4OrLabel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const4OrLabel__Group__0__Impl
	rule__Const4OrLabel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Const4OrLabel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConst4OrLabelAccess().getNumberSignKeyword_0()); }
	NumberSign
	{ after(grammarAccess.getConst4OrLabelAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const4OrLabel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const4OrLabel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Const4OrLabel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConst4OrLabelAccess().getAlternatives_1()); }
	(rule__Const4OrLabel__Alternatives_1)
	{ after(grammarAccess.getConst4OrLabelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Offset8OrLabel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Offset8OrLabel__Group__0__Impl
	rule__Offset8OrLabel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Offset8OrLabel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOffset8OrLabelAccess().getNumberSignKeyword_0()); }
	NumberSign
	{ after(grammarAccess.getOffset8OrLabelAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Offset8OrLabel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Offset8OrLabel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Offset8OrLabel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOffset8OrLabelAccess().getAlternatives_1()); }
	(rule__Offset8OrLabel__Alternatives_1)
	{ after(grammarAccess.getOffset8OrLabelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationWithTwoRegisters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationWithTwoRegisters__Group__0__Impl
	rule__OperationWithTwoRegisters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationWithTwoRegistersAccess().getRdAssignment_0()); }
	(rule__OperationWithTwoRegisters__RdAssignment_0)
	{ after(grammarAccess.getOperationWithTwoRegistersAccess().getRdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationWithTwoRegisters__Group__1__Impl
	rule__OperationWithTwoRegisters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationWithTwoRegistersAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getOperationWithTwoRegistersAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationWithTwoRegisters__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationWithTwoRegistersAccess().getRmAssignment_2()); }
	(rule__OperationWithTwoRegisters__RmAssignment_2)
	{ after(grammarAccess.getOperationWithTwoRegistersAccess().getRmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationsWithThreeRegisters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithThreeRegisters__Group__0__Impl
	rule__OperationsWithThreeRegisters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getRdAssignment_0()); }
	(rule__OperationsWithThreeRegisters__RdAssignment_0)
	{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getRdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithThreeRegisters__Group__1__Impl
	rule__OperationsWithThreeRegisters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithThreeRegisters__Group__2__Impl
	rule__OperationsWithThreeRegisters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getRmAssignment_2()); }
	(rule__OperationsWithThreeRegisters__RmAssignment_2)
	{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getRmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithThreeRegisters__Group__3__Impl
	rule__OperationsWithThreeRegisters__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getCommaKeyword_3()); }
	Comma
	{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithThreeRegisters__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getRnAssignment_4()); }
	(rule__OperationsWithThreeRegisters__RnAssignment_4)
	{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getRnAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationsWithConstant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithConstant__Group__0__Impl
	rule__OperationsWithConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithConstantAccess().getRdAssignment_0()); }
	(rule__OperationsWithConstant__RdAssignment_0)
	{ after(grammarAccess.getOperationsWithConstantAccess().getRdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithConstant__Group__1__Impl
	rule__OperationsWithConstant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithConstantAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getOperationsWithConstantAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithConstant__Group__2__Impl
	rule__OperationsWithConstant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithConstantAccess().getRmAssignment_2()); }
	(rule__OperationsWithConstant__RmAssignment_2)
	{ after(grammarAccess.getOperationsWithConstantAccess().getRmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithConstant__Group__3__Impl
	rule__OperationsWithConstant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithConstantAccess().getCommaKeyword_3()); }
	Comma
	{ after(grammarAccess.getOperationsWithConstantAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsWithConstant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsWithConstantAccess().getConst4Assignment_4()); }
	(rule__OperationsWithConstant__Const4Assignment_4)
	{ after(grammarAccess.getOperationsWithConstantAccess().getConst4Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationShift__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__0__Impl
	rule__OperationShift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getRdAssignment_0()); }
	(rule__OperationShift__RdAssignment_0)
	{ after(grammarAccess.getOperationShiftAccess().getRdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__1__Impl
	rule__OperationShift__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getOperationShiftAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__2__Impl
	rule__OperationShift__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getRmAssignment_2()); }
	(rule__OperationShift__RmAssignment_2)
	{ after(grammarAccess.getOperationShiftAccess().getRmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__3__Impl
	rule__OperationShift__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getCommaKeyword_3()); }
	Comma
	{ after(grammarAccess.getOperationShiftAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__4__Impl
	rule__OperationShift__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getConst4Assignment_4()); }
	(rule__OperationShift__Const4Assignment_4)
	{ after(grammarAccess.getOperationShiftAccess().getConst4Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__5__Impl
	rule__OperationShift__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getCommaKeyword_5()); }
	Comma
	{ after(grammarAccess.getOperationShiftAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationShift__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationShiftAccess().getSinAssignment_6()); }
	(rule__OperationShift__SinAssignment_6)
	{ after(grammarAccess.getOperationShiftAccess().getSinAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationWithOffset__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationWithOffset__Group__0__Impl
	rule__OperationWithOffset__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationWithOffsetAccess().getRbxAssignment_0()); }
	(rule__OperationWithOffset__RbxAssignment_0)
	{ after(grammarAccess.getOperationWithOffsetAccess().getRbxAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationWithOffset__Group__1__Impl
	rule__OperationWithOffset__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationWithOffsetAccess().getCommaKeyword_1()); }
	Comma
	{ after(grammarAccess.getOperationWithOffsetAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationWithOffset__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationWithOffsetAccess().getOffset8Assignment_2()); }
	(rule__OperationWithOffset__Offset8Assignment_2)
	{ after(grammarAccess.getOperationWithOffsetAccess().getOffset8Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LowOrHight__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowOrHight__Group__0__Impl
	rule__LowOrHight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowOrHightAccess().getNumberSignKeyword_0()); }
	NumberSign
	{ after(grammarAccess.getLowOrHightAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowOrHight__Group__1__Impl
	rule__LowOrHight__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowOrHightAccess().getAlternatives_1()); }
	(rule__LowOrHight__Alternatives_1)
	{ after(grammarAccess.getLowOrHightAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowOrHight__Group__2__Impl
	rule__LowOrHight__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowOrHightAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getLowOrHightAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowOrHight__Group__3__Impl
	rule__LowOrHight__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowOrHightAccess().getValueAssignment_3()); }
	(rule__LowOrHight__ValueAssignment_3)
	{ after(grammarAccess.getLowOrHightAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowOrHight__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowOrHightAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getLowOrHightAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PDS16ASM__InstuctionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPDS16ASMAccess().getInstuctionsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getPDS16ASMAccess().getInstuctionsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__LabelNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getLabelNameIDLABELTerminalRuleCall_0_0()); }
		RULE_IDLABEL
		{ after(grammarAccess.getLabelAccess().getLabelNameIDLABELTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getValueAlternatives_1_0()); }
		(rule__Label__ValueAlternatives_1_0)
		{ after(grammarAccess.getLabelAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getValueAlternatives_0()); }
		(rule__Directive__ValueAlternatives_0)
		{ after(grammarAccess.getDirectiveAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bss__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBssAccess().getValueBssKeyword_0()); }
		(
			{ before(grammarAccess.getBssAccess().getValueBssKeyword_0()); }
			Bss
			{ after(grammarAccess.getBssAccess().getValueBssKeyword_0()); }
		)
		{ after(grammarAccess.getBssAccess().getValueBssKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Data__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataAccess().getValueDataKeyword_0()); }
		(
			{ before(grammarAccess.getDataAccess().getValueDataKeyword_0()); }
			Data
			{ after(grammarAccess.getDataAccess().getValueDataKeyword_0()); }
		)
		{ after(grammarAccess.getDataAccess().getValueDataKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__End__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEndAccess().getValueEndKeyword_0()); }
		(
			{ before(grammarAccess.getEndAccess().getValueEndKeyword_0()); }
			End
			{ after(grammarAccess.getEndAccess().getValueEndKeyword_0()); }
		)
		{ after(grammarAccess.getEndAccess().getValueEndKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextAccess().getValueTextKeyword_0()); }
		(
			{ before(grammarAccess.getTextAccess().getValueTextKeyword_0()); }
			Text
			{ after(grammarAccess.getTextAccess().getValueTextKeyword_0()); }
		)
		{ after(grammarAccess.getTextAccess().getValueTextKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__TagAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsciiAccess().getTagAsciiKeyword_0_0()); }
		(
			{ before(grammarAccess.getAsciiAccess().getTagAsciiKeyword_0_0()); }
			Ascii
			{ after(grammarAccess.getAsciiAccess().getTagAsciiKeyword_0_0()); }
		)
		{ after(grammarAccess.getAsciiAccess().getTagAsciiKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__ValuesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsciiAccess().getValuesSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getAsciiAccess().getValuesSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ascii__ValuesAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsciiAccess().getValuesSTRINGTerminalRuleCall_1_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAsciiAccess().getValuesSTRINGTerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__TagAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsciizAccess().getTagAsciizKeyword_0_0()); }
		(
			{ before(grammarAccess.getAsciizAccess().getTagAsciizKeyword_0_0()); }
			Asciiz
			{ after(grammarAccess.getAsciizAccess().getTagAsciizKeyword_0_0()); }
		)
		{ after(grammarAccess.getAsciizAccess().getTagAsciizKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__ValuesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsciizAccess().getValuesSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getAsciizAccess().getValuesSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Asciiz__ValuesAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsciizAccess().getValuesSTRINGTerminalRuleCall_1_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAsciizAccess().getValuesSTRINGTerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__TagAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getTagByteKeyword_0_0()); }
		(
			{ before(grammarAccess.getByteAccess().getTagByteKeyword_0_0()); }
			Byte
			{ after(grammarAccess.getByteAccess().getTagByteKeyword_0_0()); }
		)
		{ after(grammarAccess.getByteAccess().getTagByteKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__NumbersAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getNumbersNumberParserRuleCall_1_0_0_0()); }
		ruleNumber
		{ after(grammarAccess.getByteAccess().getNumbersNumberParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__SAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getSSTRINGTerminalRuleCall_1_0_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getByteAccess().getSSTRINGTerminalRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__NumbersAssignment_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getNumbersNumberParserRuleCall_1_1_1_0_0()); }
		ruleNumber
		{ after(grammarAccess.getByteAccess().getNumbersNumberParserRuleCall_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Byte__SAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getByteAccess().getSSTRINGTerminalRuleCall_1_1_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getByteAccess().getSSTRINGTerminalRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__TagAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getTagWordKeyword_0_0()); }
		(
			{ before(grammarAccess.getWordAccess().getTagWordKeyword_0_0()); }
			Word
			{ after(grammarAccess.getWordAccess().getTagWordKeyword_0_0()); }
		)
		{ after(grammarAccess.getWordAccess().getTagWordKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__ValuesAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_1_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__NumbersAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getNumbersNumberParserRuleCall_1_0_1_0()); }
		ruleNumber
		{ after(grammarAccess.getWordAccess().getNumbersNumberParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__ValuesAssignment_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_1_1_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getWordAccess().getValuesIDTerminalRuleCall_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__NumbersAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getNumbersNumberParserRuleCall_1_1_1_1_0()); }
		ruleNumber
		{ after(grammarAccess.getWordAccess().getNumbersNumberParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__SizeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpaceAccess().getSizeNumberParserRuleCall_1_0()); }
		ruleNumber
		{ after(grammarAccess.getSpaceAccess().getSizeNumberParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Space__ByteValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpaceAccess().getByteValueNumberParserRuleCall_2_1_0()); }
		ruleNumber
		{ after(grammarAccess.getSpaceAccess().getByteValueNumberParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Value1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getValue1IDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSetAccess().getValue1IDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Value2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getValue2ExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSetAccess().getValue2ExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getValueIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSectionAccess().getValueIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Value1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquAccess().getValue1IDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEquAccess().getValue1IDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equ__Value2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquAccess().getValue2ExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getEquAccess().getValue2ExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__TagAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJumpOpAccess().getTagAlternatives_0_0()); }
		(rule__JumpOp__TagAlternatives_0_0)
		{ after(grammarAccess.getJumpOpAccess().getTagAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__OpOffAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJumpOpAccess().getOpOffOperationWithOffsetParserRuleCall_1_0_0()); }
		ruleOperationWithOffset
		{ after(grammarAccess.getJumpOpAccess().getOpOffOperationWithOffsetParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpOp__OpIdAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJumpOpAccess().getOpIdIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getJumpOpAccess().getOpIdIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nop__InstructionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNopAccess().getInstructionNopKeyword_0()); }
		(
			{ before(grammarAccess.getNopAccess().getInstructionNopKeyword_0()); }
			Nop
			{ after(grammarAccess.getNopAccess().getInstructionNopKeyword_0()); }
		)
		{ after(grammarAccess.getNopAccess().getInstructionNopKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ret__InstructionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRetAccess().getInstructionAlternatives_0()); }
		(rule__Ret__InstructionAlternatives_0)
		{ after(grammarAccess.getRetAccess().getInstructionAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__RegisterAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getRegisterRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getImmediateAccess().getRegisterRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Immediate8Assignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getImmediate8Immediate8OrLabelParserRuleCall_2_0_0()); }
		ruleImmediate8OrLabel
		{ after(grammarAccess.getImmediateAccess().getImmediate8Immediate8OrLabelParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__LowORhighAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getLowORhighLowOrHightParserRuleCall_2_1_0()); }
		ruleLowOrHight
		{ after(grammarAccess.getImmediateAccess().getLowORhighLowOrHightParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__RegisterAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectAccess().getRegisterRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getDirectAccess().getRegisterRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__Direct7Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectAccess().getDirect7DirectOrLabelParserRuleCall_2_0()); }
		ruleDirectOrLabel
		{ after(grammarAccess.getDirectAccess().getDirect7DirectOrLabelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__RdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedAccess().getRdRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getIndexedAccess().getRdRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__RbxAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedAccess().getRbxRegisterParserRuleCall_3_0()); }
		ruleRegister
		{ after(grammarAccess.getIndexedAccess().getRbxRegisterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Idx3Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedAccess().getIdx3Idx3OrLabelParserRuleCall_5_0()); }
		ruleIdx3OrLabel
		{ after(grammarAccess.getIndexedAccess().getIdx3Idx3OrLabelParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__RbxAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasedIndexedAccess().getRbxRegisterParserRuleCall_3_0()); }
		ruleRegister
		{ after(grammarAccess.getBasedIndexedAccess().getRbxRegisterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasedIndexed__RixAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasedIndexedAccess().getRixRegisterParserRuleCall_5_0()); }
		ruleRegister
		{ after(grammarAccess.getBasedIndexedAccess().getRixRegisterParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectOrLabel__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectOrLabelAccess().getNumberNumberParserRuleCall_0_0()); }
		ruleNumber
		{ after(grammarAccess.getDirectOrLabelAccess().getNumberNumberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectOrLabel__LabelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectOrLabelAccess().getLabelIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDirectOrLabelAccess().getLabelIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate8OrLabel__NumberAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediate8OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
		ruleNumber
		{ after(grammarAccess.getImmediate8OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate8OrLabel__LabelAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediate8OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getImmediate8OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Idx3OrLabel__NumberAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdx3OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
		ruleNumber
		{ after(grammarAccess.getIdx3OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Idx3OrLabel__LabelAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdx3OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIdx3OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const4OrLabel__NumberAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConst4OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
		ruleNumber
		{ after(grammarAccess.getConst4OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const4OrLabel__LabelAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConst4OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConst4OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Offset8OrLabel__NumberAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOffset8OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
		ruleNumber
		{ after(grammarAccess.getOffset8OrLabelAccess().getNumberNumberParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Offset8OrLabel__LabelAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOffset8OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getOffset8OrLabelAccess().getLabelIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__RdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationWithTwoRegistersAccess().getRdRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationWithTwoRegistersAccess().getRdRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithTwoRegisters__RmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationWithTwoRegistersAccess().getRmRegisterParserRuleCall_2_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationWithTwoRegistersAccess().getRmRegisterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__RdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getRdRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getRdRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__RmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getRmRegisterParserRuleCall_2_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getRmRegisterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithThreeRegisters__RnAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsWithThreeRegistersAccess().getRnRegisterParserRuleCall_4_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationsWithThreeRegistersAccess().getRnRegisterParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__RdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsWithConstantAccess().getRdRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationsWithConstantAccess().getRdRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__RmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsWithConstantAccess().getRmRegisterParserRuleCall_2_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationsWithConstantAccess().getRmRegisterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsWithConstant__Const4Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsWithConstantAccess().getConst4Const4OrLabelParserRuleCall_4_0()); }
		ruleConst4OrLabel
		{ after(grammarAccess.getOperationsWithConstantAccess().getConst4Const4OrLabelParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__RdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationShiftAccess().getRdRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationShiftAccess().getRdRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__RmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationShiftAccess().getRmRegisterParserRuleCall_2_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationShiftAccess().getRmRegisterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__Const4Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationShiftAccess().getConst4Const4OrLabelParserRuleCall_4_0()); }
		ruleConst4OrLabel
		{ after(grammarAccess.getOperationShiftAccess().getConst4Const4OrLabelParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationShift__SinAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationShiftAccess().getSinNumberParserRuleCall_6_0()); }
		ruleNumber
		{ after(grammarAccess.getOperationShiftAccess().getSinNumberParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__RbxAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationWithOffsetAccess().getRbxRegisterParserRuleCall_0_0()); }
		ruleRegister
		{ after(grammarAccess.getOperationWithOffsetAccess().getRbxRegisterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationWithOffset__Offset8Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationWithOffsetAccess().getOffset8Offset8OrLabelParserRuleCall_2_0()); }
		ruleOffset8OrLabel
		{ after(grammarAccess.getOperationWithOffsetAccess().getOffset8Offset8OrLabelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__NumericValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNumericValueAlternatives_0_0()); }
		(rule__Expression__NumericValueAlternatives_0_0)
		{ after(grammarAccess.getExpressionAccess().getNumericValueAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__IdValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getIdValueIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExpressionAccess().getIdValueIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowOrHight__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLowOrHightAccess().getValueExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLowOrHightAccess().getValueExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getValueAlternatives_0()); }
		(rule__Register__ValueAlternatives_0)
		{ after(grammarAccess.getRegisterAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueAlternatives_0()); }
		(rule__Number__ValueAlternatives_0)
		{ after(grammarAccess.getNumberAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
