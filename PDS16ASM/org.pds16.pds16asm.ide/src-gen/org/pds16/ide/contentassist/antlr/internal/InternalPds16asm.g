/*
 * generated by Xtext 2.9.2
 */
grammar InternalPds16asm;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.pds16.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.pds16.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.pds16.services.Pds16asmGrammarAccess;

}
@parser::members {
	private Pds16asmGrammarAccess grammarAccess;

	public void setGrammarAccess(Pds16asmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getOperationsAssignment()); }
		(rule__Model__OperationsAssignment)*
		{ after(grammarAccess.getModelAccess().getOperationsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperations
entryRuleOperations
:
{ before(grammarAccess.getOperationsRule()); }
	 ruleOperations
{ after(grammarAccess.getOperationsRule()); } 
	 EOF 
;

// Rule Operations
ruleOperations 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationsAccess().getAlternatives()); }
		(rule__Operations__Alternatives)
		{ after(grammarAccess.getOperationsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationLDI
entryRuleOperationLDI
:
{ before(grammarAccess.getOperationLDIRule()); }
	 ruleOperationLDI
{ after(grammarAccess.getOperationLDIRule()); } 
	 EOF 
;

// Rule OperationLDI
ruleOperationLDI 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationLDIAccess().getGroup()); }
		(rule__OperationLDI__Group__0)
		{ after(grammarAccess.getOperationLDIAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationLD2
entryRuleOperationLD2
:
{ before(grammarAccess.getOperationLD2Rule()); }
	 ruleOperationLD2
{ after(grammarAccess.getOperationLD2Rule()); } 
	 EOF 
;

// Rule OperationLD2
ruleOperationLD2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationLD2Access().getGroup()); }
		(rule__OperationLD2__Group__0)
		{ after(grammarAccess.getOperationLD2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexed
entryRuleIndexed
:
{ before(grammarAccess.getIndexedRule()); }
	 ruleIndexed
{ after(grammarAccess.getIndexedRule()); } 
	 EOF 
;

// Rule Indexed
ruleIndexed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexedAccess().getGroup()); }
		(rule__Indexed__Group__0)
		{ after(grammarAccess.getIndexedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHexaDecimal
entryRuleHexaDecimal
:
{ before(grammarAccess.getHexaDecimalRule()); }
	 ruleHexaDecimal
{ after(grammarAccess.getHexaDecimalRule()); } 
	 EOF 
;

// Rule HexaDecimal
ruleHexaDecimal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHexaDecimalAccess().getGroup()); }
		(rule__HexaDecimal__Group__0)
		{ after(grammarAccess.getHexaDecimalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegisters
entryRuleRegisters
:
{ before(grammarAccess.getRegistersRule()); }
	 ruleRegisters
{ after(grammarAccess.getRegistersRule()); } 
	 EOF 
;

// Rule Registers
ruleRegisters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegistersAccess().getAlternatives()); }
		(rule__Registers__Alternatives)
		{ after(grammarAccess.getRegistersAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleR1
entryRuleR1
:
{ before(grammarAccess.getR1Rule()); }
	 ruleR1
{ after(grammarAccess.getR1Rule()); } 
	 EOF 
;

// Rule R1
ruleR1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getR1Access().getValueAssignment()); }
		(rule__R1__ValueAssignment)
		{ after(grammarAccess.getR1Access().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleR2
entryRuleR2
:
{ before(grammarAccess.getR2Rule()); }
	 ruleR2
{ after(grammarAccess.getR2Rule()); } 
	 EOF 
;

// Rule R2
ruleR2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getR2Access().getValueAssignment()); }
		(rule__R2__ValueAssignment)
		{ after(grammarAccess.getR2Access().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getOperationLDIParserRuleCall_0()); }
		ruleOperationLDI
		{ after(grammarAccess.getOperationsAccess().getOperationLDIParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationsAccess().getOperationLD2ParserRuleCall_1()); }
		ruleOperationLD2
		{ after(grammarAccess.getOperationsAccess().getOperationLD2ParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registers__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegistersAccess().getR1ParserRuleCall_0()); }
		ruleR1
		{ after(grammarAccess.getRegistersAccess().getR1ParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegistersAccess().getR2ParserRuleCall_1()); }
		ruleR2
		{ after(grammarAccess.getRegistersAccess().getR2ParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLDI__Group__0__Impl
	rule__OperationLDI__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLDIAccess().getLDIKeyword_0()); }
	'LDI'
	{ after(grammarAccess.getOperationLDIAccess().getLDIKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLDI__Group__1__Impl
	rule__OperationLDI__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLDIAccess().getRegisterAssignment_1()); }
	(rule__OperationLDI__RegisterAssignment_1)
	{ after(grammarAccess.getOperationLDIAccess().getRegisterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLDI__Group__2__Impl
	rule__OperationLDI__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLDIAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getOperationLDIAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLDI__Group__3__Impl
	rule__OperationLDI__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLDIAccess().getImmediate8Assignment_3()); }
	(rule__OperationLDI__Immediate8Assignment_3)
	{ after(grammarAccess.getOperationLDIAccess().getImmediate8Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLDI__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLDIAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getOperationLDIAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationLD2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLD2__Group__0__Impl
	rule__OperationLD2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLD2Access().getLDKeyword_0()); }
	'LD'
	{ after(grammarAccess.getOperationLD2Access().getLDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLD2__Group__1__Impl
	rule__OperationLD2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLD2Access().getRegisterAssignment_1()); }
	(rule__OperationLD2__RegisterAssignment_1)
	{ after(grammarAccess.getOperationLD2Access().getRegisterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLD2__Group__2__Impl
	rule__OperationLD2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLD2Access().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getOperationLD2Access().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLD2__Group__3__Impl
	rule__OperationLD2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLD2Access().getIndexedAssignment_3()); }
	(rule__OperationLD2__IndexedAssignment_3)
	{ after(grammarAccess.getOperationLD2Access().getIndexedAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationLD2__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationLD2Access().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getOperationLD2Access().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Indexed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__0__Impl
	rule__Indexed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getIndexedAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__1__Impl
	rule__Indexed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getRegAssignment_1()); }
	(rule__Indexed__RegAssignment_1)
	{ after(grammarAccess.getIndexedAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__2__Impl
	rule__Indexed__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getIndexedAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__3__Impl
	rule__Indexed__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getImediate8Assignment_3()); }
	(rule__Indexed__Imediate8Assignment_3)
	{ after(grammarAccess.getIndexedAccess().getImediate8Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Indexed__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getIndexedAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HexaDecimal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HexaDecimal__Group__0__Impl
	rule__HexaDecimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HexaDecimal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHexaDecimalAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getHexaDecimalAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HexaDecimal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HexaDecimal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HexaDecimal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHexaDecimalAccess().getNumberAssignment_1()); }
	(rule__HexaDecimal__NumberAssignment_1)
	{ after(grammarAccess.getHexaDecimalAccess().getNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__OperationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getOperationsOperationsParserRuleCall_0()); }
		ruleOperations
		{ after(grammarAccess.getModelAccess().getOperationsOperationsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__RegisterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationLDIAccess().getRegisterRegistersParserRuleCall_1_0()); }
		ruleRegisters
		{ after(grammarAccess.getOperationLDIAccess().getRegisterRegistersParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLDI__Immediate8Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationLDIAccess().getImmediate8HexaDecimalParserRuleCall_3_0()); }
		ruleHexaDecimal
		{ after(grammarAccess.getOperationLDIAccess().getImmediate8HexaDecimalParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__RegisterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationLD2Access().getRegisterRegistersParserRuleCall_1_0()); }
		ruleRegisters
		{ after(grammarAccess.getOperationLD2Access().getRegisterRegistersParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationLD2__IndexedAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationLD2Access().getIndexedIndexedParserRuleCall_3_0()); }
		ruleIndexed
		{ after(grammarAccess.getOperationLD2Access().getIndexedIndexedParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedAccess().getRegRegistersParserRuleCall_1_0()); }
		ruleRegisters
		{ after(grammarAccess.getIndexedAccess().getRegRegistersParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Indexed__Imediate8Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedAccess().getImediate8HexaDecimalParserRuleCall_3_0()); }
		ruleHexaDecimal
		{ after(grammarAccess.getIndexedAccess().getImediate8HexaDecimalParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HexaDecimal__NumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHexaDecimalAccess().getNumberIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getHexaDecimalAccess().getNumberIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__R1__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getR1Access().getValueR1Keyword_0()); }
		(
			{ before(grammarAccess.getR1Access().getValueR1Keyword_0()); }
			'R1'
			{ after(grammarAccess.getR1Access().getValueR1Keyword_0()); }
		)
		{ after(grammarAccess.getR1Access().getValueR1Keyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__R2__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getR2Access().getValueR2Keyword_0()); }
		(
			{ before(grammarAccess.getR2Access().getValueR2Keyword_0()); }
			'R2'
			{ after(grammarAccess.getR2Access().getValueR2Keyword_0()); }
		)
		{ after(grammarAccess.getR2Access().getValueR2Keyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
