/*
 * generated by Xtext 2.9.2
 */
package org.pds16.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.pds16.ide.contentassist.antlr.internal.InternalPds16asmParser;
import org.pds16.services.Pds16asmGrammarAccess;

public class Pds16asmParser extends AbstractContentAssistParser {

	@Inject
	private Pds16asmGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPds16asmParser createParser() {
		InternalPds16asmParser result = new InternalPds16asmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOperationsAccess().getAlternatives(), "rule__Operations__Alternatives");
					put(grammarAccess.getRegistersAccess().getAlternatives(), "rule__Registers__Alternatives");
					put(grammarAccess.getOperationLDIAccess().getGroup(), "rule__OperationLDI__Group__0");
					put(grammarAccess.getOperationLD2Access().getGroup(), "rule__OperationLD2__Group__0");
					put(grammarAccess.getIndexedAccess().getGroup(), "rule__Indexed__Group__0");
					put(grammarAccess.getHexaDecimalAccess().getGroup(), "rule__HexaDecimal__Group__0");
					put(grammarAccess.getModelAccess().getOperationsAssignment(), "rule__Model__OperationsAssignment");
					put(grammarAccess.getOperationLDIAccess().getRegisterAssignment_1(), "rule__OperationLDI__RegisterAssignment_1");
					put(grammarAccess.getOperationLDIAccess().getImmediate8Assignment_3(), "rule__OperationLDI__Immediate8Assignment_3");
					put(grammarAccess.getOperationLD2Access().getRegisterAssignment_1(), "rule__OperationLD2__RegisterAssignment_1");
					put(grammarAccess.getOperationLD2Access().getIndexedAssignment_3(), "rule__OperationLD2__IndexedAssignment_3");
					put(grammarAccess.getIndexedAccess().getRegAssignment_1(), "rule__Indexed__RegAssignment_1");
					put(grammarAccess.getIndexedAccess().getImediate8Assignment_3(), "rule__Indexed__Imediate8Assignment_3");
					put(grammarAccess.getHexaDecimalAccess().getNumberAssignment_1(), "rule__HexaDecimal__NumberAssignment_1");
					put(grammarAccess.getR1Access().getValueAssignment(), "rule__R1__ValueAssignment");
					put(grammarAccess.getR2Access().getValueAssignment(), "rule__R2__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPds16asmParser typedParser = (InternalPds16asmParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Pds16asmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Pds16asmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
