/*
 * generated by Xtext 2.9.2
 */
package org.pds16.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.pds16.ide.contentassist.antlr.internal.InternalPds16asmParser;
import org.pds16.services.Pds16asmGrammarAccess;

public class Pds16asmParser extends AbstractContentAssistParser {

	@Inject
	private Pds16asmGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPds16asmParser createParser() {
		InternalPds16asmParser result = new InternalPds16asmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionsAccess().getAlternatives(), "rule__Instructions__Alternatives");
					put(grammarAccess.getLoadAccess().getAlternatives(), "rule__Load__Alternatives");
					put(grammarAccess.getStoreAccess().getAlternatives(), "rule__Store__Alternatives");
					put(grammarAccess.getAritmeticaAccess().getAlternatives(), "rule__Aritmetica__Alternatives");
					put(grammarAccess.getLogicaAccess().getAlternatives(), "rule__Logica__Alternatives");
					put(grammarAccess.getLdImmediateAccess().getAlternatives_0(), "rule__LdImmediate__Alternatives_0");
					put(grammarAccess.getLdDirectAccess().getAlternatives_0(), "rule__LdDirect__Alternatives_0");
					put(grammarAccess.getLdIndexedAccess().getAlternatives_0(), "rule__LdIndexed__Alternatives_0");
					put(grammarAccess.getLdBasedIndexedAccess().getAlternatives_0(), "rule__LdBasedIndexed__Alternatives_0");
					put(grammarAccess.getStDirectAccess().getAlternatives_0(), "rule__StDirect__Alternatives_0");
					put(grammarAccess.getStIndexedAccess().getAlternatives_0(), "rule__StIndexed__Alternatives_0");
					put(grammarAccess.getStBasedIndexedAccess().getAlternatives_0(), "rule__StBasedIndexed__Alternatives_0");
					put(grammarAccess.getAddRegistersAccess().getAlternatives_0(), "rule__AddRegisters__Alternatives_0");
					put(grammarAccess.getAddConstantAccess().getAlternatives_0(), "rule__AddConstant__Alternatives_0");
					put(grammarAccess.getSubRegistersAccess().getAlternatives_0(), "rule__SubRegisters__Alternatives_0");
					put(grammarAccess.getSubConstantAccess().getAlternatives_0(), "rule__SubConstant__Alternatives_0");
					put(grammarAccess.getANLAccess().getAlternatives_0(), "rule__ANL__Alternatives_0");
					put(grammarAccess.getORLAccess().getAlternatives_0(), "rule__ORL__Alternatives_0");
					put(grammarAccess.getXRLAccess().getAlternatives_0(), "rule__XRL__Alternatives_0");
					put(grammarAccess.getNOTAccess().getAlternatives_0(), "rule__NOT__Alternatives_0");
					put(grammarAccess.getRRAccess().getAlternatives_0(), "rule__RR__Alternatives_0");
					put(grammarAccess.getRCAccess().getAlternatives_0(), "rule__RC__Alternatives_0");
					put(grammarAccess.getJumpOpAccess().getAlternatives_0(), "rule__JumpOp__Alternatives_0");
					put(grammarAccess.getJumpOpAccess().getAlternatives_1(), "rule__JumpOp__Alternatives_1");
					put(grammarAccess.getIndexedAccess().getAlternatives_6(), "rule__Indexed__Alternatives_6");
					put(grammarAccess.getRegistersAccess().getValueAlternatives_0(), "rule__Registers__ValueAlternatives_0");
					put(grammarAccess.getLdImmediateAccess().getGroup(), "rule__LdImmediate__Group__0");
					put(grammarAccess.getLdDirectAccess().getGroup(), "rule__LdDirect__Group__0");
					put(grammarAccess.getLdIndexedAccess().getGroup(), "rule__LdIndexed__Group__0");
					put(grammarAccess.getLdBasedIndexedAccess().getGroup(), "rule__LdBasedIndexed__Group__0");
					put(grammarAccess.getStDirectAccess().getGroup(), "rule__StDirect__Group__0");
					put(grammarAccess.getStIndexedAccess().getGroup(), "rule__StIndexed__Group__0");
					put(grammarAccess.getStBasedIndexedAccess().getGroup(), "rule__StBasedIndexed__Group__0");
					put(grammarAccess.getAddRegistersAccess().getGroup(), "rule__AddRegisters__Group__0");
					put(grammarAccess.getAddConstantAccess().getGroup(), "rule__AddConstant__Group__0");
					put(grammarAccess.getSubRegistersAccess().getGroup(), "rule__SubRegisters__Group__0");
					put(grammarAccess.getSubConstantAccess().getGroup(), "rule__SubConstant__Group__0");
					put(grammarAccess.getANLAccess().getGroup(), "rule__ANL__Group__0");
					put(grammarAccess.getORLAccess().getGroup(), "rule__ORL__Group__0");
					put(grammarAccess.getXRLAccess().getGroup(), "rule__XRL__Group__0");
					put(grammarAccess.getNOTAccess().getGroup(), "rule__NOT__Group__0");
					put(grammarAccess.getSHLAccess().getGroup(), "rule__SHL__Group__0");
					put(grammarAccess.getSHRAccess().getGroup(), "rule__SHR__Group__0");
					put(grammarAccess.getRRAccess().getGroup(), "rule__RR__Group__0");
					put(grammarAccess.getRCAccess().getGroup(), "rule__RC__Group__0");
					put(grammarAccess.getJumpOpAccess().getGroup(), "rule__JumpOp__Group__0");
					put(grammarAccess.getImmediateAccess().getGroup(), "rule__Immediate__Group__0");
					put(grammarAccess.getDirectAccess().getGroup(), "rule__Direct__Group__0");
					put(grammarAccess.getIndexedAccess().getGroup(), "rule__Indexed__Group__0");
					put(grammarAccess.getBasedIndexedAccess().getGroup(), "rule__BasedIndexed__Group__0");
					put(grammarAccess.getHexaDecimalAccess().getGroup(), "rule__HexaDecimal__Group__0");
					put(grammarAccess.getOperationWithTwoRegistersAccess().getGroup(), "rule__OperationWithTwoRegisters__Group__0");
					put(grammarAccess.getOperationsWithTreeRegistersAccess().getGroup(), "rule__OperationsWithTreeRegisters__Group__0");
					put(grammarAccess.getOperationsWithConstantAccess().getGroup(), "rule__OperationsWithConstant__Group__0");
					put(grammarAccess.getOperationShiftAccess().getGroup(), "rule__OperationShift__Group__0");
					put(grammarAccess.getOperationWithOffsetAccess().getGroup(), "rule__OperationWithOffset__Group__0");
					put(grammarAccess.getPDS16ASMAccess().getInstuctionsAssignment(), "rule__PDS16ASM__InstuctionsAssignment");
					put(grammarAccess.getJumpOpAccess().getOpAssignment_1_1(), "rule__JumpOp__OpAssignment_1_1");
					put(grammarAccess.getImmediateAccess().getRegisterAssignment_0(), "rule__Immediate__RegisterAssignment_0");
					put(grammarAccess.getImmediateAccess().getImmediate8Assignment_2(), "rule__Immediate__Immediate8Assignment_2");
					put(grammarAccess.getDirectAccess().getRegisterAssignment_0(), "rule__Direct__RegisterAssignment_0");
					put(grammarAccess.getDirectAccess().getDirect7Assignment_2(), "rule__Direct__Direct7Assignment_2");
					put(grammarAccess.getIndexedAccess().getRdAssignment_0(), "rule__Indexed__RdAssignment_0");
					put(grammarAccess.getIndexedAccess().getRbxAssignment_3(), "rule__Indexed__RbxAssignment_3");
					put(grammarAccess.getIndexedAccess().getIndexAssignment_5(), "rule__Indexed__IndexAssignment_5");
					put(grammarAccess.getBasedIndexedAccess().getRbxAssignment_3(), "rule__BasedIndexed__RbxAssignment_3");
					put(grammarAccess.getBasedIndexedAccess().getRixAssignment_5(), "rule__BasedIndexed__RixAssignment_5");
					put(grammarAccess.getHexaDecimalAccess().getNumberAssignment_1(), "rule__HexaDecimal__NumberAssignment_1");
					put(grammarAccess.getOperationWithTwoRegistersAccess().getRdAssignment_0(), "rule__OperationWithTwoRegisters__RdAssignment_0");
					put(grammarAccess.getOperationWithTwoRegistersAccess().getRmAssignment_2(), "rule__OperationWithTwoRegisters__RmAssignment_2");
					put(grammarAccess.getOperationsWithTreeRegistersAccess().getRdAssignment_0(), "rule__OperationsWithTreeRegisters__RdAssignment_0");
					put(grammarAccess.getOperationsWithTreeRegistersAccess().getRmAssignment_2(), "rule__OperationsWithTreeRegisters__RmAssignment_2");
					put(grammarAccess.getOperationsWithTreeRegistersAccess().getRnAssignment_4(), "rule__OperationsWithTreeRegisters__RnAssignment_4");
					put(grammarAccess.getOperationsWithConstantAccess().getRdAssignment_0(), "rule__OperationsWithConstant__RdAssignment_0");
					put(grammarAccess.getOperationsWithConstantAccess().getRmAssignment_2(), "rule__OperationsWithConstant__RmAssignment_2");
					put(grammarAccess.getOperationsWithConstantAccess().getConst4Assignment_5(), "rule__OperationsWithConstant__Const4Assignment_5");
					put(grammarAccess.getOperationShiftAccess().getRdAssignment_0(), "rule__OperationShift__RdAssignment_0");
					put(grammarAccess.getOperationShiftAccess().getRmAssignment_2(), "rule__OperationShift__RmAssignment_2");
					put(grammarAccess.getOperationShiftAccess().getConst4Assignment_5(), "rule__OperationShift__Const4Assignment_5");
					put(grammarAccess.getOperationShiftAccess().getSinAssignment_7(), "rule__OperationShift__SinAssignment_7");
					put(grammarAccess.getOperationWithOffsetAccess().getRbxAssignment_0(), "rule__OperationWithOffset__RbxAssignment_0");
					put(grammarAccess.getOperationWithOffsetAccess().getOffset8Assignment_2(), "rule__OperationWithOffset__Offset8Assignment_2");
					put(grammarAccess.getCommentAccess().getValueAssignment(), "rule__Comment__ValueAssignment");
					put(grammarAccess.getRegistersAccess().getValueAssignment(), "rule__Registers__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPds16asmParser typedParser = (InternalPds16asmParser) parser;
			typedParser.entryRulePDS16ASM();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Pds16asmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Pds16asmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
