grammar org.pds16.Pds16asm hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate pds16asm "http://www.pds16.org/Pds16asm"


PDS16ASM:
	instuctions+=Statement*;

Statement:
	Instructions | Label | Directive;

Label:
	labelName=ID ':' value=(LabelDirective | Instructions);

Directive:
	'.bss' | '.data' | '.end' | '.text' | Equ | Org | Section | Set | LabelDirective;

LabelDirective: Ascii | Asciiz | Byte | Word | Space;
				

Ascii:	'.ascii' value=STRING (',' STRING)*;

Asciiz:	'.asciiz' value=STRING (',' STRING)*;

Byte:	'.byte' value1=Number (',' Number)*;

Word:	'.word' value1=(Number | ID) (',' (Number | ID))*;

Space:	'.space' size=Number (',' byteValeu=Number)?;

Set:    '.set' value1=ID ',' value2=Expression;

Section:'.section' value=ID;

Org:    '.org' Expression;

Equ:    '.equ' ID ',' Expression;

Instructions:
	Load | Store | Aritmetica | Logica | Jump;

Load: LdImmediate | LdDirect | LdIndexed | LdBasedIndexed ;
Store: StDirect | StIndexed | StBasedIndexed;
Aritmetica: Add | Sub;
Logica: Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc;
Jump: JumpOp;

/**************************************Load************************************************/
LdImmediate: ('ldi' |'ldih')  Immediate;

LdDirect: ('ld' | 'ldb') Direct;

LdIndexed: ('ld' | 'ldb') Indexed;

LdBasedIndexed: ('ld' | 'ldb') BasedIndexed;
/******************************************************************************************/

/****************************************Store ********************************************/
StDirect: ('st' | 'stb') Direct ;

StIndexed: ('st' | 'stb') Indexed;

StBasedIndexed: ('st' | 'stb') BasedIndexed ;
/******************************************************************************************/

/******************************************* Aritmetica ***********************************/
Add: ('add' | 'addf' | 'adc' | 'adcf') 
		(OperationsWithConstant | OperationsWithTreeRegisters)
	 | ('inc' | 'incf') Registers;
		
Sub: (('sub' | 'subf' | 'sbb' | 'sbbf') 
		(OperationsWithConstant | OperationsWithTreeRegisters))
	 | 'subr' OperationsWithTreeRegisters
	 |  ('dec' | 'decf') Registers ;
/******************************************************************************************/

/******************************************* Logica ***************************************/
Anl: ('anl' | 'anlf') OperationsWithTreeRegisters;

Orl: ('orl' | 'orlf') OperationsWithTreeRegisters
	  | ('mov' | 'movf') OperationWithTwoRegisters 
	  | ('ret' | 'iret');

Xrl: ('xrl' | 'xrlf') OperationsWithTreeRegisters;

Not: ('not' | 'notf') OperationWithTwoRegisters;

Shl: 'shl' OperationShift;

Shr: 'shr' OperationShift;

Rr: ('rrl' | 'rrm') OperationsWithConstant;

Rc: ('rcr' | 'rcl') OperationWithTwoRegisters;
/******************************************************************************************/

/************************************** Jump **********************************************/
JumpOp: 
	('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl')
		(OperationWithOffset | op=ID | '$');
/******************************************************************************************/

/************************************Type Operations***************************************/
Immediate: register=Registers ',' immediate8= (ConstOrLabel | LowOrHight) ;

Direct: register=Registers ',' direct7=DirectOrLabel;

Indexed:
	rd=Registers ',''[' rbx=Registers ',' idx3=ConstOrLabel ']' ;
	
BasedIndexed: 
	Registers ',' '[' rbx=Registers ',' rix=Registers ']';

DirectOrLabel: number=Number | label=ID;

ConstOrLabel: '#'( number=Number | label=ID);

OperationWithTwoRegisters: rd=Registers ',' rm=Registers;

OperationsWithTreeRegisters: rd=Registers ',' rm=Registers ',' rn=Registers ;

OperationsWithConstant: rd=Registers ',' rm=Registers ',' const4=ConstOrLabel;

OperationShift: rd=Registers ',' rm=Registers ',' const4=ConstOrLabel ',' sin=BIT;

OperationWithOffset: rbx=Registers ',' offset8=ConstOrLabel;

Expression: value1=
	(Number | ID)+
	//para a string temos que fazer um validator que verifique se é realmente uma expressão
;

LowOrHight: '#' ('low' | 'high') '(' Expression ')' ;
/******************************************************************************************/

/***********************************************Utils**************************************/
Registers:
		value= ('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'PSW');

Number: (INT | HEX | OCT | BIN | CHAR);

terminal HEX : ('0x'|'0X')(('0'..'9')|('a'..'f')|('A'..'F'))+;

terminal OCT : '0' ('0'..'7')+; 

terminal BIT : ('0' | '1');

terminal BIN : BIT+ 'b';

terminal CHAR : "'" ANY_OTHER "'";

terminal SIGN : '-' | '+';

/******************************************************************************************/

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: SIGN? ('1'..'9')('0'..'9')*;
terminal STRING	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: ';' -> '\n';

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
