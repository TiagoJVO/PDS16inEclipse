/*
 * generated by Xtext 2.9.2
 */
package org.pds16.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Pds16asmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Model");
		private final Assignment cOperationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationsOperationsParserRuleCall_0 = (RuleCall)cOperationsAssignment.eContents().get(0);
		
		//Model:
		//	operations+=Operations*;
		@Override public ParserRule getRule() { return rule; }
		
		//operations+=Operations*
		public Assignment getOperationsAssignment() { return cOperationsAssignment; }
		
		//Operations
		public RuleCall getOperationsOperationsParserRuleCall_0() { return cOperationsOperationsParserRuleCall_0; }
	}
	public class OperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Operations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationLDIParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationLD2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operations:
		//	OperationLDI | OperationLD2;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationLDI | OperationLD2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationLDI
		public RuleCall getOperationLDIParserRuleCall_0() { return cOperationLDIParserRuleCall_0; }
		
		//OperationLD2
		public RuleCall getOperationLD2ParserRuleCall_1() { return cOperationLD2ParserRuleCall_1; }
	}
	public class OperationLDIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationLDI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLDIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegisterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegisterRegistersParserRuleCall_1_0 = (RuleCall)cRegisterAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImmediate8Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImmediate8HexaDecimalParserRuleCall_3_0 = (RuleCall)cImmediate8Assignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationLDI: / *LDI ex: LDI r1,#0x2f * / 'LDI' register=Registers ',' immediate8=HexaDecimal ';';
		@Override public ParserRule getRule() { return rule; }
		
		/// *LDI ex: LDI r1,#0x2f * / 'LDI' register=Registers ',' immediate8=HexaDecimal ';'
		public Group getGroup() { return cGroup; }
		
		/// *LDI ex: LDI r1,#0x2f * / 'LDI'
		public Keyword getLDIKeyword_0() { return cLDIKeyword_0; }
		
		//register=Registers
		public Assignment getRegisterAssignment_1() { return cRegisterAssignment_1; }
		
		//Registers
		public RuleCall getRegisterRegistersParserRuleCall_1_0() { return cRegisterRegistersParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//immediate8=HexaDecimal
		public Assignment getImmediate8Assignment_3() { return cImmediate8Assignment_3; }
		
		//HexaDecimal
		public RuleCall getImmediate8HexaDecimalParserRuleCall_3_0() { return cImmediate8HexaDecimalParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class OperationLD2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationLD2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegisterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegisterRegistersParserRuleCall_1_0 = (RuleCall)cRegisterAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexedIndexedParserRuleCall_3_0 = (RuleCall)cIndexedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationLD2: / *LD RD,[RBX,#idx3]* / 'LD' register=Registers ',' indexed=Indexed ';';
		@Override public ParserRule getRule() { return rule; }
		
		/// *LD RD,[RBX,#idx3]* / 'LD' register=Registers ',' indexed=Indexed ';'
		public Group getGroup() { return cGroup; }
		
		/// *LD RD,[RBX,#idx3]* / 'LD'
		public Keyword getLDKeyword_0() { return cLDKeyword_0; }
		
		//register=Registers
		public Assignment getRegisterAssignment_1() { return cRegisterAssignment_1; }
		
		//Registers
		public RuleCall getRegisterRegistersParserRuleCall_1_0() { return cRegisterRegistersParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//indexed=Indexed
		public Assignment getIndexedAssignment_3() { return cIndexedAssignment_3; }
		
		//Indexed
		public RuleCall getIndexedIndexedParserRuleCall_3_0() { return cIndexedIndexedParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class IndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Indexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegistersParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImediate8Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImediate8HexaDecimalParserRuleCall_3_0 = (RuleCall)cImediate8Assignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Indexed: //Ou seja podemos aproveitar isto tanto para LD e ST!!
		//	'[' reg=Registers ',' imediate8=HexaDecimal ']';
		@Override public ParserRule getRule() { return rule; }
		
		////Ou seja podemos aproveitar isto tanto para LD e ST!!
		//'[' reg=Registers ',' imediate8=HexaDecimal ']'
		public Group getGroup() { return cGroup; }
		
		////Ou seja podemos aproveitar isto tanto para LD e ST!!
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//reg=Registers
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Registers
		public RuleCall getRegRegistersParserRuleCall_1_0() { return cRegRegistersParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//imediate8=HexaDecimal
		public Assignment getImediate8Assignment_3() { return cImediate8Assignment_3; }
		
		//HexaDecimal
		public RuleCall getImediate8HexaDecimalParserRuleCall_3_0() { return cImediate8HexaDecimalParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class HexaDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.HexaDecimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberIDTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//HexaDecimal:
		//	'#' number=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' number=ID
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//number=ID
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//ID
		public RuleCall getNumberIDTerminalRuleCall_1_0() { return cNumberIDTerminalRuleCall_1_0; }
	}
	public class RegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Registers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cR1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cR2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Registers:
		//	R1 | R2;
		@Override public ParserRule getRule() { return rule; }
		
		//R1 | R2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//R1
		public RuleCall getR1ParserRuleCall_0() { return cR1ParserRuleCall_0; }
		
		//R2
		public RuleCall getR2ParserRuleCall_1() { return cR2ParserRuleCall_1; }
	}
	public class R1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.R1");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueR1Keyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//R1:
		//	value='R1';
		@Override public ParserRule getRule() { return rule; }
		
		//value='R1'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'R1'
		public Keyword getValueR1Keyword_0() { return cValueR1Keyword_0; }
	}
	public class R2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.R2");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueR2Keyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//R2:
		//	value='R2';
		@Override public ParserRule getRule() { return rule; }
		
		//value='R2'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'R2'
		public Keyword getValueR2Keyword_0() { return cValueR2Keyword_0; }
	}
	
	
	private final ModelElements pModel;
	private final OperationsElements pOperations;
	private final OperationLDIElements pOperationLDI;
	private final OperationLD2Elements pOperationLD2;
	private final IndexedElements pIndexed;
	private final HexaDecimalElements pHexaDecimal;
	private final RegistersElements pRegisters;
	private final R1Elements pR1;
	private final R2Elements pR2;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Pds16asmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pOperations = new OperationsElements();
		this.pOperationLDI = new OperationLDIElements();
		this.pOperationLD2 = new OperationLD2Elements();
		this.pIndexed = new IndexedElements();
		this.pHexaDecimal = new HexaDecimalElements();
		this.pRegisters = new RegistersElements();
		this.pR1 = new R1Elements();
		this.pR2 = new R2Elements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.pds16.Pds16asm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	operations+=Operations*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Operations:
	//	OperationLDI | OperationLD2;
	public OperationsElements getOperationsAccess() {
		return pOperations;
	}
	
	public ParserRule getOperationsRule() {
		return getOperationsAccess().getRule();
	}
	
	//OperationLDI: / *LDI ex: LDI r1,#0x2f * / 'LDI' register=Registers ',' immediate8=HexaDecimal ';';
	public OperationLDIElements getOperationLDIAccess() {
		return pOperationLDI;
	}
	
	public ParserRule getOperationLDIRule() {
		return getOperationLDIAccess().getRule();
	}
	
	//OperationLD2: / *LD RD,[RBX,#idx3]* / 'LD' register=Registers ',' indexed=Indexed ';';
	public OperationLD2Elements getOperationLD2Access() {
		return pOperationLD2;
	}
	
	public ParserRule getOperationLD2Rule() {
		return getOperationLD2Access().getRule();
	}
	
	//Indexed: //Ou seja podemos aproveitar isto tanto para LD e ST!!
	//	'[' reg=Registers ',' imediate8=HexaDecimal ']';
	public IndexedElements getIndexedAccess() {
		return pIndexed;
	}
	
	public ParserRule getIndexedRule() {
		return getIndexedAccess().getRule();
	}
	
	//HexaDecimal:
	//	'#' number=ID;
	public HexaDecimalElements getHexaDecimalAccess() {
		return pHexaDecimal;
	}
	
	public ParserRule getHexaDecimalRule() {
		return getHexaDecimalAccess().getRule();
	}
	
	//Registers:
	//	R1 | R2;
	public RegistersElements getRegistersAccess() {
		return pRegisters;
	}
	
	public ParserRule getRegistersRule() {
		return getRegistersAccess().getRule();
	}
	
	//R1:
	//	value='R1';
	public R1Elements getR1Access() {
		return pR1;
	}
	
	public ParserRule getR1Rule() {
		return getR1Access().getRule();
	}
	
	//R2:
	//	value='R2';
	public R2Elements getR2Access() {
		return pR2;
	}
	
	public ParserRule getR2Rule() {
		return getR2Access().getRule();
	}
	
	//terminal ID:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
