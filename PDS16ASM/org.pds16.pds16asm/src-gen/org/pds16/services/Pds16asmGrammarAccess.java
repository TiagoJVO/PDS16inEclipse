/*
 * generated by Xtext 2.9.2
 */
package org.pds16.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Pds16asmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PDS16ASMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.PDS16ASM");
		private final Assignment cInstuctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstuctionsInstructionsParserRuleCall_0 = (RuleCall)cInstuctionsAssignment.eContents().get(0);
		
		//PDS16ASM:
		//	instuctions+=Instructions*;
		@Override public ParserRule getRule() { return rule; }
		
		//instuctions+=Instructions*
		public Assignment getInstuctionsAssignment() { return cInstuctionsAssignment; }
		
		//Instructions
		public RuleCall getInstuctionsInstructionsParserRuleCall_0() { return cInstuctionsInstructionsParserRuleCall_0; }
	}
	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instructions:
		//	Load | Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Comment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Load");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLdImmediateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLdDirectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLdIndexedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLdBasedIndexedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Load:
		//	LdImmediate | LdDirect | LdIndexed | LdBasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//LdImmediate | LdDirect | LdIndexed | LdBasedIndexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LdImmediate
		public RuleCall getLdImmediateParserRuleCall_0() { return cLdImmediateParserRuleCall_0; }
		
		//LdDirect
		public RuleCall getLdDirectParserRuleCall_1() { return cLdDirectParserRuleCall_1; }
		
		//LdIndexed
		public RuleCall getLdIndexedParserRuleCall_2() { return cLdIndexedParserRuleCall_2; }
		
		//LdBasedIndexed
		public RuleCall getLdBasedIndexedParserRuleCall_3() { return cLdBasedIndexedParserRuleCall_3; }
	}
	public class LdImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdImmediate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLdiKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cImmediateParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLdihKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cImmediateParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// *Load* / LdImmediate:
		//	'ldi' Immediate | 'ldih' Immediate;
		@Override public ParserRule getRule() { return rule; }
		
		//'ldi' Immediate | 'ldih' Immediate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ldi' Immediate
		public Group getGroup_0() { return cGroup_0; }
		
		//'ldi'
		public Keyword getLdiKeyword_0_0() { return cLdiKeyword_0_0; }
		
		//Immediate
		public RuleCall getImmediateParserRuleCall_0_1() { return cImmediateParserRuleCall_0_1; }
		
		//'ldih' Immediate
		public Group getGroup_1() { return cGroup_1; }
		
		//'ldih'
		public Keyword getLdihKeyword_1_0() { return cLdihKeyword_1_0; }
		
		//Immediate
		public RuleCall getImmediateParserRuleCall_1_1() { return cImmediateParserRuleCall_1_1; }
	}
	public class LdDirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdDirect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cDirectParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLdbKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDirectParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LdDirect:
		//	'ld' Direct | 'ldb' Direct;
		@Override public ParserRule getRule() { return rule; }
		
		//'ld' Direct | 'ldb' Direct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ld' Direct
		public Group getGroup_0() { return cGroup_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_0_1() { return cDirectParserRuleCall_0_1; }
		
		//'ldb' Direct
		public Group getGroup_1() { return cGroup_1; }
		
		//'ldb'
		public Keyword getLdbKeyword_1_0() { return cLdbKeyword_1_0; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_1_1() { return cDirectParserRuleCall_1_1; }
	}
	public class LdIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdIndexed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIndexedParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLdbKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIndexedParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LdIndexed:
		//	'ld' Indexed | 'ldb' Indexed;
		@Override public ParserRule getRule() { return rule; }
		
		//'ld' Indexed | 'ldb' Indexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ld' Indexed
		public Group getGroup_0() { return cGroup_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//Indexed
		public RuleCall getIndexedParserRuleCall_0_1() { return cIndexedParserRuleCall_0_1; }
		
		//'ldb' Indexed
		public Group getGroup_1() { return cGroup_1; }
		
		//'ldb'
		public Keyword getLdbKeyword_1_0() { return cLdbKeyword_1_0; }
		
		//Indexed
		public RuleCall getIndexedParserRuleCall_1_1() { return cIndexedParserRuleCall_1_1; }
	}
	public class LdBasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdBasedIndexed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBasedIndexedParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLdbKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBasedIndexedParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LdBasedIndexed:
		//	'ld' BasedIndexed | 'ldb' BasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//'ld' BasedIndexed | 'ldb' BasedIndexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ld' BasedIndexed
		public Group getGroup_0() { return cGroup_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//BasedIndexed
		public RuleCall getBasedIndexedParserRuleCall_0_1() { return cBasedIndexedParserRuleCall_0_1; }
		
		//'ldb' BasedIndexed
		public Group getGroup_1() { return cGroup_1; }
		
		//'ldb'
		public Keyword getLdbKeyword_1_0() { return cLdbKeyword_1_0; }
		
		//BasedIndexed
		public RuleCall getBasedIndexedParserRuleCall_1_1() { return cBasedIndexedParserRuleCall_1_1; }
	}
	public class ImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Immediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegisterRegistersParserRuleCall_0_0 = (RuleCall)cRegisterAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImmediate8Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImmediate8HexaDecimalParserRuleCall_2_0 = (RuleCall)cImmediate8Assignment_2.eContents().get(0);
		
		/// *Type Operations* / Immediate:
		//	register=Registers ',' immediate8=HexaDecimal;
		@Override public ParserRule getRule() { return rule; }
		
		//register=Registers ',' immediate8=HexaDecimal
		public Group getGroup() { return cGroup; }
		
		//register=Registers
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//Registers
		public RuleCall getRegisterRegistersParserRuleCall_0_0() { return cRegisterRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//immediate8=HexaDecimal
		public Assignment getImmediate8Assignment_2() { return cImmediate8Assignment_2; }
		
		//HexaDecimal
		public RuleCall getImmediate8HexaDecimalParserRuleCall_2_0() { return cImmediate8HexaDecimalParserRuleCall_2_0; }
	}
	public class DirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Direct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegisterRegistersParserRuleCall_0_0 = (RuleCall)cRegisterAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirect7Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirect7HEXTerminalRuleCall_2_0 = (RuleCall)cDirect7Assignment_2.eContents().get(0);
		
		//Direct:
		//	register=Registers ',' direct7=HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//register=Registers ',' direct7=HEX
		public Group getGroup() { return cGroup; }
		
		//register=Registers
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//Registers
		public RuleCall getRegisterRegistersParserRuleCall_0_0() { return cRegisterRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//direct7=HEX
		public Assignment getDirect7Assignment_2() { return cDirect7Assignment_2; }
		
		//HEX
		public RuleCall getDirect7HEXTerminalRuleCall_2_0() { return cDirect7HEXTerminalRuleCall_2_0; }
	}
	public class IndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Indexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegistersParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRbxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRbxRegistersParserRuleCall_3_0 = (RuleCall)cRbxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIndexNumberSignKeyword_5_0 = (Keyword)cIndexAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_6_0 = (RuleCall)cAlternatives_6.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_6_1 = (RuleCall)cAlternatives_6.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Indexed:
		//	rd=Registers ',' '[' rbx=Registers ',' index='#' (INT | HEX) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Registers ',' '[' rbx=Registers ',' index='#' (INT | HEX) ']'
		public Group getGroup() { return cGroup; }
		
		//rd=Registers
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Registers
		public RuleCall getRdRegistersParserRuleCall_0_0() { return cRdRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rbx=Registers
		public Assignment getRbxAssignment_3() { return cRbxAssignment_3; }
		
		//Registers
		public RuleCall getRbxRegistersParserRuleCall_3_0() { return cRbxRegistersParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//index='#'
		public Assignment getIndexAssignment_5() { return cIndexAssignment_5; }
		
		//'#'
		public Keyword getIndexNumberSignKeyword_5_0() { return cIndexNumberSignKeyword_5_0; }
		
		//(INT | HEX)
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6_0() { return cINTTerminalRuleCall_6_0; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_6_1() { return cHEXTerminalRuleCall_6_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class BasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.BasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegistersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRbxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRbxRegistersParserRuleCall_3_0 = (RuleCall)cRbxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRixAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRixRegistersParserRuleCall_5_0 = (RuleCall)cRixAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasedIndexed:
		//	Registers ',' '[' rbx=Registers ',' rix=Registers ']';
		@Override public ParserRule getRule() { return rule; }
		
		//Registers ',' '[' rbx=Registers ',' rix=Registers ']'
		public Group getGroup() { return cGroup; }
		
		//Registers
		public RuleCall getRegistersParserRuleCall_0() { return cRegistersParserRuleCall_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rbx=Registers
		public Assignment getRbxAssignment_3() { return cRbxAssignment_3; }
		
		//Registers
		public RuleCall getRbxRegistersParserRuleCall_3_0() { return cRbxRegistersParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//rix=Registers
		public Assignment getRixAssignment_5() { return cRixAssignment_5; }
		
		//Registers
		public RuleCall getRixRegistersParserRuleCall_5_0() { return cRixRegistersParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class HexaDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.HexaDecimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberHEXTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//HexaDecimal:
		//	'#' number=HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' number=HEX
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//number=HEX
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//HEX
		public RuleCall getNumberHEXTerminalRuleCall_1_0() { return cNumberHEXTerminalRuleCall_1_0; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Comment");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCOMTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// *Utils* / Comment:
		//	value=COMT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=COMT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//COMT
		public RuleCall getValueCOMTTerminalRuleCall_0() { return cValueCOMTTerminalRuleCall_0; }
	}
	public class RegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Registers");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueR0Keyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueR1Keyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueR2Keyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueR3Keyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueR4Keyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueR5Keyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueR6Keyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueR7Keyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		
		//Registers:
		//	value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'r0'
		public Keyword getValueR0Keyword_0_0() { return cValueR0Keyword_0_0; }
		
		//'r1'
		public Keyword getValueR1Keyword_0_1() { return cValueR1Keyword_0_1; }
		
		//'r2'
		public Keyword getValueR2Keyword_0_2() { return cValueR2Keyword_0_2; }
		
		//'r3'
		public Keyword getValueR3Keyword_0_3() { return cValueR3Keyword_0_3; }
		
		//'r4'
		public Keyword getValueR4Keyword_0_4() { return cValueR4Keyword_0_4; }
		
		//'r5'
		public Keyword getValueR5Keyword_0_5() { return cValueR5Keyword_0_5; }
		
		//'r6'
		public Keyword getValueR6Keyword_0_6() { return cValueR6Keyword_0_6; }
		
		//'r7'
		public Keyword getValueR7Keyword_0_7() { return cValueR7Keyword_0_7; }
	}
	
	
	private final PDS16ASMElements pPDS16ASM;
	private final InstructionsElements pInstructions;
	private final LoadElements pLoad;
	private final LdImmediateElements pLdImmediate;
	private final LdDirectElements pLdDirect;
	private final LdIndexedElements pLdIndexed;
	private final LdBasedIndexedElements pLdBasedIndexed;
	private final ImmediateElements pImmediate;
	private final DirectElements pDirect;
	private final IndexedElements pIndexed;
	private final BasedIndexedElements pBasedIndexed;
	private final HexaDecimalElements pHexaDecimal;
	private final CommentElements pComment;
	private final RegistersElements pRegisters;
	private final TerminalRule tHEX;
	private final TerminalRule tCOMT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Pds16asmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPDS16ASM = new PDS16ASMElements();
		this.pInstructions = new InstructionsElements();
		this.pLoad = new LoadElements();
		this.pLdImmediate = new LdImmediateElements();
		this.pLdDirect = new LdDirectElements();
		this.pLdIndexed = new LdIndexedElements();
		this.pLdBasedIndexed = new LdBasedIndexedElements();
		this.pImmediate = new ImmediateElements();
		this.pDirect = new DirectElements();
		this.pIndexed = new IndexedElements();
		this.pBasedIndexed = new BasedIndexedElements();
		this.pHexaDecimal = new HexaDecimalElements();
		this.pComment = new CommentElements();
		this.pRegisters = new RegistersElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.HEX");
		this.tCOMT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.COMT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.pds16.Pds16asm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PDS16ASM:
	//	instuctions+=Instructions*;
	public PDS16ASMElements getPDS16ASMAccess() {
		return pPDS16ASM;
	}
	
	public ParserRule getPDS16ASMRule() {
		return getPDS16ASMAccess().getRule();
	}
	
	//Instructions:
	//	Load | Comment;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}
	
	//Load:
	//	LdImmediate | LdDirect | LdIndexed | LdBasedIndexed;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	/// *Load* / LdImmediate:
	//	'ldi' Immediate | 'ldih' Immediate;
	public LdImmediateElements getLdImmediateAccess() {
		return pLdImmediate;
	}
	
	public ParserRule getLdImmediateRule() {
		return getLdImmediateAccess().getRule();
	}
	
	//LdDirect:
	//	'ld' Direct | 'ldb' Direct;
	public LdDirectElements getLdDirectAccess() {
		return pLdDirect;
	}
	
	public ParserRule getLdDirectRule() {
		return getLdDirectAccess().getRule();
	}
	
	//LdIndexed:
	//	'ld' Indexed | 'ldb' Indexed;
	public LdIndexedElements getLdIndexedAccess() {
		return pLdIndexed;
	}
	
	public ParserRule getLdIndexedRule() {
		return getLdIndexedAccess().getRule();
	}
	
	//LdBasedIndexed:
	//	'ld' BasedIndexed | 'ldb' BasedIndexed;
	public LdBasedIndexedElements getLdBasedIndexedAccess() {
		return pLdBasedIndexed;
	}
	
	public ParserRule getLdBasedIndexedRule() {
		return getLdBasedIndexedAccess().getRule();
	}
	
	/// *Type Operations* / Immediate:
	//	register=Registers ',' immediate8=HexaDecimal;
	public ImmediateElements getImmediateAccess() {
		return pImmediate;
	}
	
	public ParserRule getImmediateRule() {
		return getImmediateAccess().getRule();
	}
	
	//Direct:
	//	register=Registers ',' direct7=HEX;
	public DirectElements getDirectAccess() {
		return pDirect;
	}
	
	public ParserRule getDirectRule() {
		return getDirectAccess().getRule();
	}
	
	//Indexed:
	//	rd=Registers ',' '[' rbx=Registers ',' index='#' (INT | HEX) ']';
	public IndexedElements getIndexedAccess() {
		return pIndexed;
	}
	
	public ParserRule getIndexedRule() {
		return getIndexedAccess().getRule();
	}
	
	//BasedIndexed:
	//	Registers ',' '[' rbx=Registers ',' rix=Registers ']';
	public BasedIndexedElements getBasedIndexedAccess() {
		return pBasedIndexed;
	}
	
	public ParserRule getBasedIndexedRule() {
		return getBasedIndexedAccess().getRule();
	}
	
	//HexaDecimal:
	//	'#' number=HEX;
	public HexaDecimalElements getHexaDecimalAccess() {
		return pHexaDecimal;
	}
	
	public ParserRule getHexaDecimalRule() {
		return getHexaDecimalAccess().getRule();
	}
	
	/// *Utils* / Comment:
	//	value=COMT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Registers:
	//	value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7');
	public RegistersElements getRegistersAccess() {
		return pRegisters;
	}
	
	public ParserRule getRegistersRule() {
		return getRegistersAccess().getRule();
	}
	
	//terminal HEX:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal COMT:
	//	';'->'\n';
	public TerminalRule getCOMTRule() {
		return tCOMT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
