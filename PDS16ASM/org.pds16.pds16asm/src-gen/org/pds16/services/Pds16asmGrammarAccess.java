/*
 * generated by Xtext 2.9.2
 */
package org.pds16.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Pds16asmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PDS16ASMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.PDS16ASM");
		private final Assignment cInstuctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstuctionsStatementParserRuleCall_0 = (RuleCall)cInstuctionsAssignment.eContents().get(0);
		
		//PDS16ASM:
		//	instuctions+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//instuctions+=Statement*
		public Assignment getInstuctionsAssignment() { return cInstuctionsAssignment; }
		
		//Statement
		public RuleCall getInstuctionsStatementParserRuleCall_0() { return cInstuctionsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	Instructions | Comment / * /| Label | Directive* /;
		@Override public ParserRule getRule() { return rule; }
		
		//Instructions | Comment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instructions
		public RuleCall getInstructionsParserRuleCall_0() { return cInstructionsParserRuleCall_0; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }
	}
	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAritmeticaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJumpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *... Falta aqui código teu! * / Instructions:
		//	Load | Store | Aritmetica | Logica | Jump;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Store | Aritmetica | Logica | Jump
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
		
		//Aritmetica
		public RuleCall getAritmeticaParserRuleCall_2() { return cAritmeticaParserRuleCall_2; }
		
		//Logica
		public RuleCall getLogicaParserRuleCall_3() { return cLogicaParserRuleCall_3; }
		
		//Jump
		public RuleCall getJumpParserRuleCall_4() { return cJumpParserRuleCall_4; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentCOMTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment:
		//	comment=COMT;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=COMT
		public Assignment getCommentAssignment() { return cCommentAssignment; }
		
		//COMT
		public RuleCall getCommentCOMTTerminalRuleCall_0() { return cCommentCOMTTerminalRuleCall_0; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Load");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLdImmediateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLdDirectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLdIndexedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLdBasedIndexedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Load:
		//	LdImmediate | LdDirect | LdIndexed | LdBasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//LdImmediate | LdDirect | LdIndexed | LdBasedIndexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LdImmediate
		public RuleCall getLdImmediateParserRuleCall_0() { return cLdImmediateParserRuleCall_0; }
		
		//LdDirect
		public RuleCall getLdDirectParserRuleCall_1() { return cLdDirectParserRuleCall_1; }
		
		//LdIndexed
		public RuleCall getLdIndexedParserRuleCall_2() { return cLdIndexedParserRuleCall_2; }
		
		//LdBasedIndexed
		public RuleCall getLdBasedIndexedParserRuleCall_3() { return cLdBasedIndexedParserRuleCall_3; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Store");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStDirectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStIndexedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStBasedIndexedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Store:
		//	StDirect | StIndexed | StBasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//StDirect | StIndexed | StBasedIndexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StDirect
		public RuleCall getStDirectParserRuleCall_0() { return cStDirectParserRuleCall_0; }
		
		//StIndexed
		public RuleCall getStIndexedParserRuleCall_1() { return cStIndexedParserRuleCall_1; }
		
		//StBasedIndexed
		public RuleCall getStBasedIndexedParserRuleCall_2() { return cStBasedIndexedParserRuleCall_2; }
	}
	public class AritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Aritmetica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Aritmetica:
		//	Add | Sub;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | Sub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//Sub
		public RuleCall getSubParserRuleCall_1() { return cSubParserRuleCall_1; }
	}
	public class LogicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Logica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnlParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXrlParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNotParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cShlParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShrParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRcParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Logica:
		//	Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc;
		@Override public ParserRule getRule() { return rule; }
		
		//Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Anl
		public RuleCall getAnlParserRuleCall_0() { return cAnlParserRuleCall_0; }
		
		//Orl
		public RuleCall getOrlParserRuleCall_1() { return cOrlParserRuleCall_1; }
		
		//Xrl
		public RuleCall getXrlParserRuleCall_2() { return cXrlParserRuleCall_2; }
		
		//Not
		public RuleCall getNotParserRuleCall_3() { return cNotParserRuleCall_3; }
		
		//Shl
		public RuleCall getShlParserRuleCall_4() { return cShlParserRuleCall_4; }
		
		//Shr
		public RuleCall getShrParserRuleCall_5() { return cShrParserRuleCall_5; }
		
		//Rr
		public RuleCall getRrParserRuleCall_6() { return cRrParserRuleCall_6; }
		
		//Rc
		public RuleCall getRcParserRuleCall_7() { return cRcParserRuleCall_7; }
	}
	public class JumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Jump");
		private final RuleCall cJumpOpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Jump:
		//	JumpOp;
		@Override public ParserRule getRule() { return rule; }
		
		//JumpOp
		public RuleCall getJumpOpParserRuleCall() { return cJumpOpParserRuleCall; }
	}
	public class LdImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdImmediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdiKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdihKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cImmediateParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// **************************************Load************************************************ / LdImmediate:
		//	('ldi' | 'ldih') Immediate;
		@Override public ParserRule getRule() { return rule; }
		
		//('ldi' | 'ldih') Immediate
		public Group getGroup() { return cGroup; }
		
		//('ldi' | 'ldih')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ldi'
		public Keyword getLdiKeyword_0_0() { return cLdiKeyword_0_0; }
		
		//'ldih'
		public Keyword getLdihKeyword_0_1() { return cLdihKeyword_0_1; }
		
		//Immediate
		public RuleCall getImmediateParserRuleCall_1() { return cImmediateParserRuleCall_1; }
	}
	public class LdDirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdDirect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cDirectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LdDirect:
		//	('ld' | 'ldb') Direct;
		@Override public ParserRule getRule() { return rule; }
		
		//('ld' | 'ldb') Direct
		public Group getGroup() { return cGroup; }
		
		//('ld' | 'ldb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//'ldb'
		public Keyword getLdbKeyword_0_1() { return cLdbKeyword_0_1; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_1() { return cDirectParserRuleCall_1; }
	}
	public class LdIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LdIndexed:
		//	('ld' | 'ldb') Indexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('ld' | 'ldb') Indexed
		public Group getGroup() { return cGroup; }
		
		//('ld' | 'ldb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//'ldb'
		public Keyword getLdbKeyword_0_1() { return cLdbKeyword_0_1; }
		
		//Indexed
		public RuleCall getIndexedParserRuleCall_1() { return cIndexedParserRuleCall_1; }
	}
	public class LdBasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.LdBasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cBasedIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LdBasedIndexed:
		//	('ld' | 'ldb') BasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('ld' | 'ldb') BasedIndexed
		public Group getGroup() { return cGroup; }
		
		//('ld' | 'ldb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//'ldb'
		public Keyword getLdbKeyword_0_1() { return cLdbKeyword_0_1; }
		
		//BasedIndexed
		public RuleCall getBasedIndexedParserRuleCall_1() { return cBasedIndexedParserRuleCall_1; }
	}
	public class StDirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.StDirect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cDirectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ****************************************Store ******************************************** / StDirect:
		//	('st' | 'stb') Direct;
		@Override public ParserRule getRule() { return rule; }
		
		//('st' | 'stb') Direct
		public Group getGroup() { return cGroup; }
		
		//('st' | 'stb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'st'
		public Keyword getStKeyword_0_0() { return cStKeyword_0_0; }
		
		//'stb'
		public Keyword getStbKeyword_0_1() { return cStbKeyword_0_1; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_1() { return cDirectParserRuleCall_1; }
	}
	public class StIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.StIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StIndexed:
		//	('st' | 'stb') Indexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('st' | 'stb') Indexed
		public Group getGroup() { return cGroup; }
		
		//('st' | 'stb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'st'
		public Keyword getStKeyword_0_0() { return cStKeyword_0_0; }
		
		//'stb'
		public Keyword getStbKeyword_0_1() { return cStbKeyword_0_1; }
		
		//Indexed
		public RuleCall getIndexedParserRuleCall_1() { return cIndexedParserRuleCall_1; }
	}
	public class StBasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.StBasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cBasedIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StBasedIndexed:
		//	('st' | 'stb') BasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('st' | 'stb') BasedIndexed
		public Group getGroup() { return cGroup; }
		
		//('st' | 'stb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'st'
		public Keyword getStKeyword_0_0() { return cStKeyword_0_0; }
		
		//'stb'
		public Keyword getStbKeyword_0_1() { return cStbKeyword_0_1; }
		
		//BasedIndexed
		public RuleCall getBasedIndexedParserRuleCall_1() { return cBasedIndexedParserRuleCall_1; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAddKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAddfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAdcKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cAdcfKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cOperationsWithConstantParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cOperationsWithTreeRegistersParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ******************************************* Aritmetica *********************************** / Add:
		//	('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithTreeRegisters);
		@Override public ParserRule getRule() { return rule; }
		
		//('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithTreeRegisters)
		public Group getGroup() { return cGroup; }
		
		//('add' | 'addf' | 'adc' | 'adcf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'add'
		public Keyword getAddKeyword_0_0() { return cAddKeyword_0_0; }
		
		//'addf'
		public Keyword getAddfKeyword_0_1() { return cAddfKeyword_0_1; }
		
		//'adc'
		public Keyword getAdcKeyword_0_2() { return cAdcKeyword_0_2; }
		
		//'adcf'
		public Keyword getAdcfKeyword_0_3() { return cAdcfKeyword_0_3; }
		
		//(OperationsWithConstant | OperationsWithTreeRegisters)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//OperationsWithConstant
		public RuleCall getOperationsWithConstantParserRuleCall_1_0() { return cOperationsWithConstantParserRuleCall_1_0; }
		
		//OperationsWithTreeRegisters
		public RuleCall getOperationsWithTreeRegistersParserRuleCall_1_1() { return cOperationsWithTreeRegistersParserRuleCall_1_1; }
	}
	public class SubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Sub");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cSubKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cSubfKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cSbbKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cSbbfKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cOperationsWithConstantParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cOperationsWithTreeRegistersParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSubrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOperationsWithTreeRegistersParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Sub:
		//	('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithTreeRegisters) | 'subr'
		//	OperationsWithTreeRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithTreeRegisters) | 'subr'
		//OperationsWithTreeRegisters
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithTreeRegisters)
		public Group getGroup_0() { return cGroup_0; }
		
		//('sub' | 'subf' | 'sbb' | 'sbbf')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'sub'
		public Keyword getSubKeyword_0_0_0() { return cSubKeyword_0_0_0; }
		
		//'subf'
		public Keyword getSubfKeyword_0_0_1() { return cSubfKeyword_0_0_1; }
		
		//'sbb'
		public Keyword getSbbKeyword_0_0_2() { return cSbbKeyword_0_0_2; }
		
		//'sbbf'
		public Keyword getSbbfKeyword_0_0_3() { return cSbbfKeyword_0_0_3; }
		
		//(OperationsWithConstant | OperationsWithTreeRegisters)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//OperationsWithConstant
		public RuleCall getOperationsWithConstantParserRuleCall_0_1_0() { return cOperationsWithConstantParserRuleCall_0_1_0; }
		
		//OperationsWithTreeRegisters
		public RuleCall getOperationsWithTreeRegistersParserRuleCall_0_1_1() { return cOperationsWithTreeRegistersParserRuleCall_0_1_1; }
		
		//'subr' OperationsWithTreeRegisters
		public Group getGroup_1() { return cGroup_1; }
		
		//'subr'
		public Keyword getSubrKeyword_1_0() { return cSubrKeyword_1_0; }
		
		//OperationsWithTreeRegisters
		public RuleCall getOperationsWithTreeRegistersParserRuleCall_1_1() { return cOperationsWithTreeRegistersParserRuleCall_1_1; }
	}
	public class AnlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Anl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAnlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAnlfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithTreeRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ******************************************* Logica *************************************** / Anl:
		//	('anl' | 'anlf') OperationsWithTreeRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('anl' | 'anlf') OperationsWithTreeRegisters
		public Group getGroup() { return cGroup; }
		
		//('anl' | 'anlf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'anl'
		public Keyword getAnlKeyword_0_0() { return cAnlKeyword_0_0; }
		
		//'anlf'
		public Keyword getAnlfKeyword_0_1() { return cAnlfKeyword_0_1; }
		
		//OperationsWithTreeRegisters
		public RuleCall getOperationsWithTreeRegistersParserRuleCall_1() { return cOperationsWithTreeRegistersParserRuleCall_1; }
	}
	public class OrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Orl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cOrlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOrlfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithTreeRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Orl:
		//	('orl' | 'orlf') OperationsWithTreeRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('orl' | 'orlf') OperationsWithTreeRegisters
		public Group getGroup() { return cGroup; }
		
		//('orl' | 'orlf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'orl'
		public Keyword getOrlKeyword_0_0() { return cOrlKeyword_0_0; }
		
		//'orlf'
		public Keyword getOrlfKeyword_0_1() { return cOrlfKeyword_0_1; }
		
		//OperationsWithTreeRegisters
		public RuleCall getOperationsWithTreeRegistersParserRuleCall_1() { return cOperationsWithTreeRegistersParserRuleCall_1; }
	}
	public class XrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Xrl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cXrlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cXrlfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithTreeRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Xrl:
		//	('xrl' | 'xrlf') OperationsWithTreeRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('xrl' | 'xrlf') OperationsWithTreeRegisters
		public Group getGroup() { return cGroup; }
		
		//('xrl' | 'xrlf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'xrl'
		public Keyword getXrlKeyword_0_0() { return cXrlKeyword_0_0; }
		
		//'xrlf'
		public Keyword getXrlfKeyword_0_1() { return cXrlfKeyword_0_1; }
		
		//OperationsWithTreeRegisters
		public RuleCall getOperationsWithTreeRegistersParserRuleCall_1() { return cOperationsWithTreeRegistersParserRuleCall_1; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNotfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationWithTwoRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Not:
		//	('not' | 'notf') OperationWithTwoRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('not' | 'notf') OperationWithTwoRegisters
		public Group getGroup() { return cGroup; }
		
		//('not' | 'notf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//'notf'
		public Keyword getNotfKeyword_0_1() { return cNotfKeyword_0_1; }
		
		//OperationWithTwoRegisters
		public RuleCall getOperationWithTwoRegistersParserRuleCall_1() { return cOperationWithTwoRegistersParserRuleCall_1; }
	}
	public class ShlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Shl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOperationShiftParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Shl:
		//	'shl' OperationShift;
		@Override public ParserRule getRule() { return rule; }
		
		//'shl' OperationShift
		public Group getGroup() { return cGroup; }
		
		//'shl'
		public Keyword getShlKeyword_0() { return cShlKeyword_0; }
		
		//OperationShift
		public RuleCall getOperationShiftParserRuleCall_1() { return cOperationShiftParserRuleCall_1; }
	}
	public class ShrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Shr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOperationShiftParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Shr:
		//	'shr' OperationShift;
		@Override public ParserRule getRule() { return rule; }
		
		//'shr' OperationShift
		public Group getGroup() { return cGroup; }
		
		//'shr'
		public Keyword getShrKeyword_0() { return cShrKeyword_0; }
		
		//OperationShift
		public RuleCall getOperationShiftParserRuleCall_1() { return cOperationShiftParserRuleCall_1; }
	}
	public class RrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Rr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRrlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRrmKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithConstantParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Rr:
		//	('rrl' | 'rrm') OperationsWithConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//('rrl' | 'rrm') OperationsWithConstant
		public Group getGroup() { return cGroup; }
		
		//('rrl' | 'rrm')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rrl'
		public Keyword getRrlKeyword_0_0() { return cRrlKeyword_0_0; }
		
		//'rrm'
		public Keyword getRrmKeyword_0_1() { return cRrmKeyword_0_1; }
		
		//OperationsWithConstant
		public RuleCall getOperationsWithConstantParserRuleCall_1() { return cOperationsWithConstantParserRuleCall_1; }
	}
	public class RcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Rc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRcrKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRclKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationWithTwoRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Rc:
		//	('rcr' | 'rcl') OperationWithTwoRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('rcr' | 'rcl') OperationWithTwoRegisters
		public Group getGroup() { return cGroup; }
		
		//('rcr' | 'rcl')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rcr'
		public Keyword getRcrKeyword_0_0() { return cRcrKeyword_0_0; }
		
		//'rcl'
		public Keyword getRclKeyword_0_1() { return cRclKeyword_0_1; }
		
		//OperationWithTwoRegisters
		public RuleCall getOperationWithTwoRegistersParserRuleCall_1() { return cOperationWithTwoRegistersParserRuleCall_1; }
	}
	public class JumpOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.JumpOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cJzKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cJnzKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cJneKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cJcKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cJblKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cJncKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cJaeKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cJmpKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cJmplKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final RuleCall cOperationWithOffsetParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ************************************** Jump ********************************************** / JumpOp:
		//	('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl') OperationWithOffset;
		@Override public ParserRule getRule() { return rule; }
		
		//('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl') OperationWithOffset
		public Group getGroup() { return cGroup; }
		
		//('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'jz'
		public Keyword getJzKeyword_0_0() { return cJzKeyword_0_0; }
		
		//'je'
		public Keyword getJeKeyword_0_1() { return cJeKeyword_0_1; }
		
		//'jnz'
		public Keyword getJnzKeyword_0_2() { return cJnzKeyword_0_2; }
		
		//'jne'
		public Keyword getJneKeyword_0_3() { return cJneKeyword_0_3; }
		
		//'jc'
		public Keyword getJcKeyword_0_4() { return cJcKeyword_0_4; }
		
		//'jbl'
		public Keyword getJblKeyword_0_5() { return cJblKeyword_0_5; }
		
		//'jnc'
		public Keyword getJncKeyword_0_6() { return cJncKeyword_0_6; }
		
		//'jae'
		public Keyword getJaeKeyword_0_7() { return cJaeKeyword_0_7; }
		
		//'jmp'
		public Keyword getJmpKeyword_0_8() { return cJmpKeyword_0_8; }
		
		//'jmpl'
		public Keyword getJmplKeyword_0_9() { return cJmplKeyword_0_9; }
		
		//OperationWithOffset
		public RuleCall getOperationWithOffsetParserRuleCall_1() { return cOperationWithOffsetParserRuleCall_1; }
	}
	public class ImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Immediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegisterRegistersParserRuleCall_0_0 = (RuleCall)cRegisterAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImmediate8Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImmediate8IntOrHexOrStringParserRuleCall_2_0 = (RuleCall)cImmediate8Assignment_2.eContents().get(0);
		
		/// ****************************************************************************************** /
		/// ************************************Type Operations*************************************** / Immediate:
		//	register=Registers ',' immediate8=IntOrHexOrString;
		@Override public ParserRule getRule() { return rule; }
		
		//register=Registers ',' immediate8=IntOrHexOrString
		public Group getGroup() { return cGroup; }
		
		//register=Registers
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//Registers
		public RuleCall getRegisterRegistersParserRuleCall_0_0() { return cRegisterRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//immediate8=IntOrHexOrString
		public Assignment getImmediate8Assignment_2() { return cImmediate8Assignment_2; }
		
		//IntOrHexOrString
		public RuleCall getImmediate8IntOrHexOrStringParserRuleCall_2_0() { return cImmediate8IntOrHexOrStringParserRuleCall_2_0; }
	}
	public class DirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Direct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegisterRegistersParserRuleCall_0_0 = (RuleCall)cRegisterAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//Direct:
		//	register=Registers ',' (INT | HEX | STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//register=Registers ',' (INT | HEX | STRING)
		public Group getGroup() { return cGroup; }
		
		//register=Registers
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//Registers
		public RuleCall getRegisterRegistersParserRuleCall_0_0() { return cRegisterRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//(INT | HEX | STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_2_1() { return cHEXTerminalRuleCall_2_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_2() { return cSTRINGTerminalRuleCall_2_2; }
	}
	public class IndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Indexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegistersParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRbxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRbxRegistersParserRuleCall_3_0 = (RuleCall)cRbxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdx3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdx3IntOrHexOrStringParserRuleCall_5_0 = (RuleCall)cIdx3Assignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Indexed:
		//	rd=Registers ',' '[' rbx=Registers ',' idx3=IntOrHexOrString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Registers ',' '[' rbx=Registers ',' idx3=IntOrHexOrString ']'
		public Group getGroup() { return cGroup; }
		
		//rd=Registers
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Registers
		public RuleCall getRdRegistersParserRuleCall_0_0() { return cRdRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rbx=Registers
		public Assignment getRbxAssignment_3() { return cRbxAssignment_3; }
		
		//Registers
		public RuleCall getRbxRegistersParserRuleCall_3_0() { return cRbxRegistersParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//idx3=IntOrHexOrString
		public Assignment getIdx3Assignment_5() { return cIdx3Assignment_5; }
		
		//IntOrHexOrString
		public RuleCall getIdx3IntOrHexOrStringParserRuleCall_5_0() { return cIdx3IntOrHexOrStringParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class BasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.BasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegistersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRbxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRbxRegistersParserRuleCall_3_0 = (RuleCall)cRbxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRixAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRixRegistersParserRuleCall_5_0 = (RuleCall)cRixAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasedIndexed:
		//	Registers ',' '[' rbx=Registers ',' rix=Registers ']';
		@Override public ParserRule getRule() { return rule; }
		
		//Registers ',' '[' rbx=Registers ',' rix=Registers ']'
		public Group getGroup() { return cGroup; }
		
		//Registers
		public RuleCall getRegistersParserRuleCall_0() { return cRegistersParserRuleCall_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rbx=Registers
		public Assignment getRbxAssignment_3() { return cRbxAssignment_3; }
		
		//Registers
		public RuleCall getRbxRegistersParserRuleCall_3_0() { return cRbxRegistersParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//rix=Registers
		public Assignment getRixAssignment_5() { return cRixAssignment_5; }
		
		//Registers
		public RuleCall getRixRegistersParserRuleCall_5_0() { return cRixRegistersParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class IntOrHexOrStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.IntOrHexOrString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIntAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIntNUMBTerminalRuleCall_0_1_0 = (RuleCall)cIntAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHexHEXTerminalRuleCall_1_1_0 = (RuleCall)cHexAssignment_1_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//IntOrHexOrString:
		//	'#' int=NUMB | '#' hex=HEX | label=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' int=NUMB | '#' hex=HEX | label=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'#' int=NUMB
		public Group getGroup_0() { return cGroup_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }
		
		//int=NUMB
		public Assignment getIntAssignment_0_1() { return cIntAssignment_0_1; }
		
		//NUMB
		public RuleCall getIntNUMBTerminalRuleCall_0_1_0() { return cIntNUMBTerminalRuleCall_0_1_0; }
		
		//'#' hex=HEX
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//hex=HEX
		public Assignment getHexAssignment_1_1() { return cHexAssignment_1_1; }
		
		//HEX
		public RuleCall getHexHEXTerminalRuleCall_1_1_0() { return cHexHEXTerminalRuleCall_1_1_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
	}
	public class OperationWithTwoRegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationWithTwoRegisters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegistersParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegistersParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		
		//OperationWithTwoRegisters:
		//	rd=Registers ',' rm=Registers;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Registers ',' rm=Registers
		public Group getGroup() { return cGroup; }
		
		//rd=Registers
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Registers
		public RuleCall getRdRegistersParserRuleCall_0_0() { return cRdRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Registers
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Registers
		public RuleCall getRmRegistersParserRuleCall_2_0() { return cRmRegistersParserRuleCall_2_0; }
	}
	public class OperationsWithTreeRegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationsWithTreeRegisters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegistersParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegistersParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRnRegistersParserRuleCall_4_0 = (RuleCall)cRnAssignment_4.eContents().get(0);
		
		//OperationsWithTreeRegisters:
		//	rd=Registers ',' rm=Registers ',' rn=Registers;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Registers ',' rm=Registers ',' rn=Registers
		public Group getGroup() { return cGroup; }
		
		//rd=Registers
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Registers
		public RuleCall getRdRegistersParserRuleCall_0_0() { return cRdRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Registers
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Registers
		public RuleCall getRmRegistersParserRuleCall_2_0() { return cRmRegistersParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rn=Registers
		public Assignment getRnAssignment_4() { return cRnAssignment_4; }
		
		//Registers
		public RuleCall getRnRegistersParserRuleCall_4_0() { return cRnRegistersParserRuleCall_4_0; }
	}
	public class OperationsWithConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationsWithConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegistersParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegistersParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConst4Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConst4IntOrHexOrStringParserRuleCall_4_0 = (RuleCall)cConst4Assignment_4.eContents().get(0);
		
		//OperationsWithConstant:
		//	rd=Registers ',' rm=Registers ',' const4=IntOrHexOrString;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Registers ',' rm=Registers ',' const4=IntOrHexOrString
		public Group getGroup() { return cGroup; }
		
		//rd=Registers
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Registers
		public RuleCall getRdRegistersParserRuleCall_0_0() { return cRdRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Registers
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Registers
		public RuleCall getRmRegistersParserRuleCall_2_0() { return cRmRegistersParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//const4=IntOrHexOrString
		public Assignment getConst4Assignment_4() { return cConst4Assignment_4; }
		
		//IntOrHexOrString
		public RuleCall getConst4IntOrHexOrStringParserRuleCall_4_0() { return cConst4IntOrHexOrStringParserRuleCall_4_0; }
	}
	public class OperationShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegistersParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegistersParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConst4Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConst4IntOrHexOrStringParserRuleCall_4_0 = (RuleCall)cConst4Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSinAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSinBINTerminalRuleCall_6_0 = (RuleCall)cSinAssignment_6.eContents().get(0);
		
		//OperationShift:
		//	rd=Registers ',' rm=Registers ',' const4=IntOrHexOrString ',' sin=BIN;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Registers ',' rm=Registers ',' const4=IntOrHexOrString ',' sin=BIN
		public Group getGroup() { return cGroup; }
		
		//rd=Registers
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Registers
		public RuleCall getRdRegistersParserRuleCall_0_0() { return cRdRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Registers
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Registers
		public RuleCall getRmRegistersParserRuleCall_2_0() { return cRmRegistersParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//const4=IntOrHexOrString
		public Assignment getConst4Assignment_4() { return cConst4Assignment_4; }
		
		//IntOrHexOrString
		public RuleCall getConst4IntOrHexOrStringParserRuleCall_4_0() { return cConst4IntOrHexOrStringParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//sin=BIN
		public Assignment getSinAssignment_6() { return cSinAssignment_6; }
		
		//BIN
		public RuleCall getSinBINTerminalRuleCall_6_0() { return cSinBINTerminalRuleCall_6_0; }
	}
	public class OperationWithOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OperationWithOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRbxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRbxRegistersParserRuleCall_0_0 = (RuleCall)cRbxAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOffset8Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOffset8IntOrHexOrStringParserRuleCall_2_0 = (RuleCall)cOffset8Assignment_2.eContents().get(0);
		
		////const4 é possivel usar label?????
		//OperationWithOffset:
		//	rbx=Registers ',' offset8=IntOrHexOrString;
		@Override public ParserRule getRule() { return rule; }
		
		//rbx=Registers ',' offset8=IntOrHexOrString
		public Group getGroup() { return cGroup; }
		
		//rbx=Registers
		public Assignment getRbxAssignment_0() { return cRbxAssignment_0; }
		
		//Registers
		public RuleCall getRbxRegistersParserRuleCall_0_0() { return cRbxRegistersParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//offset8=IntOrHexOrString
		public Assignment getOffset8Assignment_2() { return cOffset8Assignment_2; }
		
		//IntOrHexOrString
		public RuleCall getOffset8IntOrHexOrStringParserRuleCall_2_0() { return cOffset8IntOrHexOrStringParserRuleCall_2_0; }
	}
	public class RegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Registers");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueR0Keyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueR1Keyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueR2Keyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueR3Keyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueR4Keyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueR5Keyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueR6Keyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueR7Keyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		private final Keyword cValuePSWKeyword_0_8 = (Keyword)cValueAlternatives_0.eContents().get(8);
		
		/// ****************************************************************************************** /
		/// ***********************************************Utils************************************** / Registers:
		//	value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'PSW');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'PSW')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'PSW')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'r0'
		public Keyword getValueR0Keyword_0_0() { return cValueR0Keyword_0_0; }
		
		//'r1'
		public Keyword getValueR1Keyword_0_1() { return cValueR1Keyword_0_1; }
		
		//'r2'
		public Keyword getValueR2Keyword_0_2() { return cValueR2Keyword_0_2; }
		
		//'r3'
		public Keyword getValueR3Keyword_0_3() { return cValueR3Keyword_0_3; }
		
		//'r4'
		public Keyword getValueR4Keyword_0_4() { return cValueR4Keyword_0_4; }
		
		//'r5'
		public Keyword getValueR5Keyword_0_5() { return cValueR5Keyword_0_5; }
		
		//'r6'
		public Keyword getValueR6Keyword_0_6() { return cValueR6Keyword_0_6; }
		
		//'r7'
		public Keyword getValueR7Keyword_0_7() { return cValueR7Keyword_0_7; }
		
		//'PSW'
		public Keyword getValuePSWKeyword_0_8() { return cValuePSWKeyword_0_8; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOCTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBINTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Number:
		//	INT | HEX | OCT | BIN;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | HEX | OCT | BIN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_1() { return cHEXTerminalRuleCall_1; }
		
		//OCT
		public RuleCall getOCTTerminalRuleCall_2() { return cOCTTerminalRuleCall_2; }
		
		//BIN
		public RuleCall getBINTerminalRuleCall_3() { return cBINTerminalRuleCall_3; }
	}
	
	
	private final PDS16ASMElements pPDS16ASM;
	private final StatementElements pStatement;
	private final InstructionsElements pInstructions;
	private final CommentElements pComment;
	private final LoadElements pLoad;
	private final StoreElements pStore;
	private final AritmeticaElements pAritmetica;
	private final LogicaElements pLogica;
	private final JumpElements pJump;
	private final LdImmediateElements pLdImmediate;
	private final LdDirectElements pLdDirect;
	private final LdIndexedElements pLdIndexed;
	private final LdBasedIndexedElements pLdBasedIndexed;
	private final StDirectElements pStDirect;
	private final StIndexedElements pStIndexed;
	private final StBasedIndexedElements pStBasedIndexed;
	private final AddElements pAdd;
	private final SubElements pSub;
	private final AnlElements pAnl;
	private final OrlElements pOrl;
	private final XrlElements pXrl;
	private final NotElements pNot;
	private final ShlElements pShl;
	private final ShrElements pShr;
	private final RrElements pRr;
	private final RcElements pRc;
	private final JumpOpElements pJumpOp;
	private final ImmediateElements pImmediate;
	private final DirectElements pDirect;
	private final IndexedElements pIndexed;
	private final BasedIndexedElements pBasedIndexed;
	private final IntOrHexOrStringElements pIntOrHexOrString;
	private final OperationWithTwoRegistersElements pOperationWithTwoRegisters;
	private final OperationsWithTreeRegistersElements pOperationsWithTreeRegisters;
	private final OperationsWithConstantElements pOperationsWithConstant;
	private final OperationShiftElements pOperationShift;
	private final OperationWithOffsetElements pOperationWithOffset;
	private final RegistersElements pRegisters;
	private final NumberElements pNumber;
	private final TerminalRule tHEX;
	private final TerminalRule tNUMB;
	private final TerminalRule tOCT;
	private final TerminalRule tBIN;
	private final TerminalRule tCOMT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Pds16asmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPDS16ASM = new PDS16ASMElements();
		this.pStatement = new StatementElements();
		this.pInstructions = new InstructionsElements();
		this.pComment = new CommentElements();
		this.pLoad = new LoadElements();
		this.pStore = new StoreElements();
		this.pAritmetica = new AritmeticaElements();
		this.pLogica = new LogicaElements();
		this.pJump = new JumpElements();
		this.pLdImmediate = new LdImmediateElements();
		this.pLdDirect = new LdDirectElements();
		this.pLdIndexed = new LdIndexedElements();
		this.pLdBasedIndexed = new LdBasedIndexedElements();
		this.pStDirect = new StDirectElements();
		this.pStIndexed = new StIndexedElements();
		this.pStBasedIndexed = new StBasedIndexedElements();
		this.pAdd = new AddElements();
		this.pSub = new SubElements();
		this.pAnl = new AnlElements();
		this.pOrl = new OrlElements();
		this.pXrl = new XrlElements();
		this.pNot = new NotElements();
		this.pShl = new ShlElements();
		this.pShr = new ShrElements();
		this.pRr = new RrElements();
		this.pRc = new RcElements();
		this.pJumpOp = new JumpOpElements();
		this.pImmediate = new ImmediateElements();
		this.pDirect = new DirectElements();
		this.pIndexed = new IndexedElements();
		this.pBasedIndexed = new BasedIndexedElements();
		this.pIntOrHexOrString = new IntOrHexOrStringElements();
		this.pOperationWithTwoRegisters = new OperationWithTwoRegistersElements();
		this.pOperationsWithTreeRegisters = new OperationsWithTreeRegistersElements();
		this.pOperationsWithConstant = new OperationsWithConstantElements();
		this.pOperationShift = new OperationShiftElements();
		this.pOperationWithOffset = new OperationWithOffsetElements();
		this.pRegisters = new RegistersElements();
		this.pNumber = new NumberElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.HEX");
		this.tNUMB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.NUMB");
		this.tOCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.OCT");
		this.tBIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.BIN");
		this.tCOMT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.Pds16asm.COMT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.pds16.Pds16asm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PDS16ASM:
	//	instuctions+=Statement*;
	public PDS16ASMElements getPDS16ASMAccess() {
		return pPDS16ASM;
	}
	
	public ParserRule getPDS16ASMRule() {
		return getPDS16ASMAccess().getRule();
	}
	
	//Statement:
	//	Instructions | Comment / * /| Label | Directive* /;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	/// *... Falta aqui código teu! * / Instructions:
	//	Load | Store | Aritmetica | Logica | Jump;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}
	
	//Comment:
	//	comment=COMT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Load:
	//	LdImmediate | LdDirect | LdIndexed | LdBasedIndexed;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Store:
	//	StDirect | StIndexed | StBasedIndexed;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Aritmetica:
	//	Add | Sub;
	public AritmeticaElements getAritmeticaAccess() {
		return pAritmetica;
	}
	
	public ParserRule getAritmeticaRule() {
		return getAritmeticaAccess().getRule();
	}
	
	//Logica:
	//	Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc;
	public LogicaElements getLogicaAccess() {
		return pLogica;
	}
	
	public ParserRule getLogicaRule() {
		return getLogicaAccess().getRule();
	}
	
	//Jump:
	//	JumpOp;
	public JumpElements getJumpAccess() {
		return pJump;
	}
	
	public ParserRule getJumpRule() {
		return getJumpAccess().getRule();
	}
	
	/// **************************************Load************************************************ / LdImmediate:
	//	('ldi' | 'ldih') Immediate;
	public LdImmediateElements getLdImmediateAccess() {
		return pLdImmediate;
	}
	
	public ParserRule getLdImmediateRule() {
		return getLdImmediateAccess().getRule();
	}
	
	//LdDirect:
	//	('ld' | 'ldb') Direct;
	public LdDirectElements getLdDirectAccess() {
		return pLdDirect;
	}
	
	public ParserRule getLdDirectRule() {
		return getLdDirectAccess().getRule();
	}
	
	//LdIndexed:
	//	('ld' | 'ldb') Indexed;
	public LdIndexedElements getLdIndexedAccess() {
		return pLdIndexed;
	}
	
	public ParserRule getLdIndexedRule() {
		return getLdIndexedAccess().getRule();
	}
	
	//LdBasedIndexed:
	//	('ld' | 'ldb') BasedIndexed;
	public LdBasedIndexedElements getLdBasedIndexedAccess() {
		return pLdBasedIndexed;
	}
	
	public ParserRule getLdBasedIndexedRule() {
		return getLdBasedIndexedAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ****************************************Store ******************************************** / StDirect:
	//	('st' | 'stb') Direct;
	public StDirectElements getStDirectAccess() {
		return pStDirect;
	}
	
	public ParserRule getStDirectRule() {
		return getStDirectAccess().getRule();
	}
	
	//StIndexed:
	//	('st' | 'stb') Indexed;
	public StIndexedElements getStIndexedAccess() {
		return pStIndexed;
	}
	
	public ParserRule getStIndexedRule() {
		return getStIndexedAccess().getRule();
	}
	
	//StBasedIndexed:
	//	('st' | 'stb') BasedIndexed;
	public StBasedIndexedElements getStBasedIndexedAccess() {
		return pStBasedIndexed;
	}
	
	public ParserRule getStBasedIndexedRule() {
		return getStBasedIndexedAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ******************************************* Aritmetica *********************************** / Add:
	//	('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithTreeRegisters);
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Sub:
	//	('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithTreeRegisters) | 'subr'
	//	OperationsWithTreeRegisters;
	public SubElements getSubAccess() {
		return pSub;
	}
	
	public ParserRule getSubRule() {
		return getSubAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ******************************************* Logica *************************************** / Anl:
	//	('anl' | 'anlf') OperationsWithTreeRegisters;
	public AnlElements getAnlAccess() {
		return pAnl;
	}
	
	public ParserRule getAnlRule() {
		return getAnlAccess().getRule();
	}
	
	//Orl:
	//	('orl' | 'orlf') OperationsWithTreeRegisters;
	public OrlElements getOrlAccess() {
		return pOrl;
	}
	
	public ParserRule getOrlRule() {
		return getOrlAccess().getRule();
	}
	
	//Xrl:
	//	('xrl' | 'xrlf') OperationsWithTreeRegisters;
	public XrlElements getXrlAccess() {
		return pXrl;
	}
	
	public ParserRule getXrlRule() {
		return getXrlAccess().getRule();
	}
	
	//Not:
	//	('not' | 'notf') OperationWithTwoRegisters;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Shl:
	//	'shl' OperationShift;
	public ShlElements getShlAccess() {
		return pShl;
	}
	
	public ParserRule getShlRule() {
		return getShlAccess().getRule();
	}
	
	//Shr:
	//	'shr' OperationShift;
	public ShrElements getShrAccess() {
		return pShr;
	}
	
	public ParserRule getShrRule() {
		return getShrAccess().getRule();
	}
	
	//Rr:
	//	('rrl' | 'rrm') OperationsWithConstant;
	public RrElements getRrAccess() {
		return pRr;
	}
	
	public ParserRule getRrRule() {
		return getRrAccess().getRule();
	}
	
	//Rc:
	//	('rcr' | 'rcl') OperationWithTwoRegisters;
	public RcElements getRcAccess() {
		return pRc;
	}
	
	public ParserRule getRcRule() {
		return getRcAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ************************************** Jump ********************************************** / JumpOp:
	//	('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl') OperationWithOffset;
	public JumpOpElements getJumpOpAccess() {
		return pJumpOp;
	}
	
	public ParserRule getJumpOpRule() {
		return getJumpOpAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ************************************Type Operations*************************************** / Immediate:
	//	register=Registers ',' immediate8=IntOrHexOrString;
	public ImmediateElements getImmediateAccess() {
		return pImmediate;
	}
	
	public ParserRule getImmediateRule() {
		return getImmediateAccess().getRule();
	}
	
	//Direct:
	//	register=Registers ',' (INT | HEX | STRING);
	public DirectElements getDirectAccess() {
		return pDirect;
	}
	
	public ParserRule getDirectRule() {
		return getDirectAccess().getRule();
	}
	
	//Indexed:
	//	rd=Registers ',' '[' rbx=Registers ',' idx3=IntOrHexOrString ']';
	public IndexedElements getIndexedAccess() {
		return pIndexed;
	}
	
	public ParserRule getIndexedRule() {
		return getIndexedAccess().getRule();
	}
	
	//BasedIndexed:
	//	Registers ',' '[' rbx=Registers ',' rix=Registers ']';
	public BasedIndexedElements getBasedIndexedAccess() {
		return pBasedIndexed;
	}
	
	public ParserRule getBasedIndexedRule() {
		return getBasedIndexedAccess().getRule();
	}
	
	//IntOrHexOrString:
	//	'#' int=NUMB | '#' hex=HEX | label=STRING;
	public IntOrHexOrStringElements getIntOrHexOrStringAccess() {
		return pIntOrHexOrString;
	}
	
	public ParserRule getIntOrHexOrStringRule() {
		return getIntOrHexOrStringAccess().getRule();
	}
	
	//OperationWithTwoRegisters:
	//	rd=Registers ',' rm=Registers;
	public OperationWithTwoRegistersElements getOperationWithTwoRegistersAccess() {
		return pOperationWithTwoRegisters;
	}
	
	public ParserRule getOperationWithTwoRegistersRule() {
		return getOperationWithTwoRegistersAccess().getRule();
	}
	
	//OperationsWithTreeRegisters:
	//	rd=Registers ',' rm=Registers ',' rn=Registers;
	public OperationsWithTreeRegistersElements getOperationsWithTreeRegistersAccess() {
		return pOperationsWithTreeRegisters;
	}
	
	public ParserRule getOperationsWithTreeRegistersRule() {
		return getOperationsWithTreeRegistersAccess().getRule();
	}
	
	//OperationsWithConstant:
	//	rd=Registers ',' rm=Registers ',' const4=IntOrHexOrString;
	public OperationsWithConstantElements getOperationsWithConstantAccess() {
		return pOperationsWithConstant;
	}
	
	public ParserRule getOperationsWithConstantRule() {
		return getOperationsWithConstantAccess().getRule();
	}
	
	//OperationShift:
	//	rd=Registers ',' rm=Registers ',' const4=IntOrHexOrString ',' sin=BIN;
	public OperationShiftElements getOperationShiftAccess() {
		return pOperationShift;
	}
	
	public ParserRule getOperationShiftRule() {
		return getOperationShiftAccess().getRule();
	}
	
	////const4 é possivel usar label?????
	//OperationWithOffset:
	//	rbx=Registers ',' offset8=IntOrHexOrString;
	public OperationWithOffsetElements getOperationWithOffsetAccess() {
		return pOperationWithOffset;
	}
	
	public ParserRule getOperationWithOffsetRule() {
		return getOperationWithOffsetAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ***********************************************Utils************************************** / Registers:
	//	value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'PSW');
	public RegistersElements getRegistersAccess() {
		return pRegisters;
	}
	
	public ParserRule getRegistersRule() {
		return getRegistersAccess().getRule();
	}
	
	//Number:
	//	INT | HEX | OCT | BIN;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal HEX:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal NUMB:
	//	'0'..'9'+;
	public TerminalRule getNUMBRule() {
		return tNUMB;
	}
	
	//terminal OCT:
	//	'0' | '1'..'7' '0'..'7'*;
	public TerminalRule getOCTRule() {
		return tOCT;
	}
	
	//terminal BIN:
	//	'0' | '1'+;
	public TerminalRule getBINRule() {
		return tBIN;
	}
	
	//terminal COMT:
	//	';'->'\n';
	public TerminalRule getCOMTRule() {
		return tCOMT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
