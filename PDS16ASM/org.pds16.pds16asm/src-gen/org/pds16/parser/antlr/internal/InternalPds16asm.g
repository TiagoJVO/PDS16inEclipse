/*
 * generated by Xtext 2.9.2
 */
grammar InternalPds16asm;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.pds16.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.pds16.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.pds16.services.Pds16asmGrammarAccess;

}

@parser::members {

 	private Pds16asmGrammarAccess grammarAccess;

    public InternalPds16asmParser(TokenStream input, Pds16asmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected Pds16asmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getOperationsOperationsParserRuleCall_0());
			}
			lv_operations_0_0=ruleOperations
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"operations",
					lv_operations_0_0,
					"org.pds16.Pds16asm.Operations");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleOperations
entryRuleOperations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationsRule()); }
	iv_ruleOperations=ruleOperations
	{ $current=$iv_ruleOperations.current; }
	EOF;

// Rule Operations
ruleOperations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationsAccess().getOperationLDIParserRuleCall_0());
		}
		this_OperationLDI_0=ruleOperationLDI
		{
			$current = $this_OperationLDI_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationsAccess().getOperationLD2ParserRuleCall_1());
		}
		this_OperationLD2_1=ruleOperationLD2
		{
			$current = $this_OperationLD2_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperationLDI
entryRuleOperationLDI returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationLDIRule()); }
	iv_ruleOperationLDI=ruleOperationLDI
	{ $current=$iv_ruleOperationLDI.current; }
	EOF;

// Rule OperationLDI
ruleOperationLDI returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LDI'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationLDIAccess().getLDIKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationLDIAccess().getRegisterRegistersParserRuleCall_1_0());
				}
				lv_register_1_0=ruleRegisters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationLDIRule());
					}
					set(
						$current,
						"register",
						lv_register_1_0,
						"org.pds16.Pds16asm.Registers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationLDIAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationLDIAccess().getImmediate8HexaDecimalParserRuleCall_3_0());
				}
				lv_immediate8_3_0=ruleHexaDecimal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationLDIRule());
					}
					set(
						$current,
						"immediate8",
						lv_immediate8_3_0,
						"org.pds16.Pds16asm.HexaDecimal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getOperationLDIAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleOperationLD2
entryRuleOperationLD2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationLD2Rule()); }
	iv_ruleOperationLD2=ruleOperationLD2
	{ $current=$iv_ruleOperationLD2.current; }
	EOF;

// Rule OperationLD2
ruleOperationLD2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LD'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationLD2Access().getLDKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationLD2Access().getRegisterRegistersParserRuleCall_1_0());
				}
				lv_register_1_0=ruleRegisters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationLD2Rule());
					}
					set(
						$current,
						"register",
						lv_register_1_0,
						"org.pds16.Pds16asm.Registers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationLD2Access().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationLD2Access().getIndexedIndexedParserRuleCall_3_0());
				}
				lv_indexed_3_0=ruleIndexed
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationLD2Rule());
					}
					set(
						$current,
						"indexed",
						lv_indexed_3_0,
						"org.pds16.Pds16asm.Indexed");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getOperationLD2Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleIndexed
entryRuleIndexed returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexedRule()); }
	iv_ruleIndexed=ruleIndexed
	{ $current=$iv_ruleIndexed.current; }
	EOF;

// Rule Indexed
ruleIndexed returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexedAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedAccess().getRegRegistersParserRuleCall_1_0());
				}
				lv_reg_1_0=ruleRegisters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedRule());
					}
					set(
						$current,
						"reg",
						lv_reg_1_0,
						"org.pds16.Pds16asm.Registers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexedAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedAccess().getImediate8HexaDecimalParserRuleCall_3_0());
				}
				lv_imediate8_3_0=ruleHexaDecimal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedRule());
					}
					set(
						$current,
						"imediate8",
						lv_imediate8_3_0,
						"org.pds16.Pds16asm.HexaDecimal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getIndexedAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleHexaDecimal
entryRuleHexaDecimal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHexaDecimalRule()); }
	iv_ruleHexaDecimal=ruleHexaDecimal
	{ $current=$iv_ruleHexaDecimal.current; }
	EOF;

// Rule HexaDecimal
ruleHexaDecimal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getHexaDecimalAccess().getNumberSignKeyword_0());
		}
		(
			(
				lv_number_1_0=RULE_ID
				{
					newLeafNode(lv_number_1_0, grammarAccess.getHexaDecimalAccess().getNumberIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHexaDecimalRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.pds16.Pds16asm.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRegisters
entryRuleRegisters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegistersRule()); }
	iv_ruleRegisters=ruleRegisters
	{ $current=$iv_ruleRegisters.current; }
	EOF;

// Rule Registers
ruleRegisters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegistersAccess().getR1ParserRuleCall_0());
		}
		this_R1_0=ruleR1
		{
			$current = $this_R1_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRegistersAccess().getR2ParserRuleCall_1());
		}
		this_R2_1=ruleR2
		{
			$current = $this_R2_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleR1
entryRuleR1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getR1Rule()); }
	iv_ruleR1=ruleR1
	{ $current=$iv_ruleR1.current; }
	EOF;

// Rule R1
ruleR1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0='R1'
			{
				newLeafNode(lv_value_0_0, grammarAccess.getR1Access().getValueR1Keyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getR1Rule());
				}
				setWithLastConsumed($current, "value", lv_value_0_0, "R1");
			}
		)
	)
;

// Entry rule entryRuleR2
entryRuleR2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getR2Rule()); }
	iv_ruleR2=ruleR2
	{ $current=$iv_ruleR2.current; }
	EOF;

// Rule R2
ruleR2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0='R2'
			{
				newLeafNode(lv_value_0_0, grammarAccess.getR2Access().getValueR2Keyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getR2Rule());
				}
				setWithLastConsumed($current, "value", lv_value_0_0, "R2");
			}
		)
	)
;

RULE_ID : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
