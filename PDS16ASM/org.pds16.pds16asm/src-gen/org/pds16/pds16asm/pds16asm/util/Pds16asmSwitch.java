/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.pds16.pds16asm.pds16asm.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.pds16.pds16asm.pds16asm.Add;
import org.pds16.pds16asm.pds16asm.Anl;
import org.pds16.pds16asm.pds16asm.Aritmetica;
import org.pds16.pds16asm.pds16asm.Ascii;
import org.pds16.pds16asm.pds16asm.Asciiz;
import org.pds16.pds16asm.pds16asm.BasedIndexed;
import org.pds16.pds16asm.pds16asm.Bss;
import org.pds16.pds16asm.pds16asm.Const4OrLabel;
import org.pds16.pds16asm.pds16asm.Data;
import org.pds16.pds16asm.pds16asm.Direct;
import org.pds16.pds16asm.pds16asm.DirectOrLabel;
import org.pds16.pds16asm.pds16asm.Directive;
import org.pds16.pds16asm.pds16asm.End;
import org.pds16.pds16asm.pds16asm.Equ;
import org.pds16.pds16asm.pds16asm.Expression;
import org.pds16.pds16asm.pds16asm.Idx3OrLabel;
import org.pds16.pds16asm.pds16asm.Immediate;
import org.pds16.pds16asm.pds16asm.Immediate8OrLabel;
import org.pds16.pds16asm.pds16asm.Indexed;
import org.pds16.pds16asm.pds16asm.Instructions;
import org.pds16.pds16asm.pds16asm.Jump;
import org.pds16.pds16asm.pds16asm.JumpOp;
import org.pds16.pds16asm.pds16asm.Label;
import org.pds16.pds16asm.pds16asm.LabelDirective;
import org.pds16.pds16asm.pds16asm.LdBasedIndexed;
import org.pds16.pds16asm.pds16asm.LdDirect;
import org.pds16.pds16asm.pds16asm.LdImmediate;
import org.pds16.pds16asm.pds16asm.LdIndexed;
import org.pds16.pds16asm.pds16asm.Load;
import org.pds16.pds16asm.pds16asm.Logica;
import org.pds16.pds16asm.pds16asm.LowOrHight;
import org.pds16.pds16asm.pds16asm.Nop;
import org.pds16.pds16asm.pds16asm.Not;
import org.pds16.pds16asm.pds16asm.Offset8OrLabel;
import org.pds16.pds16asm.pds16asm.OperationShift;
import org.pds16.pds16asm.pds16asm.OperationWithOffset;
import org.pds16.pds16asm.pds16asm.OperationWithTwoRegisters;
import org.pds16.pds16asm.pds16asm.OperationsWithConstant;
import org.pds16.pds16asm.pds16asm.OperationsWithTreeRegisters;
import org.pds16.pds16asm.pds16asm.Org;
import org.pds16.pds16asm.pds16asm.Orl;
import org.pds16.pds16asm.pds16asm.PDS16ASM;
import org.pds16.pds16asm.pds16asm.Pds16asmPackage;
import org.pds16.pds16asm.pds16asm.Rc;
import org.pds16.pds16asm.pds16asm.Ret;
import org.pds16.pds16asm.pds16asm.Rr;
import org.pds16.pds16asm.pds16asm.Section;
import org.pds16.pds16asm.pds16asm.Set;
import org.pds16.pds16asm.pds16asm.Shl;
import org.pds16.pds16asm.pds16asm.Shr;
import org.pds16.pds16asm.pds16asm.Space;
import org.pds16.pds16asm.pds16asm.StBasedIndexed;
import org.pds16.pds16asm.pds16asm.StDirect;
import org.pds16.pds16asm.pds16asm.StIndexed;
import org.pds16.pds16asm.pds16asm.Statement;
import org.pds16.pds16asm.pds16asm.Store;
import org.pds16.pds16asm.pds16asm.Sub;
import org.pds16.pds16asm.pds16asm.Text;
import org.pds16.pds16asm.pds16asm.Word;
import org.pds16.pds16asm.pds16asm.Xrl;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.pds16.pds16asm.pds16asm.Pds16asmPackage
 * @generated
 */
public class Pds16asmSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Pds16asmPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pds16asmSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = Pds16asmPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case Pds16asmPackage.PDS16ASM:
      {
        PDS16ASM pds16ASM = (PDS16ASM)theEObject;
        T result = casePDS16ASM(pds16ASM);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LABEL:
      {
        Label label = (Label)theEObject;
        T result = caseLabel(label);
        if (result == null) result = caseStatement(label);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.DIRECTIVE:
      {
        Directive directive = (Directive)theEObject;
        T result = caseDirective(directive);
        if (result == null) result = caseStatement(directive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LABEL_DIRECTIVE:
      {
        LabelDirective labelDirective = (LabelDirective)theEObject;
        T result = caseLabelDirective(labelDirective);
        if (result == null) result = caseDirective(labelDirective);
        if (result == null) result = caseStatement(labelDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.BSS:
      {
        Bss bss = (Bss)theEObject;
        T result = caseBss(bss);
        if (result == null) result = caseDirective(bss);
        if (result == null) result = caseStatement(bss);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.DATA:
      {
        Data data = (Data)theEObject;
        T result = caseData(data);
        if (result == null) result = caseDirective(data);
        if (result == null) result = caseStatement(data);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.END:
      {
        End end = (End)theEObject;
        T result = caseEnd(end);
        if (result == null) result = caseDirective(end);
        if (result == null) result = caseStatement(end);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.TEXT:
      {
        Text text = (Text)theEObject;
        T result = caseText(text);
        if (result == null) result = caseDirective(text);
        if (result == null) result = caseStatement(text);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ASCII:
      {
        Ascii ascii = (Ascii)theEObject;
        T result = caseAscii(ascii);
        if (result == null) result = caseLabelDirective(ascii);
        if (result == null) result = caseDirective(ascii);
        if (result == null) result = caseStatement(ascii);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ASCIIZ:
      {
        Asciiz asciiz = (Asciiz)theEObject;
        T result = caseAsciiz(asciiz);
        if (result == null) result = caseLabelDirective(asciiz);
        if (result == null) result = caseDirective(asciiz);
        if (result == null) result = caseStatement(asciiz);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.BYTE:
      {
        org.pds16.pds16asm.pds16asm.Byte byte_ = (org.pds16.pds16asm.pds16asm.Byte)theEObject;
        T result = caseByte(byte_);
        if (result == null) result = caseLabelDirective(byte_);
        if (result == null) result = caseDirective(byte_);
        if (result == null) result = caseStatement(byte_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.WORD:
      {
        Word word = (Word)theEObject;
        T result = caseWord(word);
        if (result == null) result = caseLabelDirective(word);
        if (result == null) result = caseDirective(word);
        if (result == null) result = caseStatement(word);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.SPACE:
      {
        Space space = (Space)theEObject;
        T result = caseSpace(space);
        if (result == null) result = caseLabelDirective(space);
        if (result == null) result = caseDirective(space);
        if (result == null) result = caseStatement(space);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.SET:
      {
        Set set = (Set)theEObject;
        T result = caseSet(set);
        if (result == null) result = caseDirective(set);
        if (result == null) result = caseStatement(set);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.SECTION:
      {
        Section section = (Section)theEObject;
        T result = caseSection(section);
        if (result == null) result = caseDirective(section);
        if (result == null) result = caseStatement(section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ORG:
      {
        Org org = (Org)theEObject;
        T result = caseOrg(org);
        if (result == null) result = caseDirective(org);
        if (result == null) result = caseStatement(org);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.EQU:
      {
        Equ equ = (Equ)theEObject;
        T result = caseEqu(equ);
        if (result == null) result = caseDirective(equ);
        if (result == null) result = caseStatement(equ);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.INSTRUCTIONS:
      {
        Instructions instructions = (Instructions)theEObject;
        T result = caseInstructions(instructions);
        if (result == null) result = caseStatement(instructions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LOAD:
      {
        Load load = (Load)theEObject;
        T result = caseLoad(load);
        if (result == null) result = caseInstructions(load);
        if (result == null) result = caseStatement(load);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.STORE:
      {
        Store store = (Store)theEObject;
        T result = caseStore(store);
        if (result == null) result = caseInstructions(store);
        if (result == null) result = caseStatement(store);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ARITMETICA:
      {
        Aritmetica aritmetica = (Aritmetica)theEObject;
        T result = caseAritmetica(aritmetica);
        if (result == null) result = caseInstructions(aritmetica);
        if (result == null) result = caseStatement(aritmetica);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LOGICA:
      {
        Logica logica = (Logica)theEObject;
        T result = caseLogica(logica);
        if (result == null) result = caseInstructions(logica);
        if (result == null) result = caseStatement(logica);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.JUMP:
      {
        Jump jump = (Jump)theEObject;
        T result = caseJump(jump);
        if (result == null) result = caseInstructions(jump);
        if (result == null) result = caseStatement(jump);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LD_IMMEDIATE:
      {
        LdImmediate ldImmediate = (LdImmediate)theEObject;
        T result = caseLdImmediate(ldImmediate);
        if (result == null) result = caseLoad(ldImmediate);
        if (result == null) result = caseInstructions(ldImmediate);
        if (result == null) result = caseStatement(ldImmediate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LD_DIRECT:
      {
        LdDirect ldDirect = (LdDirect)theEObject;
        T result = caseLdDirect(ldDirect);
        if (result == null) result = caseLoad(ldDirect);
        if (result == null) result = caseInstructions(ldDirect);
        if (result == null) result = caseStatement(ldDirect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LD_INDEXED:
      {
        LdIndexed ldIndexed = (LdIndexed)theEObject;
        T result = caseLdIndexed(ldIndexed);
        if (result == null) result = caseLoad(ldIndexed);
        if (result == null) result = caseInstructions(ldIndexed);
        if (result == null) result = caseStatement(ldIndexed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LD_BASED_INDEXED:
      {
        LdBasedIndexed ldBasedIndexed = (LdBasedIndexed)theEObject;
        T result = caseLdBasedIndexed(ldBasedIndexed);
        if (result == null) result = caseLoad(ldBasedIndexed);
        if (result == null) result = caseInstructions(ldBasedIndexed);
        if (result == null) result = caseStatement(ldBasedIndexed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ST_DIRECT:
      {
        StDirect stDirect = (StDirect)theEObject;
        T result = caseStDirect(stDirect);
        if (result == null) result = caseStore(stDirect);
        if (result == null) result = caseInstructions(stDirect);
        if (result == null) result = caseStatement(stDirect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ST_INDEXED:
      {
        StIndexed stIndexed = (StIndexed)theEObject;
        T result = caseStIndexed(stIndexed);
        if (result == null) result = caseStore(stIndexed);
        if (result == null) result = caseInstructions(stIndexed);
        if (result == null) result = caseStatement(stIndexed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ST_BASED_INDEXED:
      {
        StBasedIndexed stBasedIndexed = (StBasedIndexed)theEObject;
        T result = caseStBasedIndexed(stBasedIndexed);
        if (result == null) result = caseStore(stBasedIndexed);
        if (result == null) result = caseInstructions(stBasedIndexed);
        if (result == null) result = caseStatement(stBasedIndexed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ADD:
      {
        Add add = (Add)theEObject;
        T result = caseAdd(add);
        if (result == null) result = caseAritmetica(add);
        if (result == null) result = caseInstructions(add);
        if (result == null) result = caseStatement(add);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.SUB:
      {
        Sub sub = (Sub)theEObject;
        T result = caseSub(sub);
        if (result == null) result = caseAritmetica(sub);
        if (result == null) result = caseInstructions(sub);
        if (result == null) result = caseStatement(sub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ANL:
      {
        Anl anl = (Anl)theEObject;
        T result = caseAnl(anl);
        if (result == null) result = caseLogica(anl);
        if (result == null) result = caseInstructions(anl);
        if (result == null) result = caseStatement(anl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.ORL:
      {
        Orl orl = (Orl)theEObject;
        T result = caseOrl(orl);
        if (result == null) result = caseLogica(orl);
        if (result == null) result = caseInstructions(orl);
        if (result == null) result = caseStatement(orl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.XRL:
      {
        Xrl xrl = (Xrl)theEObject;
        T result = caseXrl(xrl);
        if (result == null) result = caseLogica(xrl);
        if (result == null) result = caseInstructions(xrl);
        if (result == null) result = caseStatement(xrl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseLogica(not);
        if (result == null) result = caseInstructions(not);
        if (result == null) result = caseStatement(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.SHL:
      {
        Shl shl = (Shl)theEObject;
        T result = caseShl(shl);
        if (result == null) result = caseLogica(shl);
        if (result == null) result = caseInstructions(shl);
        if (result == null) result = caseStatement(shl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.SHR:
      {
        Shr shr = (Shr)theEObject;
        T result = caseShr(shr);
        if (result == null) result = caseLogica(shr);
        if (result == null) result = caseInstructions(shr);
        if (result == null) result = caseStatement(shr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.RR:
      {
        Rr rr = (Rr)theEObject;
        T result = caseRr(rr);
        if (result == null) result = caseLogica(rr);
        if (result == null) result = caseInstructions(rr);
        if (result == null) result = caseStatement(rr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.RC:
      {
        Rc rc = (Rc)theEObject;
        T result = caseRc(rc);
        if (result == null) result = caseLogica(rc);
        if (result == null) result = caseInstructions(rc);
        if (result == null) result = caseStatement(rc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.JUMP_OP:
      {
        JumpOp jumpOp = (JumpOp)theEObject;
        T result = caseJumpOp(jumpOp);
        if (result == null) result = caseJump(jumpOp);
        if (result == null) result = caseInstructions(jumpOp);
        if (result == null) result = caseStatement(jumpOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.NOP:
      {
        Nop nop = (Nop)theEObject;
        T result = caseNop(nop);
        if (result == null) result = caseInstructions(nop);
        if (result == null) result = caseStatement(nop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.RET:
      {
        Ret ret = (Ret)theEObject;
        T result = caseRet(ret);
        if (result == null) result = caseInstructions(ret);
        if (result == null) result = caseStatement(ret);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.IMMEDIATE:
      {
        Immediate immediate = (Immediate)theEObject;
        T result = caseImmediate(immediate);
        if (result == null) result = caseLdImmediate(immediate);
        if (result == null) result = caseLoad(immediate);
        if (result == null) result = caseInstructions(immediate);
        if (result == null) result = caseStatement(immediate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.DIRECT:
      {
        Direct direct = (Direct)theEObject;
        T result = caseDirect(direct);
        if (result == null) result = caseLdDirect(direct);
        if (result == null) result = caseStDirect(direct);
        if (result == null) result = caseLoad(direct);
        if (result == null) result = caseStore(direct);
        if (result == null) result = caseInstructions(direct);
        if (result == null) result = caseStatement(direct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.INDEXED:
      {
        Indexed indexed = (Indexed)theEObject;
        T result = caseIndexed(indexed);
        if (result == null) result = caseLdIndexed(indexed);
        if (result == null) result = caseStIndexed(indexed);
        if (result == null) result = caseLoad(indexed);
        if (result == null) result = caseStore(indexed);
        if (result == null) result = caseInstructions(indexed);
        if (result == null) result = caseStatement(indexed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.BASED_INDEXED:
      {
        BasedIndexed basedIndexed = (BasedIndexed)theEObject;
        T result = caseBasedIndexed(basedIndexed);
        if (result == null) result = caseLdBasedIndexed(basedIndexed);
        if (result == null) result = caseStBasedIndexed(basedIndexed);
        if (result == null) result = caseLoad(basedIndexed);
        if (result == null) result = caseStore(basedIndexed);
        if (result == null) result = caseInstructions(basedIndexed);
        if (result == null) result = caseStatement(basedIndexed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.DIRECT_OR_LABEL:
      {
        DirectOrLabel directOrLabel = (DirectOrLabel)theEObject;
        T result = caseDirectOrLabel(directOrLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.IMMEDIATE8_OR_LABEL:
      {
        Immediate8OrLabel immediate8OrLabel = (Immediate8OrLabel)theEObject;
        T result = caseImmediate8OrLabel(immediate8OrLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.IDX3_OR_LABEL:
      {
        Idx3OrLabel idx3OrLabel = (Idx3OrLabel)theEObject;
        T result = caseIdx3OrLabel(idx3OrLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.CONST4_OR_LABEL:
      {
        Const4OrLabel const4OrLabel = (Const4OrLabel)theEObject;
        T result = caseConst4OrLabel(const4OrLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.OFFSET8_OR_LABEL:
      {
        Offset8OrLabel offset8OrLabel = (Offset8OrLabel)theEObject;
        T result = caseOffset8OrLabel(offset8OrLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.OPERATION_WITH_TWO_REGISTERS:
      {
        OperationWithTwoRegisters operationWithTwoRegisters = (OperationWithTwoRegisters)theEObject;
        T result = caseOperationWithTwoRegisters(operationWithTwoRegisters);
        if (result == null) result = caseOrl(operationWithTwoRegisters);
        if (result == null) result = caseNot(operationWithTwoRegisters);
        if (result == null) result = caseRc(operationWithTwoRegisters);
        if (result == null) result = caseLogica(operationWithTwoRegisters);
        if (result == null) result = caseInstructions(operationWithTwoRegisters);
        if (result == null) result = caseStatement(operationWithTwoRegisters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.OPERATIONS_WITH_TREE_REGISTERS:
      {
        OperationsWithTreeRegisters operationsWithTreeRegisters = (OperationsWithTreeRegisters)theEObject;
        T result = caseOperationsWithTreeRegisters(operationsWithTreeRegisters);
        if (result == null) result = caseAdd(operationsWithTreeRegisters);
        if (result == null) result = caseSub(operationsWithTreeRegisters);
        if (result == null) result = caseAnl(operationsWithTreeRegisters);
        if (result == null) result = caseOrl(operationsWithTreeRegisters);
        if (result == null) result = caseXrl(operationsWithTreeRegisters);
        if (result == null) result = caseAritmetica(operationsWithTreeRegisters);
        if (result == null) result = caseLogica(operationsWithTreeRegisters);
        if (result == null) result = caseInstructions(operationsWithTreeRegisters);
        if (result == null) result = caseStatement(operationsWithTreeRegisters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.OPERATIONS_WITH_CONSTANT:
      {
        OperationsWithConstant operationsWithConstant = (OperationsWithConstant)theEObject;
        T result = caseOperationsWithConstant(operationsWithConstant);
        if (result == null) result = caseAdd(operationsWithConstant);
        if (result == null) result = caseSub(operationsWithConstant);
        if (result == null) result = caseRr(operationsWithConstant);
        if (result == null) result = caseAritmetica(operationsWithConstant);
        if (result == null) result = caseLogica(operationsWithConstant);
        if (result == null) result = caseInstructions(operationsWithConstant);
        if (result == null) result = caseStatement(operationsWithConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.OPERATION_SHIFT:
      {
        OperationShift operationShift = (OperationShift)theEObject;
        T result = caseOperationShift(operationShift);
        if (result == null) result = caseShl(operationShift);
        if (result == null) result = caseShr(operationShift);
        if (result == null) result = caseLogica(operationShift);
        if (result == null) result = caseInstructions(operationShift);
        if (result == null) result = caseStatement(operationShift);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.OPERATION_WITH_OFFSET:
      {
        OperationWithOffset operationWithOffset = (OperationWithOffset)theEObject;
        T result = caseOperationWithOffset(operationWithOffset);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseOrg(expression);
        if (result == null) result = caseEqu(expression);
        if (result == null) result = caseDirective(expression);
        if (result == null) result = caseStatement(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.LOW_OR_HIGHT:
      {
        LowOrHight lowOrHight = (LowOrHight)theEObject;
        T result = caseLowOrHight(lowOrHight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Pds16asmPackage.NUMBER:
      {
        org.pds16.pds16asm.pds16asm.Number number = (org.pds16.pds16asm.pds16asm.Number)theEObject;
        T result = caseNumber(number);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PDS16ASM</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PDS16ASM</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePDS16ASM(PDS16ASM object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLabel(Label object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirective(Directive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Label Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Label Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLabelDirective(LabelDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bss</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bss</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBss(Bss object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseData(Data object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnd(End object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseText(Text object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ascii</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ascii</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAscii(Ascii object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asciiz</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asciiz</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAsciiz(Asciiz object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Byte</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Byte</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseByte(org.pds16.pds16asm.pds16asm.Byte object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWord(Word object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Space</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Space</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpace(Space object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSet(Set object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSection(Section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Org</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Org</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrg(Org object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqu(Equ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instructions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instructions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstructions(Instructions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoad(Load object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStore(Store object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aritmetica</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aritmetica</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAritmetica(Aritmetica object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logica</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logica</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogica(Logica object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Jump</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Jump</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJump(Jump object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ld Immediate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ld Immediate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLdImmediate(LdImmediate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ld Direct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ld Direct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLdDirect(LdDirect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ld Indexed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ld Indexed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLdIndexed(LdIndexed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ld Based Indexed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ld Based Indexed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLdBasedIndexed(LdBasedIndexed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>St Direct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>St Direct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStDirect(StDirect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>St Indexed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>St Indexed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStIndexed(StIndexed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>St Based Indexed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>St Based Indexed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStBasedIndexed(StBasedIndexed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdd(Add object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSub(Sub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Anl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Anl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnl(Anl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Orl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Orl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrl(Orl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xrl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xrl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXrl(Xrl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShl(Shl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShr(Shr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRr(Rr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRc(Rc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Jump Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Jump Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJumpOp(JumpOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNop(Nop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ret</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ret</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRet(Ret object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Immediate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Immediate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImmediate(Immediate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Direct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Direct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirect(Direct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Indexed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Indexed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexed(Indexed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Based Indexed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Based Indexed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasedIndexed(BasedIndexed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Direct Or Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Direct Or Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectOrLabel(DirectOrLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Immediate8 Or Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Immediate8 Or Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImmediate8OrLabel(Immediate8OrLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Idx3 Or Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Idx3 Or Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdx3OrLabel(Idx3OrLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const4 Or Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const4 Or Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConst4OrLabel(Const4OrLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Offset8 Or Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Offset8 Or Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOffset8OrLabel(Offset8OrLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation With Two Registers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation With Two Registers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationWithTwoRegisters(OperationWithTwoRegisters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operations With Tree Registers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operations With Tree Registers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationsWithTreeRegisters(OperationsWithTreeRegisters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operations With Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operations With Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationsWithConstant(OperationsWithConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Shift</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Shift</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationShift(OperationShift object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation With Offset</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation With Offset</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationWithOffset(OperationWithOffset object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Low Or Hight</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Low Or Hight</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLowOrHight(LowOrHight object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumber(org.pds16.pds16asm.pds16asm.Number object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //Pds16asmSwitch
