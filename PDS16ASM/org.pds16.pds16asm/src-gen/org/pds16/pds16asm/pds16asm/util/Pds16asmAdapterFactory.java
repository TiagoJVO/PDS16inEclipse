/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.pds16.pds16asm.pds16asm.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.pds16.pds16asm.pds16asm.Add;
import org.pds16.pds16asm.pds16asm.Anl;
import org.pds16.pds16asm.pds16asm.Aritmetica;
import org.pds16.pds16asm.pds16asm.Ascii;
import org.pds16.pds16asm.pds16asm.Asciiz;
import org.pds16.pds16asm.pds16asm.BasedIndexed;
import org.pds16.pds16asm.pds16asm.Bss;
import org.pds16.pds16asm.pds16asm.Const4OrLabel;
import org.pds16.pds16asm.pds16asm.Data;
import org.pds16.pds16asm.pds16asm.Direct;
import org.pds16.pds16asm.pds16asm.DirectOrLabel;
import org.pds16.pds16asm.pds16asm.Directive;
import org.pds16.pds16asm.pds16asm.End;
import org.pds16.pds16asm.pds16asm.Equ;
import org.pds16.pds16asm.pds16asm.Expression;
import org.pds16.pds16asm.pds16asm.Idx3OrLabel;
import org.pds16.pds16asm.pds16asm.Immediate;
import org.pds16.pds16asm.pds16asm.Immediate8OrLabel;
import org.pds16.pds16asm.pds16asm.Indexed;
import org.pds16.pds16asm.pds16asm.Instructions;
import org.pds16.pds16asm.pds16asm.Jump;
import org.pds16.pds16asm.pds16asm.JumpOp;
import org.pds16.pds16asm.pds16asm.Label;
import org.pds16.pds16asm.pds16asm.LabelDirective;
import org.pds16.pds16asm.pds16asm.LdBasedIndexed;
import org.pds16.pds16asm.pds16asm.LdDirect;
import org.pds16.pds16asm.pds16asm.LdImmediate;
import org.pds16.pds16asm.pds16asm.LdIndexed;
import org.pds16.pds16asm.pds16asm.Load;
import org.pds16.pds16asm.pds16asm.Logica;
import org.pds16.pds16asm.pds16asm.LowOrHight;
import org.pds16.pds16asm.pds16asm.Nop;
import org.pds16.pds16asm.pds16asm.Not;
import org.pds16.pds16asm.pds16asm.Offset8OrLabel;
import org.pds16.pds16asm.pds16asm.OperationShift;
import org.pds16.pds16asm.pds16asm.OperationWithOffset;
import org.pds16.pds16asm.pds16asm.OperationWithTwoRegisters;
import org.pds16.pds16asm.pds16asm.OperationsWithConstant;
import org.pds16.pds16asm.pds16asm.OperationsWithTreeRegisters;
import org.pds16.pds16asm.pds16asm.Org;
import org.pds16.pds16asm.pds16asm.Orl;
import org.pds16.pds16asm.pds16asm.PDS16ASM;
import org.pds16.pds16asm.pds16asm.Pds16asmPackage;
import org.pds16.pds16asm.pds16asm.Rc;
import org.pds16.pds16asm.pds16asm.Ret;
import org.pds16.pds16asm.pds16asm.Rr;
import org.pds16.pds16asm.pds16asm.Section;
import org.pds16.pds16asm.pds16asm.Set;
import org.pds16.pds16asm.pds16asm.Shl;
import org.pds16.pds16asm.pds16asm.Shr;
import org.pds16.pds16asm.pds16asm.Space;
import org.pds16.pds16asm.pds16asm.StBasedIndexed;
import org.pds16.pds16asm.pds16asm.StDirect;
import org.pds16.pds16asm.pds16asm.StIndexed;
import org.pds16.pds16asm.pds16asm.Statement;
import org.pds16.pds16asm.pds16asm.Store;
import org.pds16.pds16asm.pds16asm.Sub;
import org.pds16.pds16asm.pds16asm.Text;
import org.pds16.pds16asm.pds16asm.Word;
import org.pds16.pds16asm.pds16asm.Xrl;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.pds16.pds16asm.pds16asm.Pds16asmPackage
 * @generated
 */
public class Pds16asmAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Pds16asmPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pds16asmAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = Pds16asmPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Pds16asmSwitch<Adapter> modelSwitch =
    new Pds16asmSwitch<Adapter>()
    {
      @Override
      public Adapter casePDS16ASM(PDS16ASM object)
      {
        return createPDS16ASMAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseLabel(Label object)
      {
        return createLabelAdapter();
      }
      @Override
      public Adapter caseDirective(Directive object)
      {
        return createDirectiveAdapter();
      }
      @Override
      public Adapter caseLabelDirective(LabelDirective object)
      {
        return createLabelDirectiveAdapter();
      }
      @Override
      public Adapter caseBss(Bss object)
      {
        return createBssAdapter();
      }
      @Override
      public Adapter caseData(Data object)
      {
        return createDataAdapter();
      }
      @Override
      public Adapter caseEnd(End object)
      {
        return createEndAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseAscii(Ascii object)
      {
        return createAsciiAdapter();
      }
      @Override
      public Adapter caseAsciiz(Asciiz object)
      {
        return createAsciizAdapter();
      }
      @Override
      public Adapter caseByte(org.pds16.pds16asm.pds16asm.Byte object)
      {
        return createByteAdapter();
      }
      @Override
      public Adapter caseWord(Word object)
      {
        return createWordAdapter();
      }
      @Override
      public Adapter caseSpace(Space object)
      {
        return createSpaceAdapter();
      }
      @Override
      public Adapter caseSet(Set object)
      {
        return createSetAdapter();
      }
      @Override
      public Adapter caseSection(Section object)
      {
        return createSectionAdapter();
      }
      @Override
      public Adapter caseOrg(Org object)
      {
        return createOrgAdapter();
      }
      @Override
      public Adapter caseEqu(Equ object)
      {
        return createEquAdapter();
      }
      @Override
      public Adapter caseInstructions(Instructions object)
      {
        return createInstructionsAdapter();
      }
      @Override
      public Adapter caseLoad(Load object)
      {
        return createLoadAdapter();
      }
      @Override
      public Adapter caseStore(Store object)
      {
        return createStoreAdapter();
      }
      @Override
      public Adapter caseAritmetica(Aritmetica object)
      {
        return createAritmeticaAdapter();
      }
      @Override
      public Adapter caseLogica(Logica object)
      {
        return createLogicaAdapter();
      }
      @Override
      public Adapter caseJump(Jump object)
      {
        return createJumpAdapter();
      }
      @Override
      public Adapter caseLdImmediate(LdImmediate object)
      {
        return createLdImmediateAdapter();
      }
      @Override
      public Adapter caseLdDirect(LdDirect object)
      {
        return createLdDirectAdapter();
      }
      @Override
      public Adapter caseLdIndexed(LdIndexed object)
      {
        return createLdIndexedAdapter();
      }
      @Override
      public Adapter caseLdBasedIndexed(LdBasedIndexed object)
      {
        return createLdBasedIndexedAdapter();
      }
      @Override
      public Adapter caseStDirect(StDirect object)
      {
        return createStDirectAdapter();
      }
      @Override
      public Adapter caseStIndexed(StIndexed object)
      {
        return createStIndexedAdapter();
      }
      @Override
      public Adapter caseStBasedIndexed(StBasedIndexed object)
      {
        return createStBasedIndexedAdapter();
      }
      @Override
      public Adapter caseAdd(Add object)
      {
        return createAddAdapter();
      }
      @Override
      public Adapter caseSub(Sub object)
      {
        return createSubAdapter();
      }
      @Override
      public Adapter caseAnl(Anl object)
      {
        return createAnlAdapter();
      }
      @Override
      public Adapter caseOrl(Orl object)
      {
        return createOrlAdapter();
      }
      @Override
      public Adapter caseXrl(Xrl object)
      {
        return createXrlAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseShl(Shl object)
      {
        return createShlAdapter();
      }
      @Override
      public Adapter caseShr(Shr object)
      {
        return createShrAdapter();
      }
      @Override
      public Adapter caseRr(Rr object)
      {
        return createRrAdapter();
      }
      @Override
      public Adapter caseRc(Rc object)
      {
        return createRcAdapter();
      }
      @Override
      public Adapter caseJumpOp(JumpOp object)
      {
        return createJumpOpAdapter();
      }
      @Override
      public Adapter caseNop(Nop object)
      {
        return createNopAdapter();
      }
      @Override
      public Adapter caseRet(Ret object)
      {
        return createRetAdapter();
      }
      @Override
      public Adapter caseImmediate(Immediate object)
      {
        return createImmediateAdapter();
      }
      @Override
      public Adapter caseDirect(Direct object)
      {
        return createDirectAdapter();
      }
      @Override
      public Adapter caseIndexed(Indexed object)
      {
        return createIndexedAdapter();
      }
      @Override
      public Adapter caseBasedIndexed(BasedIndexed object)
      {
        return createBasedIndexedAdapter();
      }
      @Override
      public Adapter caseDirectOrLabel(DirectOrLabel object)
      {
        return createDirectOrLabelAdapter();
      }
      @Override
      public Adapter caseImmediate8OrLabel(Immediate8OrLabel object)
      {
        return createImmediate8OrLabelAdapter();
      }
      @Override
      public Adapter caseIdx3OrLabel(Idx3OrLabel object)
      {
        return createIdx3OrLabelAdapter();
      }
      @Override
      public Adapter caseConst4OrLabel(Const4OrLabel object)
      {
        return createConst4OrLabelAdapter();
      }
      @Override
      public Adapter caseOffset8OrLabel(Offset8OrLabel object)
      {
        return createOffset8OrLabelAdapter();
      }
      @Override
      public Adapter caseOperationWithTwoRegisters(OperationWithTwoRegisters object)
      {
        return createOperationWithTwoRegistersAdapter();
      }
      @Override
      public Adapter caseOperationsWithTreeRegisters(OperationsWithTreeRegisters object)
      {
        return createOperationsWithTreeRegistersAdapter();
      }
      @Override
      public Adapter caseOperationsWithConstant(OperationsWithConstant object)
      {
        return createOperationsWithConstantAdapter();
      }
      @Override
      public Adapter caseOperationShift(OperationShift object)
      {
        return createOperationShiftAdapter();
      }
      @Override
      public Adapter caseOperationWithOffset(OperationWithOffset object)
      {
        return createOperationWithOffsetAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseLowOrHight(LowOrHight object)
      {
        return createLowOrHightAdapter();
      }
      @Override
      public Adapter caseNumber(org.pds16.pds16asm.pds16asm.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.PDS16ASM <em>PDS16ASM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.PDS16ASM
   * @generated
   */
  public Adapter createPDS16ASMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Label <em>Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Label
   * @generated
   */
  public Adapter createLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Directive <em>Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Directive
   * @generated
   */
  public Adapter createDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.LabelDirective <em>Label Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.LabelDirective
   * @generated
   */
  public Adapter createLabelDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Bss <em>Bss</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Bss
   * @generated
   */
  public Adapter createBssAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Data <em>Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Data
   * @generated
   */
  public Adapter createDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.End <em>End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.End
   * @generated
   */
  public Adapter createEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Ascii <em>Ascii</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Ascii
   * @generated
   */
  public Adapter createAsciiAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Asciiz <em>Asciiz</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Asciiz
   * @generated
   */
  public Adapter createAsciizAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Byte <em>Byte</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Byte
   * @generated
   */
  public Adapter createByteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Word <em>Word</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Word
   * @generated
   */
  public Adapter createWordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Space <em>Space</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Space
   * @generated
   */
  public Adapter createSpaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Set <em>Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Set
   * @generated
   */
  public Adapter createSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Section <em>Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Section
   * @generated
   */
  public Adapter createSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Org <em>Org</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Org
   * @generated
   */
  public Adapter createOrgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Equ <em>Equ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Equ
   * @generated
   */
  public Adapter createEquAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Instructions <em>Instructions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Instructions
   * @generated
   */
  public Adapter createInstructionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Load <em>Load</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Load
   * @generated
   */
  public Adapter createLoadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Store <em>Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Store
   * @generated
   */
  public Adapter createStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Aritmetica <em>Aritmetica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Aritmetica
   * @generated
   */
  public Adapter createAritmeticaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Logica <em>Logica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Logica
   * @generated
   */
  public Adapter createLogicaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Jump <em>Jump</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Jump
   * @generated
   */
  public Adapter createJumpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.LdImmediate <em>Ld Immediate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.LdImmediate
   * @generated
   */
  public Adapter createLdImmediateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.LdDirect <em>Ld Direct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.LdDirect
   * @generated
   */
  public Adapter createLdDirectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.LdIndexed <em>Ld Indexed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.LdIndexed
   * @generated
   */
  public Adapter createLdIndexedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.LdBasedIndexed <em>Ld Based Indexed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.LdBasedIndexed
   * @generated
   */
  public Adapter createLdBasedIndexedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.StDirect <em>St Direct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.StDirect
   * @generated
   */
  public Adapter createStDirectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.StIndexed <em>St Indexed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.StIndexed
   * @generated
   */
  public Adapter createStIndexedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.StBasedIndexed <em>St Based Indexed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.StBasedIndexed
   * @generated
   */
  public Adapter createStBasedIndexedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Add <em>Add</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Add
   * @generated
   */
  public Adapter createAddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Sub <em>Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Sub
   * @generated
   */
  public Adapter createSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Anl <em>Anl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Anl
   * @generated
   */
  public Adapter createAnlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Orl <em>Orl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Orl
   * @generated
   */
  public Adapter createOrlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Xrl <em>Xrl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Xrl
   * @generated
   */
  public Adapter createXrlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Shl <em>Shl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Shl
   * @generated
   */
  public Adapter createShlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Shr <em>Shr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Shr
   * @generated
   */
  public Adapter createShrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Rr <em>Rr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Rr
   * @generated
   */
  public Adapter createRrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Rc <em>Rc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Rc
   * @generated
   */
  public Adapter createRcAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.JumpOp <em>Jump Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.JumpOp
   * @generated
   */
  public Adapter createJumpOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Nop <em>Nop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Nop
   * @generated
   */
  public Adapter createNopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Ret <em>Ret</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Ret
   * @generated
   */
  public Adapter createRetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Immediate <em>Immediate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Immediate
   * @generated
   */
  public Adapter createImmediateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Direct <em>Direct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Direct
   * @generated
   */
  public Adapter createDirectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Indexed <em>Indexed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Indexed
   * @generated
   */
  public Adapter createIndexedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.BasedIndexed <em>Based Indexed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.BasedIndexed
   * @generated
   */
  public Adapter createBasedIndexedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.DirectOrLabel <em>Direct Or Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.DirectOrLabel
   * @generated
   */
  public Adapter createDirectOrLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Immediate8OrLabel <em>Immediate8 Or Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Immediate8OrLabel
   * @generated
   */
  public Adapter createImmediate8OrLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Idx3OrLabel <em>Idx3 Or Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Idx3OrLabel
   * @generated
   */
  public Adapter createIdx3OrLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Const4OrLabel <em>Const4 Or Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Const4OrLabel
   * @generated
   */
  public Adapter createConst4OrLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Offset8OrLabel <em>Offset8 Or Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Offset8OrLabel
   * @generated
   */
  public Adapter createOffset8OrLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.OperationWithTwoRegisters <em>Operation With Two Registers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.OperationWithTwoRegisters
   * @generated
   */
  public Adapter createOperationWithTwoRegistersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.OperationsWithTreeRegisters <em>Operations With Tree Registers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.OperationsWithTreeRegisters
   * @generated
   */
  public Adapter createOperationsWithTreeRegistersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.OperationsWithConstant <em>Operations With Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.OperationsWithConstant
   * @generated
   */
  public Adapter createOperationsWithConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.OperationShift <em>Operation Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.OperationShift
   * @generated
   */
  public Adapter createOperationShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.OperationWithOffset <em>Operation With Offset</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.OperationWithOffset
   * @generated
   */
  public Adapter createOperationWithOffsetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.LowOrHight <em>Low Or Hight</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.LowOrHight
   * @generated
   */
  public Adapter createLowOrHightAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.pds16.pds16asm.pds16asm.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.pds16.pds16asm.pds16asm.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //Pds16asmAdapterFactory
