/*
 * generated by Xtext 2.10.0
 */
package org.pds16.pds16asm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Pds16asmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PDS16ASMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.PDS16ASM");
		private final Assignment cInstuctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstuctionsStatementParserRuleCall_0 = (RuleCall)cInstuctionsAssignment.eContents().get(0);
		
		//PDS16ASM:
		//	instuctions+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//instuctions+=Statement*
		public Assignment getInstuctionsAssignment() { return cInstuctionsAssignment; }
		
		//Statement
		public RuleCall getInstuctionsStatementParserRuleCall_0() { return cInstuctionsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDirectiveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	Instructions | Label | Directive;
		@Override public ParserRule getRule() { return rule; }
		
		//Instructions | Label | Directive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instructions
		public RuleCall getInstructionsParserRuleCall_0() { return cInstructionsParserRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
		
		//Directive
		public RuleCall getDirectiveParserRuleCall_2() { return cDirectiveParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelNameIDLABELTerminalRuleCall_0_0 = (RuleCall)cLabelNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueLabelParserRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueLabelDirectiveParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final RuleCall cValueInstructionsParserRuleCall_1_0_2 = (RuleCall)cValueAlternatives_1_0.eContents().get(2);
		
		//Label:
		//	labelName=IDLABEL value=(Label | LabelDirective | Instructions);
		@Override public ParserRule getRule() { return rule; }
		
		//labelName=IDLABEL value=(Label | LabelDirective | Instructions)
		public Group getGroup() { return cGroup; }
		
		//labelName=IDLABEL
		public Assignment getLabelNameAssignment_0() { return cLabelNameAssignment_0; }
		
		//IDLABEL
		public RuleCall getLabelNameIDLABELTerminalRuleCall_0_0() { return cLabelNameIDLABELTerminalRuleCall_0_0; }
		
		//value=(Label | LabelDirective | Instructions)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//(Label | LabelDirective | Instructions)
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//Label
		public RuleCall getValueLabelParserRuleCall_1_0_0() { return cValueLabelParserRuleCall_1_0_0; }
		
		//LabelDirective
		public RuleCall getValueLabelDirectiveParserRuleCall_1_0_1() { return cValueLabelDirectiveParserRuleCall_1_0_1; }
		
		//Instructions
		public RuleCall getValueInstructionsParserRuleCall_1_0_2() { return cValueInstructionsParserRuleCall_1_0_2; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Directive");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueBssParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueDataParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueEndParserRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueTextParserRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		private final RuleCall cValueEquParserRuleCall_0_4 = (RuleCall)cValueAlternatives_0.eContents().get(4);
		private final RuleCall cValueOrgParserRuleCall_0_5 = (RuleCall)cValueAlternatives_0.eContents().get(5);
		private final RuleCall cValueSectionParserRuleCall_0_6 = (RuleCall)cValueAlternatives_0.eContents().get(6);
		private final RuleCall cValueSetParserRuleCall_0_7 = (RuleCall)cValueAlternatives_0.eContents().get(7);
		private final RuleCall cValueLabelDirectiveParserRuleCall_0_8 = (RuleCall)cValueAlternatives_0.eContents().get(8);
		
		//Directive:
		//	value=(Bss | Data | End | Text | Equ | Org | Section | Set | LabelDirective);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(Bss | Data | End | Text | Equ | Org | Section | Set | LabelDirective)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(Bss | Data | End | Text | Equ | Org | Section | Set | LabelDirective)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//Bss
		public RuleCall getValueBssParserRuleCall_0_0() { return cValueBssParserRuleCall_0_0; }
		
		//Data
		public RuleCall getValueDataParserRuleCall_0_1() { return cValueDataParserRuleCall_0_1; }
		
		//End
		public RuleCall getValueEndParserRuleCall_0_2() { return cValueEndParserRuleCall_0_2; }
		
		//Text
		public RuleCall getValueTextParserRuleCall_0_3() { return cValueTextParserRuleCall_0_3; }
		
		//Equ
		public RuleCall getValueEquParserRuleCall_0_4() { return cValueEquParserRuleCall_0_4; }
		
		//Org
		public RuleCall getValueOrgParserRuleCall_0_5() { return cValueOrgParserRuleCall_0_5; }
		
		//Section
		public RuleCall getValueSectionParserRuleCall_0_6() { return cValueSectionParserRuleCall_0_6; }
		
		//Set
		public RuleCall getValueSetParserRuleCall_0_7() { return cValueSetParserRuleCall_0_7; }
		
		//LabelDirective
		public RuleCall getValueLabelDirectiveParserRuleCall_0_8() { return cValueLabelDirectiveParserRuleCall_0_8; }
	}
	public class LabelDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.LabelDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsciiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsciizParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cByteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWordParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSpaceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LabelDirective:
		//	Ascii | Asciiz | Byte | Word | Space;
		@Override public ParserRule getRule() { return rule; }
		
		//Ascii | Asciiz | Byte | Word | Space
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ascii
		public RuleCall getAsciiParserRuleCall_0() { return cAsciiParserRuleCall_0; }
		
		//Asciiz
		public RuleCall getAsciizParserRuleCall_1() { return cAsciizParserRuleCall_1; }
		
		//Byte
		public RuleCall getByteParserRuleCall_2() { return cByteParserRuleCall_2; }
		
		//Word
		public RuleCall getWordParserRuleCall_3() { return cWordParserRuleCall_3; }
		
		//Space
		public RuleCall getSpaceParserRuleCall_4() { return cSpaceParserRuleCall_4; }
	}
	public class BssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Bss");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueBssKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Bss:
		//	value='.bss';
		@Override public ParserRule getRule() { return rule; }
		
		//value='.bss'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'.bss'
		public Keyword getValueBssKeyword_0() { return cValueBssKeyword_0; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Data");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueDataKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Data:
		//	value='.data';
		@Override public ParserRule getRule() { return rule; }
		
		//value='.data'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'.data'
		public Keyword getValueDataKeyword_0() { return cValueDataKeyword_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.End");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueEndKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//End:
		//	value='.end';
		@Override public ParserRule getRule() { return rule; }
		
		//value='.end'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'.end'
		public Keyword getValueEndKeyword_0() { return cValueEndKeyword_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Text");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueTextKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Text:
		//	value='.text';
		@Override public ParserRule getRule() { return rule; }
		
		//value='.text'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'.text'
		public Keyword getValueTextKeyword_0() { return cValueTextKeyword_0; }
	}
	public class AsciiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Ascii");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTagAsciiKeyword_0_0 = (Keyword)cTagAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1.eContents().get(0);
		
		//Ascii:
		//	tag='.ascii' (values+=STRING (',' values+=STRING)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//tag='.ascii' (values+=STRING (',' values+=STRING)*)?
		public Group getGroup() { return cGroup; }
		
		//tag='.ascii'
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//'.ascii'
		public Keyword getTagAsciiKeyword_0_0() { return cTagAsciiKeyword_0_0; }
		
		//(values+=STRING (',' values+=STRING)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0_0() { return cValuesSTRINGTerminalRuleCall_1_0_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1_1_1() { return cValuesAssignment_1_1_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_1_1_0() { return cValuesSTRINGTerminalRuleCall_1_1_1_0; }
	}
	public class AsciizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Asciiz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTagAsciizKeyword_0_0 = (Keyword)cTagAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1.eContents().get(0);
		
		//Asciiz:
		//	tag='.asciiz' (values+=STRING (',' values+=STRING)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//tag='.asciiz' (values+=STRING (',' values+=STRING)*)?
		public Group getGroup() { return cGroup; }
		
		//tag='.asciiz'
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//'.asciiz'
		public Keyword getTagAsciizKeyword_0_0() { return cTagAsciizKeyword_0_0; }
		
		//(values+=STRING (',' values+=STRING)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0_0() { return cValuesSTRINGTerminalRuleCall_1_0_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1_1_1() { return cValuesAssignment_1_1_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_1_1_0() { return cValuesSTRINGTerminalRuleCall_1_1_1_0; }
	}
	public class ByteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Byte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTagByteKeyword_0_0 = (Keyword)cTagAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cNumbersAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cNumbersNumberParserRuleCall_1_0_0_0 = (RuleCall)cNumbersAssignment_1_0_0.eContents().get(0);
		private final Assignment cSAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cSSTRINGTerminalRuleCall_1_0_1_0 = (RuleCall)cSAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cNumbersAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cNumbersNumberParserRuleCall_1_1_1_0_0 = (RuleCall)cNumbersAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cSAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cSSTRINGTerminalRuleCall_1_1_1_1_0 = (RuleCall)cSAssignment_1_1_1_1.eContents().get(0);
		
		//Byte:
		//	tag='.byte' ((numbers+=Number | s+=STRING) (',' (numbers+=Number | s+=STRING))*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//tag='.byte' ((numbers+=Number | s+=STRING) (',' (numbers+=Number | s+=STRING))*)?
		public Group getGroup() { return cGroup; }
		
		//tag='.byte'
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//'.byte'
		public Keyword getTagByteKeyword_0_0() { return cTagByteKeyword_0_0; }
		
		//((numbers+=Number | s+=STRING) (',' (numbers+=Number | s+=STRING))*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(numbers+=Number | s+=STRING)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//numbers+=Number
		public Assignment getNumbersAssignment_1_0_0() { return cNumbersAssignment_1_0_0; }
		
		//Number
		public RuleCall getNumbersNumberParserRuleCall_1_0_0_0() { return cNumbersNumberParserRuleCall_1_0_0_0; }
		
		//s+=STRING
		public Assignment getSAssignment_1_0_1() { return cSAssignment_1_0_1; }
		
		//STRING
		public RuleCall getSSTRINGTerminalRuleCall_1_0_1_0() { return cSSTRINGTerminalRuleCall_1_0_1_0; }
		
		//(',' (numbers+=Number | s+=STRING))*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//(numbers+=Number | s+=STRING)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//numbers+=Number
		public Assignment getNumbersAssignment_1_1_1_0() { return cNumbersAssignment_1_1_1_0; }
		
		//Number
		public RuleCall getNumbersNumberParserRuleCall_1_1_1_0_0() { return cNumbersNumberParserRuleCall_1_1_1_0_0; }
		
		//s+=STRING
		public Assignment getSAssignment_1_1_1_1() { return cSAssignment_1_1_1_1; }
		
		//STRING
		public RuleCall getSSTRINGTerminalRuleCall_1_1_1_1_0() { return cSSTRINGTerminalRuleCall_1_1_1_1_0; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Word");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTagWordKeyword_0_0 = (Keyword)cTagAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cValuesIDTerminalRuleCall_1_0_0_0 = (RuleCall)cValuesAssignment_1_0_0.eContents().get(0);
		private final Assignment cNumbersAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cNumbersNumberParserRuleCall_1_0_1_0 = (RuleCall)cNumbersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cValuesAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cValuesIDTerminalRuleCall_1_1_1_0_0 = (RuleCall)cValuesAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cNumbersAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cNumbersNumberParserRuleCall_1_1_1_1_0 = (RuleCall)cNumbersAssignment_1_1_1_1.eContents().get(0);
		
		//Word:
		//	tag='.word' ((values+=ID | numbers+=Number) (',' (values+=ID | numbers+=Number))*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//tag='.word' ((values+=ID | numbers+=Number) (',' (values+=ID | numbers+=Number))*)?
		public Group getGroup() { return cGroup; }
		
		//tag='.word'
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//'.word'
		public Keyword getTagWordKeyword_0_0() { return cTagWordKeyword_0_0; }
		
		//((values+=ID | numbers+=Number) (',' (values+=ID | numbers+=Number))*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(values+=ID | numbers+=Number)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//values+=ID
		public Assignment getValuesAssignment_1_0_0() { return cValuesAssignment_1_0_0; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_1_0_0_0() { return cValuesIDTerminalRuleCall_1_0_0_0; }
		
		//numbers+=Number
		public Assignment getNumbersAssignment_1_0_1() { return cNumbersAssignment_1_0_1; }
		
		//Number
		public RuleCall getNumbersNumberParserRuleCall_1_0_1_0() { return cNumbersNumberParserRuleCall_1_0_1_0; }
		
		//(',' (values+=ID | numbers+=Number))*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//(values+=ID | numbers+=Number)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//values+=ID
		public Assignment getValuesAssignment_1_1_1_0() { return cValuesAssignment_1_1_1_0; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_1_1_1_0_0() { return cValuesIDTerminalRuleCall_1_1_1_0_0; }
		
		//numbers+=Number
		public Assignment getNumbersAssignment_1_1_1_1() { return cNumbersAssignment_1_1_1_1; }
		
		//Number
		public RuleCall getNumbersNumberParserRuleCall_1_1_1_1_0() { return cNumbersNumberParserRuleCall_1_1_1_1_0; }
	}
	public class SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Space");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeNumberParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cByteValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cByteValueNumberParserRuleCall_2_1_0 = (RuleCall)cByteValueAssignment_2_1.eContents().get(0);
		
		//Space:
		//	'.space' size=Number (',' byteValue=Number)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'.space' size=Number (',' byteValue=Number)?
		public Group getGroup() { return cGroup; }
		
		//'.space'
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }
		
		//size=Number
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//Number
		public RuleCall getSizeNumberParserRuleCall_1_0() { return cSizeNumberParserRuleCall_1_0; }
		
		//(',' byteValue=Number)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//byteValue=Number
		public Assignment getByteValueAssignment_2_1() { return cByteValueAssignment_2_1; }
		
		//Number
		public RuleCall getByteValueNumberParserRuleCall_2_1_0() { return cByteValueNumberParserRuleCall_2_1_0; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValue1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValue1IDTerminalRuleCall_1_0 = (RuleCall)cValue1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue2ExpressionParserRuleCall_3_0 = (RuleCall)cValue2Assignment_3.eContents().get(0);
		
		//Set:
		//	'.set' value1=ID ',' value2=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'.set' value1=ID ',' value2=Expression
		public Group getGroup() { return cGroup; }
		
		//'.set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//value1=ID
		public Assignment getValue1Assignment_1() { return cValue1Assignment_1; }
		
		//ID
		public RuleCall getValue1IDTerminalRuleCall_1_0() { return cValue1IDTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value2=Expression
		public Assignment getValue2Assignment_3() { return cValue2Assignment_3; }
		
		//Expression
		public RuleCall getValue2ExpressionParserRuleCall_3_0() { return cValue2ExpressionParserRuleCall_3_0; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Section:
		//	'.section' value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'.section' value=ID
		public Group getGroup() { return cGroup; }
		
		//'.section'
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	public class OrgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Org");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Org:
		//	'.org' Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'.org' Expression
		public Group getGroup() { return cGroup; }
		
		//'.org'
		public Keyword getOrgKeyword_0() { return cOrgKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class EquElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Equ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValue1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValue1IDTerminalRuleCall_1_0 = (RuleCall)cValue1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue2ExpressionParserRuleCall_3_0 = (RuleCall)cValue2Assignment_3.eContents().get(0);
		
		//Equ:
		//	'.equ' value1=ID ',' value2=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'.equ' value1=ID ',' value2=Expression
		public Group getGroup() { return cGroup; }
		
		//'.equ'
		public Keyword getEquKeyword_0() { return cEquKeyword_0; }
		
		//value1=ID
		public Assignment getValue1Assignment_1() { return cValue1Assignment_1; }
		
		//ID
		public RuleCall getValue1IDTerminalRuleCall_1_0() { return cValue1IDTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value2=Expression
		public Assignment getValue2Assignment_3() { return cValue2Assignment_3; }
		
		//Expression
		public RuleCall getValue2ExpressionParserRuleCall_3_0() { return cValue2ExpressionParserRuleCall_3_0; }
	}
	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAritmeticaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJumpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRetParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Instructions:
		//	Load | Store | Aritmetica | Logica | Jump | Nop | Ret;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Store | Aritmetica | Logica | Jump | Nop | Ret
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
		
		//Aritmetica
		public RuleCall getAritmeticaParserRuleCall_2() { return cAritmeticaParserRuleCall_2; }
		
		//Logica
		public RuleCall getLogicaParserRuleCall_3() { return cLogicaParserRuleCall_3; }
		
		//Jump
		public RuleCall getJumpParserRuleCall_4() { return cJumpParserRuleCall_4; }
		
		//Nop
		public RuleCall getNopParserRuleCall_5() { return cNopParserRuleCall_5; }
		
		//Ret
		public RuleCall getRetParserRuleCall_6() { return cRetParserRuleCall_6; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Load");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLdImmediateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLdDirectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLdIndexedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLdBasedIndexedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Load:
		//	LdImmediate | LdDirect | LdIndexed | LdBasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//LdImmediate | LdDirect | LdIndexed | LdBasedIndexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LdImmediate
		public RuleCall getLdImmediateParserRuleCall_0() { return cLdImmediateParserRuleCall_0; }
		
		//LdDirect
		public RuleCall getLdDirectParserRuleCall_1() { return cLdDirectParserRuleCall_1; }
		
		//LdIndexed
		public RuleCall getLdIndexedParserRuleCall_2() { return cLdIndexedParserRuleCall_2; }
		
		//LdBasedIndexed
		public RuleCall getLdBasedIndexedParserRuleCall_3() { return cLdBasedIndexedParserRuleCall_3; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Store");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStDirectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStIndexedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStBasedIndexedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Store:
		//	StDirect | StIndexed | StBasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//StDirect | StIndexed | StBasedIndexed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StDirect
		public RuleCall getStDirectParserRuleCall_0() { return cStDirectParserRuleCall_0; }
		
		//StIndexed
		public RuleCall getStIndexedParserRuleCall_1() { return cStIndexedParserRuleCall_1; }
		
		//StBasedIndexed
		public RuleCall getStBasedIndexedParserRuleCall_2() { return cStBasedIndexedParserRuleCall_2; }
	}
	public class AritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Aritmetica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Aritmetica:
		//	Add | Sub;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | Sub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//Sub
		public RuleCall getSubParserRuleCall_1() { return cSubParserRuleCall_1; }
	}
	public class LogicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Logica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnlParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXrlParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNotParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cShlParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShrParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRcParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Logica:
		//	Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc;
		@Override public ParserRule getRule() { return rule; }
		
		//Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Anl
		public RuleCall getAnlParserRuleCall_0() { return cAnlParserRuleCall_0; }
		
		//Orl
		public RuleCall getOrlParserRuleCall_1() { return cOrlParserRuleCall_1; }
		
		//Xrl
		public RuleCall getXrlParserRuleCall_2() { return cXrlParserRuleCall_2; }
		
		//Not
		public RuleCall getNotParserRuleCall_3() { return cNotParserRuleCall_3; }
		
		//Shl
		public RuleCall getShlParserRuleCall_4() { return cShlParserRuleCall_4; }
		
		//Shr
		public RuleCall getShrParserRuleCall_5() { return cShrParserRuleCall_5; }
		
		//Rr
		public RuleCall getRrParserRuleCall_6() { return cRrParserRuleCall_6; }
		
		//Rc
		public RuleCall getRcParserRuleCall_7() { return cRcParserRuleCall_7; }
	}
	public class JumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Jump");
		private final RuleCall cJumpOpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Jump:
		//	JumpOp;
		@Override public ParserRule getRule() { return rule; }
		
		//JumpOp
		public RuleCall getJumpOpParserRuleCall() { return cJumpOpParserRuleCall; }
	}
	public class LdImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.LdImmediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdiKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdihKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cImmediateParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// **************************************Load************************************************ / LdImmediate:
		//	('ldi' | 'ldih') Immediate;
		@Override public ParserRule getRule() { return rule; }
		
		//('ldi' | 'ldih') Immediate
		public Group getGroup() { return cGroup; }
		
		//('ldi' | 'ldih')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ldi'
		public Keyword getLdiKeyword_0_0() { return cLdiKeyword_0_0; }
		
		//'ldih'
		public Keyword getLdihKeyword_0_1() { return cLdihKeyword_0_1; }
		
		//Immediate
		public RuleCall getImmediateParserRuleCall_1() { return cImmediateParserRuleCall_1; }
	}
	public class LdDirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.LdDirect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cDirectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LdDirect:
		//	('ld' | 'ldb') Direct;
		@Override public ParserRule getRule() { return rule; }
		
		//('ld' | 'ldb') Direct
		public Group getGroup() { return cGroup; }
		
		//('ld' | 'ldb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//'ldb'
		public Keyword getLdbKeyword_0_1() { return cLdbKeyword_0_1; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_1() { return cDirectParserRuleCall_1; }
	}
	public class LdIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.LdIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LdIndexed:
		//	('ld' | 'ldb') Indexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('ld' | 'ldb') Indexed
		public Group getGroup() { return cGroup; }
		
		//('ld' | 'ldb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//'ldb'
		public Keyword getLdbKeyword_0_1() { return cLdbKeyword_0_1; }
		
		//Indexed
		public RuleCall getIndexedParserRuleCall_1() { return cIndexedParserRuleCall_1; }
	}
	public class LdBasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.LdBasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLdbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cBasedIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LdBasedIndexed:
		//	('ld' | 'ldb') BasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('ld' | 'ldb') BasedIndexed
		public Group getGroup() { return cGroup; }
		
		//('ld' | 'ldb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ld'
		public Keyword getLdKeyword_0_0() { return cLdKeyword_0_0; }
		
		//'ldb'
		public Keyword getLdbKeyword_0_1() { return cLdbKeyword_0_1; }
		
		//BasedIndexed
		public RuleCall getBasedIndexedParserRuleCall_1() { return cBasedIndexedParserRuleCall_1; }
	}
	public class StDirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.StDirect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cDirectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ****************************************Store ******************************************** / StDirect:
		//	('st' | 'stb') Direct;
		@Override public ParserRule getRule() { return rule; }
		
		//('st' | 'stb') Direct
		public Group getGroup() { return cGroup; }
		
		//('st' | 'stb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'st'
		public Keyword getStKeyword_0_0() { return cStKeyword_0_0; }
		
		//'stb'
		public Keyword getStbKeyword_0_1() { return cStbKeyword_0_1; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_1() { return cDirectParserRuleCall_1; }
	}
	public class StIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.StIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StIndexed:
		//	('st' | 'stb') Indexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('st' | 'stb') Indexed
		public Group getGroup() { return cGroup; }
		
		//('st' | 'stb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'st'
		public Keyword getStKeyword_0_0() { return cStKeyword_0_0; }
		
		//'stb'
		public Keyword getStbKeyword_0_1() { return cStbKeyword_0_1; }
		
		//Indexed
		public RuleCall getIndexedParserRuleCall_1() { return cIndexedParserRuleCall_1; }
	}
	public class StBasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.StBasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStbKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cBasedIndexedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StBasedIndexed:
		//	('st' | 'stb') BasedIndexed;
		@Override public ParserRule getRule() { return rule; }
		
		//('st' | 'stb') BasedIndexed
		public Group getGroup() { return cGroup; }
		
		//('st' | 'stb')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'st'
		public Keyword getStKeyword_0_0() { return cStKeyword_0_0; }
		
		//'stb'
		public Keyword getStbKeyword_0_1() { return cStbKeyword_0_1; }
		
		//BasedIndexed
		public RuleCall getBasedIndexedParserRuleCall_1() { return cBasedIndexedParserRuleCall_1; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Add");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cAddKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cAddfKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cAdcKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cAdcfKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cOperationsWithConstantParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cOperationsWithThreeRegistersParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cIncKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cIncfKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cRegisterParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ******************************************* Aritmetica *********************************** / Add:
		//	('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithThreeRegisters) | ('inc' | 'incf')
		//	Register;
		@Override public ParserRule getRule() { return rule; }
		
		//('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithThreeRegisters) | ('inc' | 'incf') Register
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithThreeRegisters)
		public Group getGroup_0() { return cGroup_0; }
		
		//('add' | 'addf' | 'adc' | 'adcf')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'add'
		public Keyword getAddKeyword_0_0_0() { return cAddKeyword_0_0_0; }
		
		//'addf'
		public Keyword getAddfKeyword_0_0_1() { return cAddfKeyword_0_0_1; }
		
		//'adc'
		public Keyword getAdcKeyword_0_0_2() { return cAdcKeyword_0_0_2; }
		
		//'adcf'
		public Keyword getAdcfKeyword_0_0_3() { return cAdcfKeyword_0_0_3; }
		
		//(OperationsWithConstant | OperationsWithThreeRegisters)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//OperationsWithConstant
		public RuleCall getOperationsWithConstantParserRuleCall_0_1_0() { return cOperationsWithConstantParserRuleCall_0_1_0; }
		
		//OperationsWithThreeRegisters
		public RuleCall getOperationsWithThreeRegistersParserRuleCall_0_1_1() { return cOperationsWithThreeRegistersParserRuleCall_0_1_1; }
		
		//('inc' | 'incf') Register
		public Group getGroup_1() { return cGroup_1; }
		
		//('inc' | 'incf')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'inc'
		public Keyword getIncKeyword_1_0_0() { return cIncKeyword_1_0_0; }
		
		//'incf'
		public Keyword getIncfKeyword_1_0_1() { return cIncfKeyword_1_0_1; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_1_1() { return cRegisterParserRuleCall_1_1; }
	}
	public class SubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Sub");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cSubKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cSubfKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cSbbKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cSbbfKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cOperationsWithConstantParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cOperationsWithThreeRegistersParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSubrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOperationsWithThreeRegistersParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cDecKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cDecfKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cRegisterParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Sub:
		//	('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithThreeRegisters) | 'subr'
		//	OperationsWithThreeRegisters
		//	| ('dec' | 'decf') Register;
		@Override public ParserRule getRule() { return rule; }
		
		//('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithThreeRegisters) | 'subr'
		//OperationsWithThreeRegisters | ('dec' | 'decf') Register
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithThreeRegisters)
		public Group getGroup_0() { return cGroup_0; }
		
		//('sub' | 'subf' | 'sbb' | 'sbbf')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'sub'
		public Keyword getSubKeyword_0_0_0() { return cSubKeyword_0_0_0; }
		
		//'subf'
		public Keyword getSubfKeyword_0_0_1() { return cSubfKeyword_0_0_1; }
		
		//'sbb'
		public Keyword getSbbKeyword_0_0_2() { return cSbbKeyword_0_0_2; }
		
		//'sbbf'
		public Keyword getSbbfKeyword_0_0_3() { return cSbbfKeyword_0_0_3; }
		
		//(OperationsWithConstant | OperationsWithThreeRegisters)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//OperationsWithConstant
		public RuleCall getOperationsWithConstantParserRuleCall_0_1_0() { return cOperationsWithConstantParserRuleCall_0_1_0; }
		
		//OperationsWithThreeRegisters
		public RuleCall getOperationsWithThreeRegistersParserRuleCall_0_1_1() { return cOperationsWithThreeRegistersParserRuleCall_0_1_1; }
		
		//'subr' OperationsWithThreeRegisters
		public Group getGroup_1() { return cGroup_1; }
		
		//'subr'
		public Keyword getSubrKeyword_1_0() { return cSubrKeyword_1_0; }
		
		//OperationsWithThreeRegisters
		public RuleCall getOperationsWithThreeRegistersParserRuleCall_1_1() { return cOperationsWithThreeRegistersParserRuleCall_1_1; }
		
		//('dec' | 'decf') Register
		public Group getGroup_2() { return cGroup_2; }
		
		//('dec' | 'decf')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'dec'
		public Keyword getDecKeyword_2_0_0() { return cDecKeyword_2_0_0; }
		
		//'decf'
		public Keyword getDecfKeyword_2_0_1() { return cDecfKeyword_2_0_1; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_2_1() { return cRegisterParserRuleCall_2_1; }
	}
	public class AnlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Anl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAnlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAnlfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithThreeRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// ****************************************************************************************** /
		/// ******************************************* Logica *************************************** / Anl:
		//	('anl' | 'anlf') OperationsWithThreeRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('anl' | 'anlf') OperationsWithThreeRegisters
		public Group getGroup() { return cGroup; }
		
		//('anl' | 'anlf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'anl'
		public Keyword getAnlKeyword_0_0() { return cAnlKeyword_0_0; }
		
		//'anlf'
		public Keyword getAnlfKeyword_0_1() { return cAnlfKeyword_0_1; }
		
		//OperationsWithThreeRegisters
		public RuleCall getOperationsWithThreeRegistersParserRuleCall_1() { return cOperationsWithThreeRegistersParserRuleCall_1; }
	}
	public class OrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Orl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cOrlKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cOrlfKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cOperationsWithThreeRegistersParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cMovKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cMovfKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cOperationWithTwoRegistersParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Orl:
		//	('orl' | 'orlf') OperationsWithThreeRegisters
		//	| ('mov' | 'movf') OperationWithTwoRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('orl' | 'orlf') OperationsWithThreeRegisters | ('mov' | 'movf') OperationWithTwoRegisters
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('orl' | 'orlf') OperationsWithThreeRegisters
		public Group getGroup_0() { return cGroup_0; }
		
		//('orl' | 'orlf')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'orl'
		public Keyword getOrlKeyword_0_0_0() { return cOrlKeyword_0_0_0; }
		
		//'orlf'
		public Keyword getOrlfKeyword_0_0_1() { return cOrlfKeyword_0_0_1; }
		
		//OperationsWithThreeRegisters
		public RuleCall getOperationsWithThreeRegistersParserRuleCall_0_1() { return cOperationsWithThreeRegistersParserRuleCall_0_1; }
		
		//('mov' | 'movf') OperationWithTwoRegisters
		public Group getGroup_1() { return cGroup_1; }
		
		//('mov' | 'movf')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'mov'
		public Keyword getMovKeyword_1_0_0() { return cMovKeyword_1_0_0; }
		
		//'movf'
		public Keyword getMovfKeyword_1_0_1() { return cMovfKeyword_1_0_1; }
		
		//OperationWithTwoRegisters
		public RuleCall getOperationWithTwoRegistersParserRuleCall_1_1() { return cOperationWithTwoRegistersParserRuleCall_1_1; }
	}
	public class XrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Xrl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cXrlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cXrlfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithThreeRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Xrl:
		//	('xrl' | 'xrlf') OperationsWithThreeRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('xrl' | 'xrlf') OperationsWithThreeRegisters
		public Group getGroup() { return cGroup; }
		
		//('xrl' | 'xrlf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'xrl'
		public Keyword getXrlKeyword_0_0() { return cXrlKeyword_0_0; }
		
		//'xrlf'
		public Keyword getXrlfKeyword_0_1() { return cXrlfKeyword_0_1; }
		
		//OperationsWithThreeRegisters
		public RuleCall getOperationsWithThreeRegistersParserRuleCall_1() { return cOperationsWithThreeRegistersParserRuleCall_1; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNotfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationWithTwoRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Not:
		//	('not' | 'notf') OperationWithTwoRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('not' | 'notf') OperationWithTwoRegisters
		public Group getGroup() { return cGroup; }
		
		//('not' | 'notf')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//'notf'
		public Keyword getNotfKeyword_0_1() { return cNotfKeyword_0_1; }
		
		//OperationWithTwoRegisters
		public RuleCall getOperationWithTwoRegistersParserRuleCall_1() { return cOperationWithTwoRegistersParserRuleCall_1; }
	}
	public class ShlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Shl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOperationShiftParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Shl:
		//	'shl' OperationShift;
		@Override public ParserRule getRule() { return rule; }
		
		//'shl' OperationShift
		public Group getGroup() { return cGroup; }
		
		//'shl'
		public Keyword getShlKeyword_0() { return cShlKeyword_0; }
		
		//OperationShift
		public RuleCall getOperationShiftParserRuleCall_1() { return cOperationShiftParserRuleCall_1; }
	}
	public class ShrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Shr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOperationShiftParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Shr:
		//	'shr' OperationShift;
		@Override public ParserRule getRule() { return rule; }
		
		//'shr' OperationShift
		public Group getGroup() { return cGroup; }
		
		//'shr'
		public Keyword getShrKeyword_0() { return cShrKeyword_0; }
		
		//OperationShift
		public RuleCall getOperationShiftParserRuleCall_1() { return cOperationShiftParserRuleCall_1; }
	}
	public class RrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Rr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRrlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRrmKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationsWithConstantParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Rr:
		//	('rrl' | 'rrm') OperationsWithConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//('rrl' | 'rrm') OperationsWithConstant
		public Group getGroup() { return cGroup; }
		
		//('rrl' | 'rrm')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rrl'
		public Keyword getRrlKeyword_0_0() { return cRrlKeyword_0_0; }
		
		//'rrm'
		public Keyword getRrmKeyword_0_1() { return cRrmKeyword_0_1; }
		
		//OperationsWithConstant
		public RuleCall getOperationsWithConstantParserRuleCall_1() { return cOperationsWithConstantParserRuleCall_1; }
	}
	public class RcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Rc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRcrKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRclKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperationWithTwoRegistersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Rc:
		//	('rcr' | 'rcl') OperationWithTwoRegisters;
		@Override public ParserRule getRule() { return rule; }
		
		//('rcr' | 'rcl') OperationWithTwoRegisters
		public Group getGroup() { return cGroup; }
		
		//('rcr' | 'rcl')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rcr'
		public Keyword getRcrKeyword_0_0() { return cRcrKeyword_0_0; }
		
		//'rcl'
		public Keyword getRclKeyword_0_1() { return cRclKeyword_0_1; }
		
		//OperationWithTwoRegisters
		public RuleCall getOperationWithTwoRegistersParserRuleCall_1() { return cOperationWithTwoRegistersParserRuleCall_1; }
	}
	public class JumpOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.JumpOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTagAlternatives_0_0 = (Alternatives)cTagAssignment_0.eContents().get(0);
		private final Keyword cTagJzKeyword_0_0_0 = (Keyword)cTagAlternatives_0_0.eContents().get(0);
		private final Keyword cTagJeKeyword_0_0_1 = (Keyword)cTagAlternatives_0_0.eContents().get(1);
		private final Keyword cTagJnzKeyword_0_0_2 = (Keyword)cTagAlternatives_0_0.eContents().get(2);
		private final Keyword cTagJneKeyword_0_0_3 = (Keyword)cTagAlternatives_0_0.eContents().get(3);
		private final Keyword cTagJcKeyword_0_0_4 = (Keyword)cTagAlternatives_0_0.eContents().get(4);
		private final Keyword cTagJblKeyword_0_0_5 = (Keyword)cTagAlternatives_0_0.eContents().get(5);
		private final Keyword cTagJncKeyword_0_0_6 = (Keyword)cTagAlternatives_0_0.eContents().get(6);
		private final Keyword cTagJaeKeyword_0_0_7 = (Keyword)cTagAlternatives_0_0.eContents().get(7);
		private final Keyword cTagJmpKeyword_0_0_8 = (Keyword)cTagAlternatives_0_0.eContents().get(8);
		private final Keyword cTagJmplKeyword_0_0_9 = (Keyword)cTagAlternatives_0_0.eContents().get(9);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpOffAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOpOffOperationWithOffsetParserRuleCall_1_0_0 = (RuleCall)cOpOffAssignment_1_0.eContents().get(0);
		private final Assignment cOpIdAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOpIdIDTerminalRuleCall_1_1_0 = (RuleCall)cOpIdAssignment_1_1.eContents().get(0);
		private final Keyword cDollarSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		/// ****************************************************************************************** /
		/// ************************************** Jump ********************************************** / JumpOp:
		//	tag=('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl') (opOff=OperationWithOffset |
		//	opId=ID | '$');
		@Override public ParserRule getRule() { return rule; }
		
		//tag=('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl') (opOff=OperationWithOffset | opId=ID |
		//'$')
		public Group getGroup() { return cGroup; }
		
		//tag=('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl')
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl')
		public Alternatives getTagAlternatives_0_0() { return cTagAlternatives_0_0; }
		
		//'jz'
		public Keyword getTagJzKeyword_0_0_0() { return cTagJzKeyword_0_0_0; }
		
		//'je'
		public Keyword getTagJeKeyword_0_0_1() { return cTagJeKeyword_0_0_1; }
		
		//'jnz'
		public Keyword getTagJnzKeyword_0_0_2() { return cTagJnzKeyword_0_0_2; }
		
		//'jne'
		public Keyword getTagJneKeyword_0_0_3() { return cTagJneKeyword_0_0_3; }
		
		//'jc'
		public Keyword getTagJcKeyword_0_0_4() { return cTagJcKeyword_0_0_4; }
		
		//'jbl'
		public Keyword getTagJblKeyword_0_0_5() { return cTagJblKeyword_0_0_5; }
		
		//'jnc'
		public Keyword getTagJncKeyword_0_0_6() { return cTagJncKeyword_0_0_6; }
		
		//'jae'
		public Keyword getTagJaeKeyword_0_0_7() { return cTagJaeKeyword_0_0_7; }
		
		//'jmp'
		public Keyword getTagJmpKeyword_0_0_8() { return cTagJmpKeyword_0_0_8; }
		
		//'jmpl'
		public Keyword getTagJmplKeyword_0_0_9() { return cTagJmplKeyword_0_0_9; }
		
		//(opOff=OperationWithOffset | opId=ID | '$')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//opOff=OperationWithOffset
		public Assignment getOpOffAssignment_1_0() { return cOpOffAssignment_1_0; }
		
		//OperationWithOffset
		public RuleCall getOpOffOperationWithOffsetParserRuleCall_1_0_0() { return cOpOffOperationWithOffsetParserRuleCall_1_0_0; }
		
		//opId=ID
		public Assignment getOpIdAssignment_1_1() { return cOpIdAssignment_1_1; }
		
		//ID
		public RuleCall getOpIdIDTerminalRuleCall_1_1_0() { return cOpIdIDTerminalRuleCall_1_1_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_1_2() { return cDollarSignKeyword_1_2; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Nop");
		private final Assignment cInstructionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cInstructionNopKeyword_0 = (Keyword)cInstructionAssignment.eContents().get(0);
		
		/// ****************************************************************************************** /
		/// *************************** Others Instuctions ******************************************* / Nop:
		//	instruction='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//instruction='nop'
		public Assignment getInstructionAssignment() { return cInstructionAssignment; }
		
		//'nop'
		public Keyword getInstructionNopKeyword_0() { return cInstructionNopKeyword_0; }
	}
	public class RetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Ret");
		private final Assignment cInstructionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cInstructionAlternatives_0 = (Alternatives)cInstructionAssignment.eContents().get(0);
		private final Keyword cInstructionRetKeyword_0_0 = (Keyword)cInstructionAlternatives_0.eContents().get(0);
		private final Keyword cInstructionIretKeyword_0_1 = (Keyword)cInstructionAlternatives_0.eContents().get(1);
		
		//Ret:
		//	instruction=('ret' | 'iret');
		@Override public ParserRule getRule() { return rule; }
		
		//instruction=('ret' | 'iret')
		public Assignment getInstructionAssignment() { return cInstructionAssignment; }
		
		//('ret' | 'iret')
		public Alternatives getInstructionAlternatives_0() { return cInstructionAlternatives_0; }
		
		//'ret'
		public Keyword getInstructionRetKeyword_0_0() { return cInstructionRetKeyword_0_0; }
		
		//'iret'
		public Keyword getInstructionIretKeyword_0_1() { return cInstructionIretKeyword_0_1; }
	}
	public class ImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Immediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegisterRegisterParserRuleCall_0_0 = (RuleCall)cRegisterAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImmediate8Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImmediate8Immediate8OrLabelParserRuleCall_2_0_0 = (RuleCall)cImmediate8Assignment_2_0.eContents().get(0);
		private final Assignment cLowORhighAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cLowORhighLowOrHightParserRuleCall_2_1_0 = (RuleCall)cLowORhighAssignment_2_1.eContents().get(0);
		
		/// ****************************************************************************************** /
		/// ************************************Type Operations*************************************** / Immediate:
		//	register=Register ',' (immediate8=Immediate8OrLabel | lowORhigh=LowOrHight);
		@Override public ParserRule getRule() { return rule; }
		
		//register=Register ',' (immediate8=Immediate8OrLabel | lowORhigh=LowOrHight)
		public Group getGroup() { return cGroup; }
		
		//register=Register
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//Register
		public RuleCall getRegisterRegisterParserRuleCall_0_0() { return cRegisterRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//(immediate8=Immediate8OrLabel | lowORhigh=LowOrHight)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//immediate8=Immediate8OrLabel
		public Assignment getImmediate8Assignment_2_0() { return cImmediate8Assignment_2_0; }
		
		//Immediate8OrLabel
		public RuleCall getImmediate8Immediate8OrLabelParserRuleCall_2_0_0() { return cImmediate8Immediate8OrLabelParserRuleCall_2_0_0; }
		
		//lowORhigh=LowOrHight
		public Assignment getLowORhighAssignment_2_1() { return cLowORhighAssignment_2_1; }
		
		//LowOrHight
		public RuleCall getLowORhighLowOrHightParserRuleCall_2_1_0() { return cLowORhighLowOrHightParserRuleCall_2_1_0; }
	}
	public class DirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Direct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegisterRegisterParserRuleCall_0_0 = (RuleCall)cRegisterAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirect7Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirect7DirectOrLabelParserRuleCall_2_0 = (RuleCall)cDirect7Assignment_2.eContents().get(0);
		
		//Direct:
		//	register=Register ',' direct7=DirectOrLabel;
		@Override public ParserRule getRule() { return rule; }
		
		//register=Register ',' direct7=DirectOrLabel
		public Group getGroup() { return cGroup; }
		
		//register=Register
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//Register
		public RuleCall getRegisterRegisterParserRuleCall_0_0() { return cRegisterRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//direct7=DirectOrLabel
		public Assignment getDirect7Assignment_2() { return cDirect7Assignment_2; }
		
		//DirectOrLabel
		public RuleCall getDirect7DirectOrLabelParserRuleCall_2_0() { return cDirect7DirectOrLabelParserRuleCall_2_0; }
	}
	public class IndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Indexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegisterParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRbxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRbxRegisterParserRuleCall_3_0 = (RuleCall)cRbxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdx3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdx3Idx3OrLabelParserRuleCall_5_0 = (RuleCall)cIdx3Assignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Indexed:
		//	rd=Register ',' '[' rbx=Register ',' idx3=Idx3OrLabel ']';
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Register ',' '[' rbx=Register ',' idx3=Idx3OrLabel ']'
		public Group getGroup() { return cGroup; }
		
		//rd=Register
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Register
		public RuleCall getRdRegisterParserRuleCall_0_0() { return cRdRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rbx=Register
		public Assignment getRbxAssignment_3() { return cRbxAssignment_3; }
		
		//Register
		public RuleCall getRbxRegisterParserRuleCall_3_0() { return cRbxRegisterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//idx3=Idx3OrLabel
		public Assignment getIdx3Assignment_5() { return cIdx3Assignment_5; }
		
		//Idx3OrLabel
		public RuleCall getIdx3Idx3OrLabelParserRuleCall_5_0() { return cIdx3Idx3OrLabelParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class BasedIndexedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.BasedIndexed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegisterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRbxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRbxRegisterParserRuleCall_3_0 = (RuleCall)cRbxAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRixAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRixRegisterParserRuleCall_5_0 = (RuleCall)cRixAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasedIndexed:
		//	Register ',' '[' rbx=Register ',' rix=Register ']';
		@Override public ParserRule getRule() { return rule; }
		
		//Register ',' '[' rbx=Register ',' rix=Register ']'
		public Group getGroup() { return cGroup; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_0() { return cRegisterParserRuleCall_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//rbx=Register
		public Assignment getRbxAssignment_3() { return cRbxAssignment_3; }
		
		//Register
		public RuleCall getRbxRegisterParserRuleCall_3_0() { return cRbxRegisterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//rix=Register
		public Assignment getRixAssignment_5() { return cRixAssignment_5; }
		
		//Register
		public RuleCall getRixRegisterParserRuleCall_5_0() { return cRixRegisterParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class DirectOrLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.DirectOrLabel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//DirectOrLabel:
		//	number=Number | label=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | label=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }
	}
	public class Immediate8OrLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Immediate8OrLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_1_0_0 = (RuleCall)cNumberAssignment_1_0.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//Immediate8OrLabel:
		//	'#' (number=Number | label=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' (number=Number | label=ID)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(number=Number | label=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//number=Number
		public Assignment getNumberAssignment_1_0() { return cNumberAssignment_1_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_0() { return cNumberNumberParserRuleCall_1_0_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }
	}
	public class Idx3OrLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Idx3OrLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_1_0_0 = (RuleCall)cNumberAssignment_1_0.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//Idx3OrLabel:
		//	'#' (number=Number | label=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' (number=Number | label=ID)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(number=Number | label=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//number=Number
		public Assignment getNumberAssignment_1_0() { return cNumberAssignment_1_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_0() { return cNumberNumberParserRuleCall_1_0_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }
	}
	public class Const4OrLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Const4OrLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_1_0_0 = (RuleCall)cNumberAssignment_1_0.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//Const4OrLabel:
		//	'#' (number=Number | label=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' (number=Number | label=ID)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(number=Number | label=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//number=Number
		public Assignment getNumberAssignment_1_0() { return cNumberAssignment_1_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_0() { return cNumberNumberParserRuleCall_1_0_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }
	}
	public class Offset8OrLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Offset8OrLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_1_0_0 = (RuleCall)cNumberAssignment_1_0.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//Offset8OrLabel:
		//	'#' (number=Number | label=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'#' (number=Number | label=ID)
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(number=Number | label=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//number=Number
		public Assignment getNumberAssignment_1_0() { return cNumberAssignment_1_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_0() { return cNumberNumberParserRuleCall_1_0_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }
	}
	public class OperationWithTwoRegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.OperationWithTwoRegisters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegisterParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegisterParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		
		//OperationWithTwoRegisters:
		//	rd=Register ',' rm=Register;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Register ',' rm=Register
		public Group getGroup() { return cGroup; }
		
		//rd=Register
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Register
		public RuleCall getRdRegisterParserRuleCall_0_0() { return cRdRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Register
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Register
		public RuleCall getRmRegisterParserRuleCall_2_0() { return cRmRegisterParserRuleCall_2_0; }
	}
	public class OperationsWithThreeRegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.OperationsWithThreeRegisters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegisterParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegisterParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRnRegisterParserRuleCall_4_0 = (RuleCall)cRnAssignment_4.eContents().get(0);
		
		//OperationsWithThreeRegisters:
		//	rd=Register ',' rm=Register ',' rn=Register;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Register ',' rm=Register ',' rn=Register
		public Group getGroup() { return cGroup; }
		
		//rd=Register
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Register
		public RuleCall getRdRegisterParserRuleCall_0_0() { return cRdRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Register
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Register
		public RuleCall getRmRegisterParserRuleCall_2_0() { return cRmRegisterParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rn=Register
		public Assignment getRnAssignment_4() { return cRnAssignment_4; }
		
		//Register
		public RuleCall getRnRegisterParserRuleCall_4_0() { return cRnRegisterParserRuleCall_4_0; }
	}
	public class OperationsWithConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.OperationsWithConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegisterParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegisterParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConst4Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConst4Const4OrLabelParserRuleCall_4_0 = (RuleCall)cConst4Assignment_4.eContents().get(0);
		
		//OperationsWithConstant:
		//	rd=Register ',' rm=Register ',' const4=Const4OrLabel;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Register ',' rm=Register ',' const4=Const4OrLabel
		public Group getGroup() { return cGroup; }
		
		//rd=Register
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Register
		public RuleCall getRdRegisterParserRuleCall_0_0() { return cRdRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Register
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Register
		public RuleCall getRmRegisterParserRuleCall_2_0() { return cRmRegisterParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//const4=Const4OrLabel
		public Assignment getConst4Assignment_4() { return cConst4Assignment_4; }
		
		//Const4OrLabel
		public RuleCall getConst4Const4OrLabelParserRuleCall_4_0() { return cConst4Const4OrLabelParserRuleCall_4_0; }
	}
	public class OperationShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.OperationShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRdRegisterParserRuleCall_0_0 = (RuleCall)cRdAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRmRegisterParserRuleCall_2_0 = (RuleCall)cRmAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConst4Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConst4Const4OrLabelParserRuleCall_4_0 = (RuleCall)cConst4Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSinAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSinNumberParserRuleCall_6_0 = (RuleCall)cSinAssignment_6.eContents().get(0);
		
		//OperationShift:
		//	rd=Register ',' rm=Register ',' const4=Const4OrLabel ',' sin=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//rd=Register ',' rm=Register ',' const4=Const4OrLabel ',' sin=Number
		public Group getGroup() { return cGroup; }
		
		//rd=Register
		public Assignment getRdAssignment_0() { return cRdAssignment_0; }
		
		//Register
		public RuleCall getRdRegisterParserRuleCall_0_0() { return cRdRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//rm=Register
		public Assignment getRmAssignment_2() { return cRmAssignment_2; }
		
		//Register
		public RuleCall getRmRegisterParserRuleCall_2_0() { return cRmRegisterParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//const4=Const4OrLabel
		public Assignment getConst4Assignment_4() { return cConst4Assignment_4; }
		
		//Const4OrLabel
		public RuleCall getConst4Const4OrLabelParserRuleCall_4_0() { return cConst4Const4OrLabelParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//sin=Number
		public Assignment getSinAssignment_6() { return cSinAssignment_6; }
		
		//Number
		public RuleCall getSinNumberParserRuleCall_6_0() { return cSinNumberParserRuleCall_6_0; }
	}
	public class OperationWithOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.OperationWithOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRbxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRbxRegisterParserRuleCall_0_0 = (RuleCall)cRbxAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOffset8Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOffset8Offset8OrLabelParserRuleCall_2_0 = (RuleCall)cOffset8Assignment_2.eContents().get(0);
		
		//OperationWithOffset:
		//	rbx=Register ',' offset8=Offset8OrLabel;
		@Override public ParserRule getRule() { return rule; }
		
		//rbx=Register ',' offset8=Offset8OrLabel
		public Group getGroup() { return cGroup; }
		
		//rbx=Register
		public Assignment getRbxAssignment_0() { return cRbxAssignment_0; }
		
		//Register
		public RuleCall getRbxRegisterParserRuleCall_0_0() { return cRbxRegisterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//offset8=Offset8OrLabel
		public Assignment getOffset8Assignment_2() { return cOffset8Assignment_2; }
		
		//Offset8OrLabel
		public RuleCall getOffset8Offset8OrLabelParserRuleCall_2_0() { return cOffset8Offset8OrLabelParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumericValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cNumericValueAlternatives_0_0 = (Alternatives)cNumericValueAssignment_0.eContents().get(0);
		private final RuleCall cNumericValueINTTerminalRuleCall_0_0_0 = (RuleCall)cNumericValueAlternatives_0_0.eContents().get(0);
		private final RuleCall cNumericValueHEXTerminalRuleCall_0_0_1 = (RuleCall)cNumericValueAlternatives_0_0.eContents().get(1);
		private final RuleCall cNumericValueOCTTerminalRuleCall_0_0_2 = (RuleCall)cNumericValueAlternatives_0_0.eContents().get(2);
		private final RuleCall cNumericValueBINTerminalRuleCall_0_0_3 = (RuleCall)cNumericValueAlternatives_0_0.eContents().get(3);
		private final RuleCall cNumericValueCHARTerminalRuleCall_0_0_4 = (RuleCall)cNumericValueAlternatives_0_0.eContents().get(4);
		private final Assignment cIdValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdValueIDTerminalRuleCall_1_0 = (RuleCall)cIdValueAssignment_1.eContents().get(0);
		
		//Expression:
		//	(numericValue+=(INT | HEX | OCT | BIN | CHAR) | idValue+=ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(numericValue+=(INT | HEX | OCT | BIN | CHAR) | idValue+=ID)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//numericValue+=(INT | HEX | OCT | BIN | CHAR)
		public Assignment getNumericValueAssignment_0() { return cNumericValueAssignment_0; }
		
		//(INT | HEX | OCT | BIN | CHAR)
		public Alternatives getNumericValueAlternatives_0_0() { return cNumericValueAlternatives_0_0; }
		
		//INT
		public RuleCall getNumericValueINTTerminalRuleCall_0_0_0() { return cNumericValueINTTerminalRuleCall_0_0_0; }
		
		//HEX
		public RuleCall getNumericValueHEXTerminalRuleCall_0_0_1() { return cNumericValueHEXTerminalRuleCall_0_0_1; }
		
		//OCT
		public RuleCall getNumericValueOCTTerminalRuleCall_0_0_2() { return cNumericValueOCTTerminalRuleCall_0_0_2; }
		
		//BIN
		public RuleCall getNumericValueBINTerminalRuleCall_0_0_3() { return cNumericValueBINTerminalRuleCall_0_0_3; }
		
		//CHAR
		public RuleCall getNumericValueCHARTerminalRuleCall_0_0_4() { return cNumericValueCHARTerminalRuleCall_0_0_4; }
		
		//idValue+=ID
		public Assignment getIdValueAssignment_1() { return cIdValueAssignment_1; }
		
		//ID
		public RuleCall getIdValueIDTerminalRuleCall_1_0() { return cIdValueIDTerminalRuleCall_1_0; }
	}
	public class LowOrHightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.LowOrHight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLowKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHighKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODO: sinais
		//LowOrHight:
		//	'#' ('low' | 'high') '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'#' ('low' | 'high') '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//('low' | 'high')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'low'
		public Keyword getLowKeyword_1_0() { return cLowKeyword_1_0; }
		
		//'high'
		public Keyword getHighKeyword_1_1() { return cHighKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Register");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueR0Keyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueR1Keyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueR2Keyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueR3Keyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueR4Keyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueR5Keyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueR6Keyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueR7Keyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		private final Keyword cValueLRKeyword_0_8 = (Keyword)cValueAlternatives_0.eContents().get(8);
		private final Keyword cValuePSWKeyword_0_9 = (Keyword)cValueAlternatives_0.eContents().get(9);
		private final Keyword cValuePCKeyword_0_10 = (Keyword)cValueAlternatives_0.eContents().get(10);
		
		/// ****************************************************************************************** /
		/// ***********************************************Utils************************************** / Register:
		//	value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'LR' | 'PSW' | 'PC');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'LR' | 'PSW' | 'PC')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'LR' | 'PSW' | 'PC')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'r0'
		public Keyword getValueR0Keyword_0_0() { return cValueR0Keyword_0_0; }
		
		//'r1'
		public Keyword getValueR1Keyword_0_1() { return cValueR1Keyword_0_1; }
		
		//'r2'
		public Keyword getValueR2Keyword_0_2() { return cValueR2Keyword_0_2; }
		
		//'r3'
		public Keyword getValueR3Keyword_0_3() { return cValueR3Keyword_0_3; }
		
		//'r4'
		public Keyword getValueR4Keyword_0_4() { return cValueR4Keyword_0_4; }
		
		//'r5'
		public Keyword getValueR5Keyword_0_5() { return cValueR5Keyword_0_5; }
		
		//'r6'
		public Keyword getValueR6Keyword_0_6() { return cValueR6Keyword_0_6; }
		
		//'r7'
		public Keyword getValueR7Keyword_0_7() { return cValueR7Keyword_0_7; }
		
		//'LR'
		public Keyword getValueLRKeyword_0_8() { return cValueLRKeyword_0_8; }
		
		//'PSW'
		public Keyword getValuePSWKeyword_0_9() { return cValuePSWKeyword_0_9; }
		
		//'PC'
		public Keyword getValuePCKeyword_0_10() { return cValuePCKeyword_0_10; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueHEXTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueOCTTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueBINTerminalRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		private final RuleCall cValueCHARTerminalRuleCall_0_4 = (RuleCall)cValueAlternatives_0.eContents().get(4);
		
		//Number:
		//	value=(INT | HEX | OCT | BIN | CHAR);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(INT | HEX | OCT | BIN | CHAR)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(INT | HEX | OCT | BIN | CHAR)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0_1() { return cValueHEXTerminalRuleCall_0_1; }
		
		//OCT
		public RuleCall getValueOCTTerminalRuleCall_0_2() { return cValueOCTTerminalRuleCall_0_2; }
		
		//BIN
		public RuleCall getValueBINTerminalRuleCall_0_3() { return cValueBINTerminalRuleCall_0_3; }
		
		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_0_4() { return cValueCHARTerminalRuleCall_0_4; }
	}
	
	
	private final PDS16ASMElements pPDS16ASM;
	private final StatementElements pStatement;
	private final LabelElements pLabel;
	private final DirectiveElements pDirective;
	private final LabelDirectiveElements pLabelDirective;
	private final BssElements pBss;
	private final DataElements pData;
	private final EndElements pEnd;
	private final TextElements pText;
	private final AsciiElements pAscii;
	private final AsciizElements pAsciiz;
	private final ByteElements pByte;
	private final WordElements pWord;
	private final SpaceElements pSpace;
	private final SetElements pSet;
	private final SectionElements pSection;
	private final OrgElements pOrg;
	private final EquElements pEqu;
	private final InstructionsElements pInstructions;
	private final LoadElements pLoad;
	private final StoreElements pStore;
	private final AritmeticaElements pAritmetica;
	private final LogicaElements pLogica;
	private final JumpElements pJump;
	private final LdImmediateElements pLdImmediate;
	private final LdDirectElements pLdDirect;
	private final LdIndexedElements pLdIndexed;
	private final LdBasedIndexedElements pLdBasedIndexed;
	private final StDirectElements pStDirect;
	private final StIndexedElements pStIndexed;
	private final StBasedIndexedElements pStBasedIndexed;
	private final AddElements pAdd;
	private final SubElements pSub;
	private final AnlElements pAnl;
	private final OrlElements pOrl;
	private final XrlElements pXrl;
	private final NotElements pNot;
	private final ShlElements pShl;
	private final ShrElements pShr;
	private final RrElements pRr;
	private final RcElements pRc;
	private final JumpOpElements pJumpOp;
	private final NopElements pNop;
	private final RetElements pRet;
	private final ImmediateElements pImmediate;
	private final DirectElements pDirect;
	private final IndexedElements pIndexed;
	private final BasedIndexedElements pBasedIndexed;
	private final DirectOrLabelElements pDirectOrLabel;
	private final Immediate8OrLabelElements pImmediate8OrLabel;
	private final Idx3OrLabelElements pIdx3OrLabel;
	private final Const4OrLabelElements pConst4OrLabel;
	private final Offset8OrLabelElements pOffset8OrLabel;
	private final OperationWithTwoRegistersElements pOperationWithTwoRegisters;
	private final OperationsWithThreeRegistersElements pOperationsWithThreeRegisters;
	private final OperationsWithConstantElements pOperationsWithConstant;
	private final OperationShiftElements pOperationShift;
	private final OperationWithOffsetElements pOperationWithOffset;
	private final ExpressionElements pExpression;
	private final LowOrHightElements pLowOrHight;
	private final RegisterElements pRegister;
	private final NumberElements pNumber;
	private final TerminalRule tHEX;
	private final TerminalRule tOCT;
	private final TerminalRule tBIN;
	private final TerminalRule tCHAR;
	private final TerminalRule tSIGN;
	private final TerminalRule tID;
	private final TerminalRule tIDLABEL;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public Pds16asmGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pPDS16ASM = new PDS16ASMElements();
		this.pStatement = new StatementElements();
		this.pLabel = new LabelElements();
		this.pDirective = new DirectiveElements();
		this.pLabelDirective = new LabelDirectiveElements();
		this.pBss = new BssElements();
		this.pData = new DataElements();
		this.pEnd = new EndElements();
		this.pText = new TextElements();
		this.pAscii = new AsciiElements();
		this.pAsciiz = new AsciizElements();
		this.pByte = new ByteElements();
		this.pWord = new WordElements();
		this.pSpace = new SpaceElements();
		this.pSet = new SetElements();
		this.pSection = new SectionElements();
		this.pOrg = new OrgElements();
		this.pEqu = new EquElements();
		this.pInstructions = new InstructionsElements();
		this.pLoad = new LoadElements();
		this.pStore = new StoreElements();
		this.pAritmetica = new AritmeticaElements();
		this.pLogica = new LogicaElements();
		this.pJump = new JumpElements();
		this.pLdImmediate = new LdImmediateElements();
		this.pLdDirect = new LdDirectElements();
		this.pLdIndexed = new LdIndexedElements();
		this.pLdBasedIndexed = new LdBasedIndexedElements();
		this.pStDirect = new StDirectElements();
		this.pStIndexed = new StIndexedElements();
		this.pStBasedIndexed = new StBasedIndexedElements();
		this.pAdd = new AddElements();
		this.pSub = new SubElements();
		this.pAnl = new AnlElements();
		this.pOrl = new OrlElements();
		this.pXrl = new XrlElements();
		this.pNot = new NotElements();
		this.pShl = new ShlElements();
		this.pShr = new ShrElements();
		this.pRr = new RrElements();
		this.pRc = new RcElements();
		this.pJumpOp = new JumpOpElements();
		this.pNop = new NopElements();
		this.pRet = new RetElements();
		this.pImmediate = new ImmediateElements();
		this.pDirect = new DirectElements();
		this.pIndexed = new IndexedElements();
		this.pBasedIndexed = new BasedIndexedElements();
		this.pDirectOrLabel = new DirectOrLabelElements();
		this.pImmediate8OrLabel = new Immediate8OrLabelElements();
		this.pIdx3OrLabel = new Idx3OrLabelElements();
		this.pConst4OrLabel = new Const4OrLabelElements();
		this.pOffset8OrLabel = new Offset8OrLabelElements();
		this.pOperationWithTwoRegisters = new OperationWithTwoRegistersElements();
		this.pOperationsWithThreeRegisters = new OperationsWithThreeRegistersElements();
		this.pOperationsWithConstant = new OperationsWithConstantElements();
		this.pOperationShift = new OperationShiftElements();
		this.pOperationWithOffset = new OperationWithOffsetElements();
		this.pExpression = new ExpressionElements();
		this.pLowOrHight = new LowOrHightElements();
		this.pRegister = new RegisterElements();
		this.pNumber = new NumberElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.HEX");
		this.tOCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.OCT");
		this.tBIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.BIN");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.CHAR");
		this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.SIGN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.ID");
		this.tIDLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.IDLABEL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.pds16.pds16asm.Pds16asm.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.pds16.pds16asm.Pds16asm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//PDS16ASM:
	//	instuctions+=Statement*;
	public PDS16ASMElements getPDS16ASMAccess() {
		return pPDS16ASM;
	}
	
	public ParserRule getPDS16ASMRule() {
		return getPDS16ASMAccess().getRule();
	}
	
	//Statement:
	//	Instructions | Label | Directive;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Label:
	//	labelName=IDLABEL value=(Label | LabelDirective | Instructions);
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Directive:
	//	value=(Bss | Data | End | Text | Equ | Org | Section | Set | LabelDirective);
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	//LabelDirective:
	//	Ascii | Asciiz | Byte | Word | Space;
	public LabelDirectiveElements getLabelDirectiveAccess() {
		return pLabelDirective;
	}
	
	public ParserRule getLabelDirectiveRule() {
		return getLabelDirectiveAccess().getRule();
	}
	
	//Bss:
	//	value='.bss';
	public BssElements getBssAccess() {
		return pBss;
	}
	
	public ParserRule getBssRule() {
		return getBssAccess().getRule();
	}
	
	//Data:
	//	value='.data';
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//End:
	//	value='.end';
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Text:
	//	value='.text';
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Ascii:
	//	tag='.ascii' (values+=STRING (',' values+=STRING)*)?;
	public AsciiElements getAsciiAccess() {
		return pAscii;
	}
	
	public ParserRule getAsciiRule() {
		return getAsciiAccess().getRule();
	}
	
	//Asciiz:
	//	tag='.asciiz' (values+=STRING (',' values+=STRING)*)?;
	public AsciizElements getAsciizAccess() {
		return pAsciiz;
	}
	
	public ParserRule getAsciizRule() {
		return getAsciizAccess().getRule();
	}
	
	//Byte:
	//	tag='.byte' ((numbers+=Number | s+=STRING) (',' (numbers+=Number | s+=STRING))*)?;
	public ByteElements getByteAccess() {
		return pByte;
	}
	
	public ParserRule getByteRule() {
		return getByteAccess().getRule();
	}
	
	//Word:
	//	tag='.word' ((values+=ID | numbers+=Number) (',' (values+=ID | numbers+=Number))*)?;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//Space:
	//	'.space' size=Number (',' byteValue=Number)?;
	public SpaceElements getSpaceAccess() {
		return pSpace;
	}
	
	public ParserRule getSpaceRule() {
		return getSpaceAccess().getRule();
	}
	
	//Set:
	//	'.set' value1=ID ',' value2=Expression;
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Section:
	//	'.section' value=ID;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Org:
	//	'.org' Expression;
	public OrgElements getOrgAccess() {
		return pOrg;
	}
	
	public ParserRule getOrgRule() {
		return getOrgAccess().getRule();
	}
	
	//Equ:
	//	'.equ' value1=ID ',' value2=Expression;
	public EquElements getEquAccess() {
		return pEqu;
	}
	
	public ParserRule getEquRule() {
		return getEquAccess().getRule();
	}
	
	//Instructions:
	//	Load | Store | Aritmetica | Logica | Jump | Nop | Ret;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}
	
	//Load:
	//	LdImmediate | LdDirect | LdIndexed | LdBasedIndexed;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Store:
	//	StDirect | StIndexed | StBasedIndexed;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Aritmetica:
	//	Add | Sub;
	public AritmeticaElements getAritmeticaAccess() {
		return pAritmetica;
	}
	
	public ParserRule getAritmeticaRule() {
		return getAritmeticaAccess().getRule();
	}
	
	//Logica:
	//	Anl | Orl | Xrl | Not | Shl | Shr | Rr | Rc;
	public LogicaElements getLogicaAccess() {
		return pLogica;
	}
	
	public ParserRule getLogicaRule() {
		return getLogicaAccess().getRule();
	}
	
	//Jump:
	//	JumpOp;
	public JumpElements getJumpAccess() {
		return pJump;
	}
	
	public ParserRule getJumpRule() {
		return getJumpAccess().getRule();
	}
	
	/// **************************************Load************************************************ / LdImmediate:
	//	('ldi' | 'ldih') Immediate;
	public LdImmediateElements getLdImmediateAccess() {
		return pLdImmediate;
	}
	
	public ParserRule getLdImmediateRule() {
		return getLdImmediateAccess().getRule();
	}
	
	//LdDirect:
	//	('ld' | 'ldb') Direct;
	public LdDirectElements getLdDirectAccess() {
		return pLdDirect;
	}
	
	public ParserRule getLdDirectRule() {
		return getLdDirectAccess().getRule();
	}
	
	//LdIndexed:
	//	('ld' | 'ldb') Indexed;
	public LdIndexedElements getLdIndexedAccess() {
		return pLdIndexed;
	}
	
	public ParserRule getLdIndexedRule() {
		return getLdIndexedAccess().getRule();
	}
	
	//LdBasedIndexed:
	//	('ld' | 'ldb') BasedIndexed;
	public LdBasedIndexedElements getLdBasedIndexedAccess() {
		return pLdBasedIndexed;
	}
	
	public ParserRule getLdBasedIndexedRule() {
		return getLdBasedIndexedAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ****************************************Store ******************************************** / StDirect:
	//	('st' | 'stb') Direct;
	public StDirectElements getStDirectAccess() {
		return pStDirect;
	}
	
	public ParserRule getStDirectRule() {
		return getStDirectAccess().getRule();
	}
	
	//StIndexed:
	//	('st' | 'stb') Indexed;
	public StIndexedElements getStIndexedAccess() {
		return pStIndexed;
	}
	
	public ParserRule getStIndexedRule() {
		return getStIndexedAccess().getRule();
	}
	
	//StBasedIndexed:
	//	('st' | 'stb') BasedIndexed;
	public StBasedIndexedElements getStBasedIndexedAccess() {
		return pStBasedIndexed;
	}
	
	public ParserRule getStBasedIndexedRule() {
		return getStBasedIndexedAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ******************************************* Aritmetica *********************************** / Add:
	//	('add' | 'addf' | 'adc' | 'adcf') (OperationsWithConstant | OperationsWithThreeRegisters) | ('inc' | 'incf')
	//	Register;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Sub:
	//	('sub' | 'subf' | 'sbb' | 'sbbf') (OperationsWithConstant | OperationsWithThreeRegisters) | 'subr'
	//	OperationsWithThreeRegisters
	//	| ('dec' | 'decf') Register;
	public SubElements getSubAccess() {
		return pSub;
	}
	
	public ParserRule getSubRule() {
		return getSubAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ******************************************* Logica *************************************** / Anl:
	//	('anl' | 'anlf') OperationsWithThreeRegisters;
	public AnlElements getAnlAccess() {
		return pAnl;
	}
	
	public ParserRule getAnlRule() {
		return getAnlAccess().getRule();
	}
	
	//Orl:
	//	('orl' | 'orlf') OperationsWithThreeRegisters
	//	| ('mov' | 'movf') OperationWithTwoRegisters;
	public OrlElements getOrlAccess() {
		return pOrl;
	}
	
	public ParserRule getOrlRule() {
		return getOrlAccess().getRule();
	}
	
	//Xrl:
	//	('xrl' | 'xrlf') OperationsWithThreeRegisters;
	public XrlElements getXrlAccess() {
		return pXrl;
	}
	
	public ParserRule getXrlRule() {
		return getXrlAccess().getRule();
	}
	
	//Not:
	//	('not' | 'notf') OperationWithTwoRegisters;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Shl:
	//	'shl' OperationShift;
	public ShlElements getShlAccess() {
		return pShl;
	}
	
	public ParserRule getShlRule() {
		return getShlAccess().getRule();
	}
	
	//Shr:
	//	'shr' OperationShift;
	public ShrElements getShrAccess() {
		return pShr;
	}
	
	public ParserRule getShrRule() {
		return getShrAccess().getRule();
	}
	
	//Rr:
	//	('rrl' | 'rrm') OperationsWithConstant;
	public RrElements getRrAccess() {
		return pRr;
	}
	
	public ParserRule getRrRule() {
		return getRrAccess().getRule();
	}
	
	//Rc:
	//	('rcr' | 'rcl') OperationWithTwoRegisters;
	public RcElements getRcAccess() {
		return pRc;
	}
	
	public ParserRule getRcRule() {
		return getRcAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ************************************** Jump ********************************************** / JumpOp:
	//	tag=('jz' | 'je' | 'jnz' | 'jne' | 'jc' | 'jbl' | 'jnc' | 'jae' | 'jmp' | 'jmpl') (opOff=OperationWithOffset |
	//	opId=ID | '$');
	public JumpOpElements getJumpOpAccess() {
		return pJumpOp;
	}
	
	public ParserRule getJumpOpRule() {
		return getJumpOpAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// *************************** Others Instuctions ******************************************* / Nop:
	//	instruction='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//Ret:
	//	instruction=('ret' | 'iret');
	public RetElements getRetAccess() {
		return pRet;
	}
	
	public ParserRule getRetRule() {
		return getRetAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ************************************Type Operations*************************************** / Immediate:
	//	register=Register ',' (immediate8=Immediate8OrLabel | lowORhigh=LowOrHight);
	public ImmediateElements getImmediateAccess() {
		return pImmediate;
	}
	
	public ParserRule getImmediateRule() {
		return getImmediateAccess().getRule();
	}
	
	//Direct:
	//	register=Register ',' direct7=DirectOrLabel;
	public DirectElements getDirectAccess() {
		return pDirect;
	}
	
	public ParserRule getDirectRule() {
		return getDirectAccess().getRule();
	}
	
	//Indexed:
	//	rd=Register ',' '[' rbx=Register ',' idx3=Idx3OrLabel ']';
	public IndexedElements getIndexedAccess() {
		return pIndexed;
	}
	
	public ParserRule getIndexedRule() {
		return getIndexedAccess().getRule();
	}
	
	//BasedIndexed:
	//	Register ',' '[' rbx=Register ',' rix=Register ']';
	public BasedIndexedElements getBasedIndexedAccess() {
		return pBasedIndexed;
	}
	
	public ParserRule getBasedIndexedRule() {
		return getBasedIndexedAccess().getRule();
	}
	
	//DirectOrLabel:
	//	number=Number | label=ID;
	public DirectOrLabelElements getDirectOrLabelAccess() {
		return pDirectOrLabel;
	}
	
	public ParserRule getDirectOrLabelRule() {
		return getDirectOrLabelAccess().getRule();
	}
	
	//Immediate8OrLabel:
	//	'#' (number=Number | label=ID);
	public Immediate8OrLabelElements getImmediate8OrLabelAccess() {
		return pImmediate8OrLabel;
	}
	
	public ParserRule getImmediate8OrLabelRule() {
		return getImmediate8OrLabelAccess().getRule();
	}
	
	//Idx3OrLabel:
	//	'#' (number=Number | label=ID);
	public Idx3OrLabelElements getIdx3OrLabelAccess() {
		return pIdx3OrLabel;
	}
	
	public ParserRule getIdx3OrLabelRule() {
		return getIdx3OrLabelAccess().getRule();
	}
	
	//Const4OrLabel:
	//	'#' (number=Number | label=ID);
	public Const4OrLabelElements getConst4OrLabelAccess() {
		return pConst4OrLabel;
	}
	
	public ParserRule getConst4OrLabelRule() {
		return getConst4OrLabelAccess().getRule();
	}
	
	//Offset8OrLabel:
	//	'#' (number=Number | label=ID);
	public Offset8OrLabelElements getOffset8OrLabelAccess() {
		return pOffset8OrLabel;
	}
	
	public ParserRule getOffset8OrLabelRule() {
		return getOffset8OrLabelAccess().getRule();
	}
	
	//OperationWithTwoRegisters:
	//	rd=Register ',' rm=Register;
	public OperationWithTwoRegistersElements getOperationWithTwoRegistersAccess() {
		return pOperationWithTwoRegisters;
	}
	
	public ParserRule getOperationWithTwoRegistersRule() {
		return getOperationWithTwoRegistersAccess().getRule();
	}
	
	//OperationsWithThreeRegisters:
	//	rd=Register ',' rm=Register ',' rn=Register;
	public OperationsWithThreeRegistersElements getOperationsWithThreeRegistersAccess() {
		return pOperationsWithThreeRegisters;
	}
	
	public ParserRule getOperationsWithThreeRegistersRule() {
		return getOperationsWithThreeRegistersAccess().getRule();
	}
	
	//OperationsWithConstant:
	//	rd=Register ',' rm=Register ',' const4=Const4OrLabel;
	public OperationsWithConstantElements getOperationsWithConstantAccess() {
		return pOperationsWithConstant;
	}
	
	public ParserRule getOperationsWithConstantRule() {
		return getOperationsWithConstantAccess().getRule();
	}
	
	//OperationShift:
	//	rd=Register ',' rm=Register ',' const4=Const4OrLabel ',' sin=Number;
	public OperationShiftElements getOperationShiftAccess() {
		return pOperationShift;
	}
	
	public ParserRule getOperationShiftRule() {
		return getOperationShiftAccess().getRule();
	}
	
	//OperationWithOffset:
	//	rbx=Register ',' offset8=Offset8OrLabel;
	public OperationWithOffsetElements getOperationWithOffsetAccess() {
		return pOperationWithOffset;
	}
	
	public ParserRule getOperationWithOffsetRule() {
		return getOperationWithOffsetAccess().getRule();
	}
	
	//Expression:
	//	(numericValue+=(INT | HEX | OCT | BIN | CHAR) | idValue+=ID)+;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	////TODO: sinais
	//LowOrHight:
	//	'#' ('low' | 'high') '(' value=Expression ')';
	public LowOrHightElements getLowOrHightAccess() {
		return pLowOrHight;
	}
	
	public ParserRule getLowOrHightRule() {
		return getLowOrHightAccess().getRule();
	}
	
	/// ****************************************************************************************** /
	/// ***********************************************Utils************************************** / Register:
	//	value=('r0' | 'r1' | 'r2' | 'r3' | 'r4' | 'r5' | 'r6' | 'r7' | 'LR' | 'PSW' | 'PC');
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//Number:
	//	value=(INT | HEX | OCT | BIN | CHAR);
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal HEX returns ecore::EInt:
	//	SIGN? ('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal OCT returns ecore::EInt:
	//	SIGN? '0' '0'..'7'+;
	public TerminalRule getOCTRule() {
		return tOCT;
	}
	
	//terminal BIN returns ecore::EInt:
	//	SIGN? ('0' | '1')+ 'b';
	public TerminalRule getBINRule() {
		return tBIN;
	}
	
	//terminal CHAR returns ecore::EInt:
	//	SIGN? "'" ANY_OTHER "'";
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal SIGN:
	//	'-' | '+';
	public TerminalRule getSIGNRule() {
		return tSIGN;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal IDLABEL:
	//	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+ ':';
	public TerminalRule getIDLABELRule() {
		return tIDLABEL;
	}
	
	//terminal INT returns ecore::EInt:
	//	SIGN? '0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	';'->'\n';
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
