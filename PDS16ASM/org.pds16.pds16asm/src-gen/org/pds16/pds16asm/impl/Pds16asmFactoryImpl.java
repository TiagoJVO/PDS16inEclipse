/**
 * generated by Xtext 2.9.2
 */
package org.pds16.pds16asm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.pds16.pds16asm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Pds16asmFactoryImpl extends EFactoryImpl implements Pds16asmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Pds16asmFactory init()
  {
    try
    {
      Pds16asmFactory thePds16asmFactory = (Pds16asmFactory)EPackage.Registry.INSTANCE.getEFactory(Pds16asmPackage.eNS_URI);
      if (thePds16asmFactory != null)
      {
        return thePds16asmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Pds16asmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pds16asmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Pds16asmPackage.PDS16ASM: return createPDS16ASM();
      case Pds16asmPackage.STATEMENT: return createStatement();
      case Pds16asmPackage.INSTRUCTIONS: return createInstructions();
      case Pds16asmPackage.COMMENT: return createComment();
      case Pds16asmPackage.LOAD: return createLoad();
      case Pds16asmPackage.STORE: return createStore();
      case Pds16asmPackage.ARITMETICA: return createAritmetica();
      case Pds16asmPackage.LOGICA: return createLogica();
      case Pds16asmPackage.JUMP: return createJump();
      case Pds16asmPackage.LD_IMMEDIATE: return createLdImmediate();
      case Pds16asmPackage.LD_DIRECT: return createLdDirect();
      case Pds16asmPackage.LD_INDEXED: return createLdIndexed();
      case Pds16asmPackage.LD_BASED_INDEXED: return createLdBasedIndexed();
      case Pds16asmPackage.ST_DIRECT: return createStDirect();
      case Pds16asmPackage.ST_INDEXED: return createStIndexed();
      case Pds16asmPackage.ST_BASED_INDEXED: return createStBasedIndexed();
      case Pds16asmPackage.ADD: return createAdd();
      case Pds16asmPackage.SUB: return createSub();
      case Pds16asmPackage.ANL: return createAnl();
      case Pds16asmPackage.ORL: return createOrl();
      case Pds16asmPackage.XRL: return createXrl();
      case Pds16asmPackage.NOT: return createNot();
      case Pds16asmPackage.SHL: return createShl();
      case Pds16asmPackage.SHR: return createShr();
      case Pds16asmPackage.RR: return createRr();
      case Pds16asmPackage.RC: return createRc();
      case Pds16asmPackage.JUMP_OP: return createJumpOp();
      case Pds16asmPackage.IMMEDIATE: return createImmediate();
      case Pds16asmPackage.DIRECT: return createDirect();
      case Pds16asmPackage.INDEXED: return createIndexed();
      case Pds16asmPackage.BASED_INDEXED: return createBasedIndexed();
      case Pds16asmPackage.INT_OR_HEX_OR_STRING: return createIntOrHexOrString();
      case Pds16asmPackage.OPERATION_WITH_TWO_REGISTERS: return createOperationWithTwoRegisters();
      case Pds16asmPackage.OPERATIONS_WITH_TREE_REGISTERS: return createOperationsWithTreeRegisters();
      case Pds16asmPackage.OPERATIONS_WITH_CONSTANT: return createOperationsWithConstant();
      case Pds16asmPackage.OPERATION_SHIFT: return createOperationShift();
      case Pds16asmPackage.OPERATION_WITH_OFFSET: return createOperationWithOffset();
      case Pds16asmPackage.REGISTERS: return createRegisters();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PDS16ASM createPDS16ASM()
  {
    PDS16ASMImpl pds16ASM = new PDS16ASMImpl();
    return pds16ASM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instructions createInstructions()
  {
    InstructionsImpl instructions = new InstructionsImpl();
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comment createComment()
  {
    CommentImpl comment = new CommentImpl();
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Load createLoad()
  {
    LoadImpl load = new LoadImpl();
    return load;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Store createStore()
  {
    StoreImpl store = new StoreImpl();
    return store;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Aritmetica createAritmetica()
  {
    AritmeticaImpl aritmetica = new AritmeticaImpl();
    return aritmetica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Logica createLogica()
  {
    LogicaImpl logica = new LogicaImpl();
    return logica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Jump createJump()
  {
    JumpImpl jump = new JumpImpl();
    return jump;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LdImmediate createLdImmediate()
  {
    LdImmediateImpl ldImmediate = new LdImmediateImpl();
    return ldImmediate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LdDirect createLdDirect()
  {
    LdDirectImpl ldDirect = new LdDirectImpl();
    return ldDirect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LdIndexed createLdIndexed()
  {
    LdIndexedImpl ldIndexed = new LdIndexedImpl();
    return ldIndexed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LdBasedIndexed createLdBasedIndexed()
  {
    LdBasedIndexedImpl ldBasedIndexed = new LdBasedIndexedImpl();
    return ldBasedIndexed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StDirect createStDirect()
  {
    StDirectImpl stDirect = new StDirectImpl();
    return stDirect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StIndexed createStIndexed()
  {
    StIndexedImpl stIndexed = new StIndexedImpl();
    return stIndexed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StBasedIndexed createStBasedIndexed()
  {
    StBasedIndexedImpl stBasedIndexed = new StBasedIndexedImpl();
    return stBasedIndexed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Add createAdd()
  {
    AddImpl add = new AddImpl();
    return add;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sub createSub()
  {
    SubImpl sub = new SubImpl();
    return sub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Anl createAnl()
  {
    AnlImpl anl = new AnlImpl();
    return anl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Orl createOrl()
  {
    OrlImpl orl = new OrlImpl();
    return orl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Xrl createXrl()
  {
    XrlImpl xrl = new XrlImpl();
    return xrl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Shl createShl()
  {
    ShlImpl shl = new ShlImpl();
    return shl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Shr createShr()
  {
    ShrImpl shr = new ShrImpl();
    return shr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rr createRr()
  {
    RrImpl rr = new RrImpl();
    return rr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rc createRc()
  {
    RcImpl rc = new RcImpl();
    return rc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JumpOp createJumpOp()
  {
    JumpOpImpl jumpOp = new JumpOpImpl();
    return jumpOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Immediate createImmediate()
  {
    ImmediateImpl immediate = new ImmediateImpl();
    return immediate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Direct createDirect()
  {
    DirectImpl direct = new DirectImpl();
    return direct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Indexed createIndexed()
  {
    IndexedImpl indexed = new IndexedImpl();
    return indexed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasedIndexed createBasedIndexed()
  {
    BasedIndexedImpl basedIndexed = new BasedIndexedImpl();
    return basedIndexed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntOrHexOrString createIntOrHexOrString()
  {
    IntOrHexOrStringImpl intOrHexOrString = new IntOrHexOrStringImpl();
    return intOrHexOrString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationWithTwoRegisters createOperationWithTwoRegisters()
  {
    OperationWithTwoRegistersImpl operationWithTwoRegisters = new OperationWithTwoRegistersImpl();
    return operationWithTwoRegisters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationsWithTreeRegisters createOperationsWithTreeRegisters()
  {
    OperationsWithTreeRegistersImpl operationsWithTreeRegisters = new OperationsWithTreeRegistersImpl();
    return operationsWithTreeRegisters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationsWithConstant createOperationsWithConstant()
  {
    OperationsWithConstantImpl operationsWithConstant = new OperationsWithConstantImpl();
    return operationsWithConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationShift createOperationShift()
  {
    OperationShiftImpl operationShift = new OperationShiftImpl();
    return operationShift;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationWithOffset createOperationWithOffset()
  {
    OperationWithOffsetImpl operationWithOffset = new OperationWithOffsetImpl();
    return operationWithOffset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Registers createRegisters()
  {
    RegistersImpl registers = new RegistersImpl();
    return registers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pds16asmPackage getPds16asmPackage()
  {
    return (Pds16asmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Pds16asmPackage getPackage()
  {
    return Pds16asmPackage.eINSTANCE;
  }

} //Pds16asmFactoryImpl
