/*
 * generated by Xtext 2.9.2
 */
package org.pds16.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.pds16.pds16asm.Comment;
import org.pds16.pds16asm.Direct;
import org.pds16.pds16asm.Immediate;
import org.pds16.pds16asm.Indexed;
import org.pds16.pds16asm.IntOrHexOrString;
import org.pds16.pds16asm.OperationShift;
import org.pds16.pds16asm.OperationWithOffset;
import org.pds16.pds16asm.OperationWithTwoRegisters;
import org.pds16.pds16asm.OperationsWithConstant;
import org.pds16.pds16asm.OperationsWithTreeRegisters;
import org.pds16.pds16asm.PDS16ASM;
import org.pds16.pds16asm.Pds16asmPackage;
import org.pds16.pds16asm.Registers;
import org.pds16.services.Pds16asmGrammarAccess;

@SuppressWarnings("all")
public class Pds16asmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Pds16asmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Pds16asmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Pds16asmPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case Pds16asmPackage.DIRECT:
				sequence_Direct(context, (Direct) semanticObject); 
				return; 
			case Pds16asmPackage.IMMEDIATE:
				sequence_Immediate(context, (Immediate) semanticObject); 
				return; 
			case Pds16asmPackage.INDEXED:
				sequence_Indexed(context, (Indexed) semanticObject); 
				return; 
			case Pds16asmPackage.INT_OR_HEX_OR_STRING:
				sequence_IntOrHexOrString(context, (IntOrHexOrString) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATION_SHIFT:
				sequence_OperationShift(context, (OperationShift) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATION_WITH_OFFSET:
				sequence_OperationWithOffset(context, (OperationWithOffset) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATION_WITH_TWO_REGISTERS:
				sequence_OperationWithTwoRegisters(context, (OperationWithTwoRegisters) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATIONS_WITH_CONSTANT:
				sequence_OperationsWithConstant(context, (OperationsWithConstant) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATIONS_WITH_TREE_REGISTERS:
				sequence_OperationsWithTreeRegisters(context, (OperationsWithTreeRegisters) semanticObject); 
				return; 
			case Pds16asmPackage.PDS16ASM:
				sequence_PDS16ASM(context, (PDS16ASM) semanticObject); 
				return; 
			case Pds16asmPackage.REGISTERS:
				if (rule == grammarAccess.getStatementRule()
						|| rule == grammarAccess.getInstructionsRule()
						|| rule == grammarAccess.getLoadRule()
						|| rule == grammarAccess.getStoreRule()
						|| rule == grammarAccess.getLdBasedIndexedRule()
						|| rule == grammarAccess.getStBasedIndexedRule()
						|| rule == grammarAccess.getBasedIndexedRule()) {
					sequence_BasedIndexed_Registers(context, (Registers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRegistersRule()) {
					sequence_Registers(context, (Registers) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Registers
	 *     Instructions returns Registers
	 *     Load returns Registers
	 *     Store returns Registers
	 *     LdBasedIndexed returns Registers
	 *     StBasedIndexed returns Registers
	 *     BasedIndexed returns Registers
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             value='r0' | 
	 *             value='r1' | 
	 *             value='r2' | 
	 *             value='r3' | 
	 *             value='r4' | 
	 *             value='r5' | 
	 *             value='r6' | 
	 *             value='r7' | 
	 *             value='PSW'
	 *         ) 
	 *         rbx=Registers 
	 *         rix=Registers
	 *     )
	 */
	protected void sequence_BasedIndexed_Registers(ISerializationContext context, Registers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Comment
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     comment=COMT
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.COMMENT__COMMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.COMMENT__COMMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getCommentCOMTTerminalRuleCall_0(), semanticObject.getComment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Direct
	 *     Instructions returns Direct
	 *     Load returns Direct
	 *     Store returns Direct
	 *     LdDirect returns Direct
	 *     StDirect returns Direct
	 *     Direct returns Direct
	 *
	 * Constraint:
	 *     register=Registers
	 */
	protected void sequence_Direct(ISerializationContext context, Direct semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.DIRECT__REGISTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.DIRECT__REGISTER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDirectAccess().getRegisterRegistersParserRuleCall_0_0(), semanticObject.getRegister());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Immediate
	 *     Instructions returns Immediate
	 *     Load returns Immediate
	 *     LdImmediate returns Immediate
	 *     Immediate returns Immediate
	 *
	 * Constraint:
	 *     (register=Registers immediate8=IntOrHexOrString)
	 */
	protected void sequence_Immediate(ISerializationContext context, Immediate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.IMMEDIATE__REGISTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.IMMEDIATE__REGISTER));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.IMMEDIATE__IMMEDIATE8) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.IMMEDIATE__IMMEDIATE8));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImmediateAccess().getRegisterRegistersParserRuleCall_0_0(), semanticObject.getRegister());
		feeder.accept(grammarAccess.getImmediateAccess().getImmediate8IntOrHexOrStringParserRuleCall_2_0(), semanticObject.getImmediate8());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Indexed
	 *     Instructions returns Indexed
	 *     Load returns Indexed
	 *     Store returns Indexed
	 *     LdIndexed returns Indexed
	 *     StIndexed returns Indexed
	 *     Indexed returns Indexed
	 *
	 * Constraint:
	 *     (rd=Registers rbx=Registers idx3=IntOrHexOrString)
	 */
	protected void sequence_Indexed(ISerializationContext context, Indexed semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.INDEXED__RD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.INDEXED__RD));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.INDEXED__RBX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.INDEXED__RBX));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.INDEXED__IDX3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.INDEXED__IDX3));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndexedAccess().getRdRegistersParserRuleCall_0_0(), semanticObject.getRd());
		feeder.accept(grammarAccess.getIndexedAccess().getRbxRegistersParserRuleCall_3_0(), semanticObject.getRbx());
		feeder.accept(grammarAccess.getIndexedAccess().getIdx3IntOrHexOrStringParserRuleCall_5_0(), semanticObject.getIdx3());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntOrHexOrString returns IntOrHexOrString
	 *
	 * Constraint:
	 *     (int=NUMB | hex=HEX | label=STRING)
	 */
	protected void sequence_IntOrHexOrString(ISerializationContext context, IntOrHexOrString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns OperationShift
	 *     Instructions returns OperationShift
	 *     Logica returns OperationShift
	 *     Shl returns OperationShift
	 *     Shr returns OperationShift
	 *     OperationShift returns OperationShift
	 *
	 * Constraint:
	 *     (rd=Registers rm=Registers const4=IntOrHexOrString sin=BIN)
	 */
	protected void sequence_OperationShift(ISerializationContext context, OperationShift semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__RD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__RD));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__RM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__RM));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__CONST4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__CONST4));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__SIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_SHIFT__SIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationShiftAccess().getRdRegistersParserRuleCall_0_0(), semanticObject.getRd());
		feeder.accept(grammarAccess.getOperationShiftAccess().getRmRegistersParserRuleCall_2_0(), semanticObject.getRm());
		feeder.accept(grammarAccess.getOperationShiftAccess().getConst4IntOrHexOrStringParserRuleCall_4_0(), semanticObject.getConst4());
		feeder.accept(grammarAccess.getOperationShiftAccess().getSinBINTerminalRuleCall_6_0(), semanticObject.getSin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns OperationWithOffset
	 *     Instructions returns OperationWithOffset
	 *     Jump returns OperationWithOffset
	 *     JumpOp returns OperationWithOffset
	 *     OperationWithOffset returns OperationWithOffset
	 *
	 * Constraint:
	 *     (rbx=Registers offset8=IntOrHexOrString)
	 */
	protected void sequence_OperationWithOffset(ISerializationContext context, OperationWithOffset semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_OFFSET__RBX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_OFFSET__RBX));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_OFFSET__OFFSET8) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_OFFSET__OFFSET8));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationWithOffsetAccess().getRbxRegistersParserRuleCall_0_0(), semanticObject.getRbx());
		feeder.accept(grammarAccess.getOperationWithOffsetAccess().getOffset8IntOrHexOrStringParserRuleCall_2_0(), semanticObject.getOffset8());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns OperationWithTwoRegisters
	 *     Instructions returns OperationWithTwoRegisters
	 *     Logica returns OperationWithTwoRegisters
	 *     Not returns OperationWithTwoRegisters
	 *     Rc returns OperationWithTwoRegisters
	 *     OperationWithTwoRegisters returns OperationWithTwoRegisters
	 *
	 * Constraint:
	 *     (rd=Registers rm=Registers)
	 */
	protected void sequence_OperationWithTwoRegisters(ISerializationContext context, OperationWithTwoRegisters semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_TWO_REGISTERS__RD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_TWO_REGISTERS__RD));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_TWO_REGISTERS__RM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_WITH_TWO_REGISTERS__RM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationWithTwoRegistersAccess().getRdRegistersParserRuleCall_0_0(), semanticObject.getRd());
		feeder.accept(grammarAccess.getOperationWithTwoRegistersAccess().getRmRegistersParserRuleCall_2_0(), semanticObject.getRm());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns OperationsWithConstant
	 *     Instructions returns OperationsWithConstant
	 *     Aritmetica returns OperationsWithConstant
	 *     Logica returns OperationsWithConstant
	 *     Add returns OperationsWithConstant
	 *     Sub returns OperationsWithConstant
	 *     Rr returns OperationsWithConstant
	 *     OperationsWithConstant returns OperationsWithConstant
	 *
	 * Constraint:
	 *     (rd=Registers rm=Registers const4=IntOrHexOrString)
	 */
	protected void sequence_OperationsWithConstant(ISerializationContext context, OperationsWithConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_CONSTANT__RD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_CONSTANT__RD));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_CONSTANT__RM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_CONSTANT__RM));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_CONSTANT__CONST4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_CONSTANT__CONST4));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationsWithConstantAccess().getRdRegistersParserRuleCall_0_0(), semanticObject.getRd());
		feeder.accept(grammarAccess.getOperationsWithConstantAccess().getRmRegistersParserRuleCall_2_0(), semanticObject.getRm());
		feeder.accept(grammarAccess.getOperationsWithConstantAccess().getConst4IntOrHexOrStringParserRuleCall_4_0(), semanticObject.getConst4());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns OperationsWithTreeRegisters
	 *     Instructions returns OperationsWithTreeRegisters
	 *     Aritmetica returns OperationsWithTreeRegisters
	 *     Logica returns OperationsWithTreeRegisters
	 *     Add returns OperationsWithTreeRegisters
	 *     Sub returns OperationsWithTreeRegisters
	 *     Anl returns OperationsWithTreeRegisters
	 *     Orl returns OperationsWithTreeRegisters
	 *     Xrl returns OperationsWithTreeRegisters
	 *     OperationsWithTreeRegisters returns OperationsWithTreeRegisters
	 *
	 * Constraint:
	 *     (rd=Registers rm=Registers rn=Registers)
	 */
	protected void sequence_OperationsWithTreeRegisters(ISerializationContext context, OperationsWithTreeRegisters semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_TREE_REGISTERS__RD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_TREE_REGISTERS__RD));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_TREE_REGISTERS__RM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_TREE_REGISTERS__RM));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_TREE_REGISTERS__RN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS_WITH_TREE_REGISTERS__RN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationsWithTreeRegistersAccess().getRdRegistersParserRuleCall_0_0(), semanticObject.getRd());
		feeder.accept(grammarAccess.getOperationsWithTreeRegistersAccess().getRmRegistersParserRuleCall_2_0(), semanticObject.getRm());
		feeder.accept(grammarAccess.getOperationsWithTreeRegistersAccess().getRnRegistersParserRuleCall_4_0(), semanticObject.getRn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PDS16ASM returns PDS16ASM
	 *
	 * Constraint:
	 *     instuctions+=Statement+
	 */
	protected void sequence_PDS16ASM(ISerializationContext context, PDS16ASM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Registers returns Registers
	 *
	 * Constraint:
	 *     (
	 *         value='r0' | 
	 *         value='r1' | 
	 *         value='r2' | 
	 *         value='r3' | 
	 *         value='r4' | 
	 *         value='r5' | 
	 *         value='r6' | 
	 *         value='r7' | 
	 *         value='PSW'
	 *     )
	 */
	protected void sequence_Registers(ISerializationContext context, Registers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
