/*
 * generated by Xtext 2.9.2
 */
package org.pds16.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.pds16.pds16asm.HexaDecimal;
import org.pds16.pds16asm.Indexed;
import org.pds16.pds16asm.Model;
import org.pds16.pds16asm.OperationLD2;
import org.pds16.pds16asm.OperationLDI;
import org.pds16.pds16asm.Pds16asmPackage;
import org.pds16.pds16asm.R1;
import org.pds16.pds16asm.R2;
import org.pds16.services.Pds16asmGrammarAccess;

@SuppressWarnings("all")
public class Pds16asmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Pds16asmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Pds16asmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Pds16asmPackage.HEXA_DECIMAL:
				sequence_HexaDecimal(context, (HexaDecimal) semanticObject); 
				return; 
			case Pds16asmPackage.INDEXED:
				sequence_Indexed(context, (Indexed) semanticObject); 
				return; 
			case Pds16asmPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATION_LD2:
				sequence_OperationLD2(context, (OperationLD2) semanticObject); 
				return; 
			case Pds16asmPackage.OPERATION_LDI:
				sequence_OperationLDI(context, (OperationLDI) semanticObject); 
				return; 
			case Pds16asmPackage.R1:
				sequence_R1(context, (R1) semanticObject); 
				return; 
			case Pds16asmPackage.R2:
				sequence_R2(context, (R2) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HexaDecimal returns HexaDecimal
	 *
	 * Constraint:
	 *     number=ID
	 */
	protected void sequence_HexaDecimal(ISerializationContext context, HexaDecimal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.HEXA_DECIMAL__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.HEXA_DECIMAL__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHexaDecimalAccess().getNumberIDTerminalRuleCall_1_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Indexed returns Indexed
	 *
	 * Constraint:
	 *     (reg=Registers imediate8=HexaDecimal)
	 */
	protected void sequence_Indexed(ISerializationContext context, Indexed semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.INDEXED__REG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.INDEXED__REG));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.INDEXED__IMEDIATE8) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.INDEXED__IMEDIATE8));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndexedAccess().getRegRegistersParserRuleCall_1_0(), semanticObject.getReg());
		feeder.accept(grammarAccess.getIndexedAccess().getImediate8HexaDecimalParserRuleCall_3_0(), semanticObject.getImediate8());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     operations+=Operations+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operations returns OperationLD2
	 *     OperationLD2 returns OperationLD2
	 *
	 * Constraint:
	 *     (register=Registers indexed=Indexed)
	 */
	protected void sequence_OperationLD2(ISerializationContext context, OperationLD2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS__REGISTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS__REGISTER));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_LD2__INDEXED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_LD2__INDEXED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationLD2Access().getRegisterRegistersParserRuleCall_1_0(), semanticObject.getRegister());
		feeder.accept(grammarAccess.getOperationLD2Access().getIndexedIndexedParserRuleCall_3_0(), semanticObject.getIndexed());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operations returns OperationLDI
	 *     OperationLDI returns OperationLDI
	 *
	 * Constraint:
	 *     (register=Registers immediate8=HexaDecimal)
	 */
	protected void sequence_OperationLDI(ISerializationContext context, OperationLDI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATIONS__REGISTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATIONS__REGISTER));
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.OPERATION_LDI__IMMEDIATE8) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.OPERATION_LDI__IMMEDIATE8));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationLDIAccess().getRegisterRegistersParserRuleCall_1_0(), semanticObject.getRegister());
		feeder.accept(grammarAccess.getOperationLDIAccess().getImmediate8HexaDecimalParserRuleCall_3_0(), semanticObject.getImmediate8());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Registers returns R1
	 *     R1 returns R1
	 *
	 * Constraint:
	 *     value='R1'
	 */
	protected void sequence_R1(ISerializationContext context, R1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.REGISTERS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.REGISTERS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getR1Access().getValueR1Keyword_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Registers returns R2
	 *     R2 returns R2
	 *
	 * Constraint:
	 *     value='R2'
	 */
	protected void sequence_R2(ISerializationContext context, R2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Pds16asmPackage.Literals.REGISTERS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Pds16asmPackage.Literals.REGISTERS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getR2Access().getValueR2Keyword_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
